syntax = "proto3";

package pms;

option go_package = "pms/product";

import "brand.proto";
import "product_attribute.proto";
import "product_attribute_value.proto";
import "sku_stock.proto";
import "product_ladder.proto";
import "product_full_reduction.proto";
import "member_price.proto";


/*
产品基础Base属性
*/

message BaseProduct {
  // 商品ID
  int64       Id = 1;

  // 商品基础信息
  string      Name = 2; // 商品名称
  string      Pic = 3; // 商品主图
  string      ProductSn = 4; // 商品SN（货号）

  // 类目及品牌关联信息
  int64       BrandId = 5; // 品牌ID
  string      BrandName = 6; // 品牌名称
  int64       ProductCategoryId = 7; // 商品类目ID
  string      ProductCategoryName = 8; // 商品类目名称
  repeated int64 ProductCategoryIdArray = 9; // 商品类目ID数组

  // 运费模板与产品属性分类
  int64       FreightTemplateId = 10; // 商品运费模板id
  int64       ProductAttributeCategoryId = 11; // 商品属性分类id
  string ServiceIDs = 12; // 以逗号分割的产品服务：1->无忧退货；2->快速退款；3->免费包邮

  // 商品状态
  int64       DeleteStatus = 13; // 删除状态（0: 未删除, 1: 已删除）
  int64       PublishStatus = 14; // 发布状态（0: 下架, 1: 上架）
  int64       NewStatus = 15; // 新品状态（0: 非新品, 1: 新品）
  int64       RecommendStatus = 16; // 推荐状态（0: 不推荐, 1: 推荐）
  int64       VerifyStatus = 17; // 审核状态（0: 未审核, 1: 已审核）
  int64       PreviewStatus = 18; // 预售状态（0: 非预售, 1: 预售）

  // 销售与库存信息
  int64       Sort = 19; // 排序值
  int64       Sale = 20; // 销量
  double     Price = 21; // 价格
  double     PromotionPrice = 22; // 促销价格
  int64       Stock = 23; // 库存数量
  int64       LowStock = 24; // 库存预警值

  // 成长积分与促销信息
  int64       GiftGrowth = 25; // 购买该商品赠送的成长值
  int64       GiftPoint = 26; // 购买该商品赠送的积分
  int64       UsePointLimit = 27; // 使用积分抵扣的上限
  string      PromotionStartTime = 28; // 促销开始时间
  string      PromotionEndTime = 29; // 促销结束时间
  int64       PromotionPerLimit = 30; // 每人限购数量
  int64       PromotionType = 31; // 促销类型：0->没有促销使用原价;1->使用促销价；2->使用会员价；3->使用阶梯价格；4->使用满减价格；5->限时购

  // 商品附加信息
  string      SubTitle = 32; // 商品副标题
  string      Description = 33; // 商品描述
  double     OriginalPrice = 34; // 市场价
  string      Unit = 35; // 商品单位
  double     Weight = 36; // 商品重量

  // SEO与附加内容
  string      Keywords = 37; // 商品关键字
  string      Note = 38; // 备注
  string      AlbumPics = 39; // 画册图片，连产品图片限制为5张，以逗号分割
  string      DetailTitle = 40; // 详情标题
  string      DetailDesc = 41; // 详情描述
  string      DetailHtml = 42; // 详情内容
  string      DetailMobileHtml = 43; // 详情手机版内容
}


// MemberPriceList 定义了会员价格列表的信息
message MemberPriceList {
  int64    MemberLevelId = 1; // 会员等级ID
  float  MemberPrice = 2; // 会员价格
  string    MemberLevelName = 3; // 会员等级名称
}

// ProductAttributeValueList 定义了产品属性值列表的信息
message ProductAttributeValueList {
  int64    ProductAttributeId = 1; // 产品属性ID
  string  AttributeValues = 2; // 属性值
}

// ProductFullReductionList 定义了商品满减信息
message ProductFullReductionList {
  float  FullPrice = 1; // 满减条件的原价
  float  ReducePrice = 2; // 满减后的优惠价格
}

// ProductLadderList 定义了商品阶梯价格信息
message ProductLadderList {
  int64    Count = 2; // 阶梯数量
  float  Discount = 3; // 折扣率
  float  Price = 4; // 价格
}

// SkuStockList 定义了SKU库存列表的信息
message SkuStockList {
  string    SkuCode = 1; // SKU编码
  float  Price = 2; // 价格
  int64    Stock = 3; // 库存数量
  int64    LowStock = 4; // 低库存数量
  string    Pic = 5; // 图片链接
  int64    Sale = 6; // 销售数量
  float  PromotionPrice = 7; // 促销价格
  int64    LockStock = 8; // 锁定库存
  string    SpData = 9; // 额外属性数据
}

// ProductAddReq 定义了添加商品请求的数据结构
message ProductAddReq {
  BaseProduct Product = 1;
  repeated MemberPriceList      MemberPriceList = 2; // MemberPriceList 会员价格列表
  repeated ProductAttributeValueList      ProductAttributeValueList = 3; // ProductAttributeValueList 商品属性值列表
  repeated ProductFullReductionList      ProductFullReductionList = 4;  // ProductFullReductionList 满减信息列表
  repeated ProductLadderList      ProductLadderList = 5;  // ProductLadderList 满件优惠列表
  repeated SkuStockList      SkuStockList = 6;  // SkuStockList SKU库存列表
}

message ProductAddResp {
  int32 productId = 1;
}

/*
获取商品列表
*/

message ProductListReq {
  int64 current = 1;      // 当前页码
  int64 pageSize = 2;     // 每页的产品数量
  string Name = 3;        // 产品名称
  int64  VerifyStatus = 4; // 核验状态，用于筛选已核验或未核验的产品
  int64  ProductCategoryId = 5; // 产品分类ID，用于按产品分类筛选产品
  int64       PublishStatus = 6; // 发布状态，用于筛选已发布或未发布的產品
  int64       DeleteStatus = 7; // 删除状态，用于筛选已删除或未删除的产品
  int64       BrandId = 8; // 品牌ID，用于按品牌筛选产品
}

message ProductByIdsReq {
  repeated int64  Ids = 1;
}


message ProductListResp {
  int64 total = 1;
  repeated  BaseProduct  list = 2;
}

/*
更新
*/

// ProductUpdateReq 产品更新请求消息
// 该消息用于传递更新产品信息的请求参数
message ProductUpdateReq {
  BaseProduct Product = 1;
  repeated MemberPriceList      MemberPriceList = 2; // 会员价格列表
  repeated ProductAttributeValueList      ProductAttributeValueList = 3; // 产品属性值列表
  repeated ProductFullReductionList      ProductFullReductionList = 4; // 满减信息列表
  repeated ProductLadderList      ProductLadderList = 5; // 满件优惠列表
  repeated SkuStockList      SkuStockList = 6; // SKU库存列表
}

message ProductUpdateResp {
  string pong = 1;
}

/*
删除
*/

message ProductDeleteReq {
  repeated int64 ids = 1;
}

message ProductDeleteResp {
  string pong = 1;
}

/*
详情查询
*/

message ProductDetailByIdReq {
  int64 id = 1; // 产品id
}



message ProductDetailByIdResp{
  BaseProduct Product       = 1;
  BaseBrand       Brand = 2;
  repeated BaseProductAttribute       ProductAttributeList = 3;
  repeated BaseProductAttributeValue       ProductAttributeValueList = 4;
  repeated BaseSkuStock      SkuStockList = 5;
  repeated BaseProductLadder      ProductLadderList = 6;
  repeated BaseProductFullReduction      ProductFullReductionList = 7;
  repeated BaseMemberPrice      MemberPriceList = 8;
}



service ProductService {
  rpc ProductAdd(ProductAddReq) returns(ProductAddResp);
  rpc ProductList(ProductListReq) returns(ProductListResp);
  // 它可以根据传入的产品ID列表来获取对应的产品信息，并将结果返回给客户端。
  // 这种方式通常用于获取特定的产品集合，例如购物车中的产品或者某个订单中的产品
  rpc ProductListByIds(ProductByIdsReq) returns(ProductListResp);
  rpc ProductUpdate(ProductUpdateReq) returns(ProductUpdateResp);
  rpc ProductDelete(ProductDeleteReq) returns(ProductDeleteResp);
  // 查询产品详细信息
  rpc ProductDetailById(ProductDetailByIdReq) returns(ProductDetailByIdResp);
}


