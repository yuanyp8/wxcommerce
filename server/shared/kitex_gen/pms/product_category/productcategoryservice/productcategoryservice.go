// Code generated by Kitex v0.9.0. DO NOT EDIT.

package productcategoryservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	product_category "github.com/yuanyp8/wxcommerce/shared/kitex_gen/pms/product_category"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"ProductCategoryAdd": kitex.NewMethodInfo(
		productCategoryAddHandler,
		newProductCategoryAddArgs,
		newProductCategoryAddResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ProductCategoryList": kitex.NewMethodInfo(
		productCategoryListHandler,
		newProductCategoryListArgs,
		newProductCategoryListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ProductCategoryUpdate": kitex.NewMethodInfo(
		productCategoryUpdateHandler,
		newProductCategoryUpdateArgs,
		newProductCategoryUpdateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ProductCategoryDelete": kitex.NewMethodInfo(
		productCategoryDeleteHandler,
		newProductCategoryDeleteArgs,
		newProductCategoryDeleteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"QueryProductCategoryList": kitex.NewMethodInfo(
		queryProductCategoryListHandler,
		newQueryProductCategoryListArgs,
		newQueryProductCategoryListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	productCategoryServiceServiceInfo                = NewServiceInfo()
	productCategoryServiceServiceInfoForClient       = NewServiceInfoForClient()
	productCategoryServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return productCategoryServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return productCategoryServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return productCategoryServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ProductCategoryService"
	handlerType := (*product_category.ProductCategoryService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "pms",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.0",
		Extra:           extra,
	}
	return svcInfo
}

func productCategoryAddHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product_category.ProductCategoryAddReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product_category.ProductCategoryService).ProductCategoryAdd(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ProductCategoryAddArgs:
		success, err := handler.(product_category.ProductCategoryService).ProductCategoryAdd(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ProductCategoryAddResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newProductCategoryAddArgs() interface{} {
	return &ProductCategoryAddArgs{}
}

func newProductCategoryAddResult() interface{} {
	return &ProductCategoryAddResult{}
}

type ProductCategoryAddArgs struct {
	Req *product_category.ProductCategoryAddReq
}

func (p *ProductCategoryAddArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product_category.ProductCategoryAddReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ProductCategoryAddArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ProductCategoryAddArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ProductCategoryAddArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ProductCategoryAddArgs) Unmarshal(in []byte) error {
	msg := new(product_category.ProductCategoryAddReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ProductCategoryAddArgs_Req_DEFAULT *product_category.ProductCategoryAddReq

func (p *ProductCategoryAddArgs) GetReq() *product_category.ProductCategoryAddReq {
	if !p.IsSetReq() {
		return ProductCategoryAddArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ProductCategoryAddArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductCategoryAddArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ProductCategoryAddResult struct {
	Success *product_category.ProductCategoryAddResp
}

var ProductCategoryAddResult_Success_DEFAULT *product_category.ProductCategoryAddResp

func (p *ProductCategoryAddResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product_category.ProductCategoryAddResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ProductCategoryAddResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ProductCategoryAddResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ProductCategoryAddResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ProductCategoryAddResult) Unmarshal(in []byte) error {
	msg := new(product_category.ProductCategoryAddResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ProductCategoryAddResult) GetSuccess() *product_category.ProductCategoryAddResp {
	if !p.IsSetSuccess() {
		return ProductCategoryAddResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ProductCategoryAddResult) SetSuccess(x interface{}) {
	p.Success = x.(*product_category.ProductCategoryAddResp)
}

func (p *ProductCategoryAddResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductCategoryAddResult) GetResult() interface{} {
	return p.Success
}

func productCategoryListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product_category.ProductCategoryListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product_category.ProductCategoryService).ProductCategoryList(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ProductCategoryListArgs:
		success, err := handler.(product_category.ProductCategoryService).ProductCategoryList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ProductCategoryListResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newProductCategoryListArgs() interface{} {
	return &ProductCategoryListArgs{}
}

func newProductCategoryListResult() interface{} {
	return &ProductCategoryListResult{}
}

type ProductCategoryListArgs struct {
	Req *product_category.ProductCategoryListReq
}

func (p *ProductCategoryListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product_category.ProductCategoryListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ProductCategoryListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ProductCategoryListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ProductCategoryListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ProductCategoryListArgs) Unmarshal(in []byte) error {
	msg := new(product_category.ProductCategoryListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ProductCategoryListArgs_Req_DEFAULT *product_category.ProductCategoryListReq

func (p *ProductCategoryListArgs) GetReq() *product_category.ProductCategoryListReq {
	if !p.IsSetReq() {
		return ProductCategoryListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ProductCategoryListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductCategoryListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ProductCategoryListResult struct {
	Success *product_category.ProductCategoryListResp
}

var ProductCategoryListResult_Success_DEFAULT *product_category.ProductCategoryListResp

func (p *ProductCategoryListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product_category.ProductCategoryListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ProductCategoryListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ProductCategoryListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ProductCategoryListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ProductCategoryListResult) Unmarshal(in []byte) error {
	msg := new(product_category.ProductCategoryListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ProductCategoryListResult) GetSuccess() *product_category.ProductCategoryListResp {
	if !p.IsSetSuccess() {
		return ProductCategoryListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ProductCategoryListResult) SetSuccess(x interface{}) {
	p.Success = x.(*product_category.ProductCategoryListResp)
}

func (p *ProductCategoryListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductCategoryListResult) GetResult() interface{} {
	return p.Success
}

func productCategoryUpdateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product_category.ProductCategoryUpdateReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product_category.ProductCategoryService).ProductCategoryUpdate(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ProductCategoryUpdateArgs:
		success, err := handler.(product_category.ProductCategoryService).ProductCategoryUpdate(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ProductCategoryUpdateResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newProductCategoryUpdateArgs() interface{} {
	return &ProductCategoryUpdateArgs{}
}

func newProductCategoryUpdateResult() interface{} {
	return &ProductCategoryUpdateResult{}
}

type ProductCategoryUpdateArgs struct {
	Req *product_category.ProductCategoryUpdateReq
}

func (p *ProductCategoryUpdateArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product_category.ProductCategoryUpdateReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ProductCategoryUpdateArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ProductCategoryUpdateArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ProductCategoryUpdateArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ProductCategoryUpdateArgs) Unmarshal(in []byte) error {
	msg := new(product_category.ProductCategoryUpdateReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ProductCategoryUpdateArgs_Req_DEFAULT *product_category.ProductCategoryUpdateReq

func (p *ProductCategoryUpdateArgs) GetReq() *product_category.ProductCategoryUpdateReq {
	if !p.IsSetReq() {
		return ProductCategoryUpdateArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ProductCategoryUpdateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductCategoryUpdateArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ProductCategoryUpdateResult struct {
	Success *product_category.ProductCategoryUpdateResp
}

var ProductCategoryUpdateResult_Success_DEFAULT *product_category.ProductCategoryUpdateResp

func (p *ProductCategoryUpdateResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product_category.ProductCategoryUpdateResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ProductCategoryUpdateResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ProductCategoryUpdateResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ProductCategoryUpdateResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ProductCategoryUpdateResult) Unmarshal(in []byte) error {
	msg := new(product_category.ProductCategoryUpdateResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ProductCategoryUpdateResult) GetSuccess() *product_category.ProductCategoryUpdateResp {
	if !p.IsSetSuccess() {
		return ProductCategoryUpdateResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ProductCategoryUpdateResult) SetSuccess(x interface{}) {
	p.Success = x.(*product_category.ProductCategoryUpdateResp)
}

func (p *ProductCategoryUpdateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductCategoryUpdateResult) GetResult() interface{} {
	return p.Success
}

func productCategoryDeleteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product_category.ProductCategoryDeleteReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product_category.ProductCategoryService).ProductCategoryDelete(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ProductCategoryDeleteArgs:
		success, err := handler.(product_category.ProductCategoryService).ProductCategoryDelete(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ProductCategoryDeleteResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newProductCategoryDeleteArgs() interface{} {
	return &ProductCategoryDeleteArgs{}
}

func newProductCategoryDeleteResult() interface{} {
	return &ProductCategoryDeleteResult{}
}

type ProductCategoryDeleteArgs struct {
	Req *product_category.ProductCategoryDeleteReq
}

func (p *ProductCategoryDeleteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product_category.ProductCategoryDeleteReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ProductCategoryDeleteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ProductCategoryDeleteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ProductCategoryDeleteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ProductCategoryDeleteArgs) Unmarshal(in []byte) error {
	msg := new(product_category.ProductCategoryDeleteReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ProductCategoryDeleteArgs_Req_DEFAULT *product_category.ProductCategoryDeleteReq

func (p *ProductCategoryDeleteArgs) GetReq() *product_category.ProductCategoryDeleteReq {
	if !p.IsSetReq() {
		return ProductCategoryDeleteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ProductCategoryDeleteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductCategoryDeleteArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ProductCategoryDeleteResult struct {
	Success *product_category.ProductCategoryDeleteResp
}

var ProductCategoryDeleteResult_Success_DEFAULT *product_category.ProductCategoryDeleteResp

func (p *ProductCategoryDeleteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product_category.ProductCategoryDeleteResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ProductCategoryDeleteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ProductCategoryDeleteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ProductCategoryDeleteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ProductCategoryDeleteResult) Unmarshal(in []byte) error {
	msg := new(product_category.ProductCategoryDeleteResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ProductCategoryDeleteResult) GetSuccess() *product_category.ProductCategoryDeleteResp {
	if !p.IsSetSuccess() {
		return ProductCategoryDeleteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ProductCategoryDeleteResult) SetSuccess(x interface{}) {
	p.Success = x.(*product_category.ProductCategoryDeleteResp)
}

func (p *ProductCategoryDeleteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductCategoryDeleteResult) GetResult() interface{} {
	return p.Success
}

func queryProductCategoryListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product_category.QueryProductCategoryListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product_category.ProductCategoryService).QueryProductCategoryList(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *QueryProductCategoryListArgs:
		success, err := handler.(product_category.ProductCategoryService).QueryProductCategoryList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*QueryProductCategoryListResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newQueryProductCategoryListArgs() interface{} {
	return &QueryProductCategoryListArgs{}
}

func newQueryProductCategoryListResult() interface{} {
	return &QueryProductCategoryListResult{}
}

type QueryProductCategoryListArgs struct {
	Req *product_category.QueryProductCategoryListReq
}

func (p *QueryProductCategoryListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product_category.QueryProductCategoryListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *QueryProductCategoryListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *QueryProductCategoryListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *QueryProductCategoryListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *QueryProductCategoryListArgs) Unmarshal(in []byte) error {
	msg := new(product_category.QueryProductCategoryListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var QueryProductCategoryListArgs_Req_DEFAULT *product_category.QueryProductCategoryListReq

func (p *QueryProductCategoryListArgs) GetReq() *product_category.QueryProductCategoryListReq {
	if !p.IsSetReq() {
		return QueryProductCategoryListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *QueryProductCategoryListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *QueryProductCategoryListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type QueryProductCategoryListResult struct {
	Success *product_category.QueryProductCategoryListResp
}

var QueryProductCategoryListResult_Success_DEFAULT *product_category.QueryProductCategoryListResp

func (p *QueryProductCategoryListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product_category.QueryProductCategoryListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *QueryProductCategoryListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *QueryProductCategoryListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *QueryProductCategoryListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *QueryProductCategoryListResult) Unmarshal(in []byte) error {
	msg := new(product_category.QueryProductCategoryListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *QueryProductCategoryListResult) GetSuccess() *product_category.QueryProductCategoryListResp {
	if !p.IsSetSuccess() {
		return QueryProductCategoryListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *QueryProductCategoryListResult) SetSuccess(x interface{}) {
	p.Success = x.(*product_category.QueryProductCategoryListResp)
}

func (p *QueryProductCategoryListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QueryProductCategoryListResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ProductCategoryAdd(ctx context.Context, Req *product_category.ProductCategoryAddReq) (r *product_category.ProductCategoryAddResp, err error) {
	var _args ProductCategoryAddArgs
	_args.Req = Req
	var _result ProductCategoryAddResult
	if err = p.c.Call(ctx, "ProductCategoryAdd", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ProductCategoryList(ctx context.Context, Req *product_category.ProductCategoryListReq) (r *product_category.ProductCategoryListResp, err error) {
	var _args ProductCategoryListArgs
	_args.Req = Req
	var _result ProductCategoryListResult
	if err = p.c.Call(ctx, "ProductCategoryList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ProductCategoryUpdate(ctx context.Context, Req *product_category.ProductCategoryUpdateReq) (r *product_category.ProductCategoryUpdateResp, err error) {
	var _args ProductCategoryUpdateArgs
	_args.Req = Req
	var _result ProductCategoryUpdateResult
	if err = p.c.Call(ctx, "ProductCategoryUpdate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ProductCategoryDelete(ctx context.Context, Req *product_category.ProductCategoryDeleteReq) (r *product_category.ProductCategoryDeleteResp, err error) {
	var _args ProductCategoryDeleteArgs
	_args.Req = Req
	var _result ProductCategoryDeleteResult
	if err = p.c.Call(ctx, "ProductCategoryDelete", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryProductCategoryList(ctx context.Context, Req *product_category.QueryProductCategoryListReq) (r *product_category.QueryProductCategoryListResp, err error) {
	var _args QueryProductCategoryListArgs
	_args.Req = Req
	var _result QueryProductCategoryListResult
	if err = p.c.Call(ctx, "QueryProductCategoryList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
