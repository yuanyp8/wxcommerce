// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package product_category

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *BaseProductCategory) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BaseProductCategory[number], err)
}

func (x *BaseProductCategory) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *BaseProductCategory) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ParentId, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *BaseProductCategory) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseProductCategory) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Level, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProductCategory) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.ProductCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProductCategory) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.ProductUnit, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseProductCategory) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.NavStatus, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProductCategory) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.ShowStatus, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProductCategory) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.Sort, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProductCategory) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.Icon, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseProductCategory) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.Keywords, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseProductCategory) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ProductCategoryAddReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductCategoryAddReq[number], err)
}

func (x *ProductCategoryAddReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseProductCategory
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ProductCategory = &v
	return offset, nil
}

func (x *ProductCategoryAddResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductCategoryAddResp[number], err)
}

func (x *ProductCategoryAddResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pong, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ProductCategoryListReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductCategoryListReq[number], err)
}

func (x *ProductCategoryListReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Current, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ProductCategoryListReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.PageSize, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ProductCategoryListReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ProductCategoryListReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.ParentId, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *ProductCategoryListReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.ShowStatus, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ProductCategoryListResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductCategoryListResp[number], err)
}

func (x *ProductCategoryListResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ProductCategoryListResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v BaseProductCategory
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.List = append(x.List, &v)
	return offset, nil
}

func (x *ProductCategoryUpdateReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductCategoryUpdateReq[number], err)
}

func (x *ProductCategoryUpdateReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseProductCategory
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ProductCategory = &v
	return offset, nil
}

func (x *ProductCategoryUpdateResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductCategoryUpdateResp[number], err)
}

func (x *ProductCategoryUpdateResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pong, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ProductCategoryDeleteReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductCategoryDeleteReq[number], err)
}

func (x *ProductCategoryDeleteReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v uint64
			v, offset, err = fastpb.ReadUint64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.Ids = append(x.Ids, v)
			return offset, err
		})
	return offset, err
}

func (x *ProductCategoryDeleteResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductCategoryDeleteResp[number], err)
}

func (x *ProductCategoryDeleteResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pong, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *QueryProductCategoryListReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *QueryProductCategoryListData) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_QueryProductCategoryListData[number], err)
}

func (x *QueryProductCategoryListData) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *QueryProductCategoryListData) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *QueryProductCategoryListData) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.ImageUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *QueryProductCategoryListData) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v QueryProductCategoryListData
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Children = append(x.Children, &v)
	return offset, nil
}

func (x *QueryProductCategoryListResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_QueryProductCategoryListResp[number], err)
}

func (x *QueryProductCategoryListResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v QueryProductCategoryListData
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.List = append(x.List, &v)
	return offset, nil
}

func (x *BaseProductCategory) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	return offset
}

func (x *BaseProductCategory) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *BaseProductCategory) fastWriteField2(buf []byte) (offset int) {
	if x.ParentId == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 2, x.GetParentId())
	return offset
}

func (x *BaseProductCategory) fastWriteField3(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetName())
	return offset
}

func (x *BaseProductCategory) fastWriteField4(buf []byte) (offset int) {
	if x.Level == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetLevel())
	return offset
}

func (x *BaseProductCategory) fastWriteField5(buf []byte) (offset int) {
	if x.ProductCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetProductCount())
	return offset
}

func (x *BaseProductCategory) fastWriteField6(buf []byte) (offset int) {
	if x.ProductUnit == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetProductUnit())
	return offset
}

func (x *BaseProductCategory) fastWriteField7(buf []byte) (offset int) {
	if x.NavStatus == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetNavStatus())
	return offset
}

func (x *BaseProductCategory) fastWriteField8(buf []byte) (offset int) {
	if x.ShowStatus == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetShowStatus())
	return offset
}

func (x *BaseProductCategory) fastWriteField9(buf []byte) (offset int) {
	if x.Sort == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 9, x.GetSort())
	return offset
}

func (x *BaseProductCategory) fastWriteField10(buf []byte) (offset int) {
	if x.Icon == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 10, x.GetIcon())
	return offset
}

func (x *BaseProductCategory) fastWriteField11(buf []byte) (offset int) {
	if x.Keywords == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 11, x.GetKeywords())
	return offset
}

func (x *BaseProductCategory) fastWriteField12(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 12, x.GetDescription())
	return offset
}

func (x *ProductCategoryAddReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ProductCategoryAddReq) fastWriteField1(buf []byte) (offset int) {
	if x.ProductCategory == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetProductCategory())
	return offset
}

func (x *ProductCategoryAddResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ProductCategoryAddResp) fastWriteField1(buf []byte) (offset int) {
	if x.Pong == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPong())
	return offset
}

func (x *ProductCategoryListReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *ProductCategoryListReq) fastWriteField1(buf []byte) (offset int) {
	if x.Current == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCurrent())
	return offset
}

func (x *ProductCategoryListReq) fastWriteField2(buf []byte) (offset int) {
	if x.PageSize == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetPageSize())
	return offset
}

func (x *ProductCategoryListReq) fastWriteField3(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetName())
	return offset
}

func (x *ProductCategoryListReq) fastWriteField4(buf []byte) (offset int) {
	if x.ParentId == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 4, x.GetParentId())
	return offset
}

func (x *ProductCategoryListReq) fastWriteField5(buf []byte) (offset int) {
	if x.ShowStatus == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetShowStatus())
	return offset
}

func (x *ProductCategoryListResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ProductCategoryListResp) fastWriteField1(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetTotal())
	return offset
}

func (x *ProductCategoryListResp) fastWriteField2(buf []byte) (offset int) {
	if x.List == nil {
		return offset
	}
	for i := range x.GetList() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetList()[i])
	}
	return offset
}

func (x *ProductCategoryUpdateReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ProductCategoryUpdateReq) fastWriteField1(buf []byte) (offset int) {
	if x.ProductCategory == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetProductCategory())
	return offset
}

func (x *ProductCategoryUpdateResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ProductCategoryUpdateResp) fastWriteField1(buf []byte) (offset int) {
	if x.Pong == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPong())
	return offset
}

func (x *ProductCategoryDeleteReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ProductCategoryDeleteReq) fastWriteField1(buf []byte) (offset int) {
	if len(x.Ids) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 1, len(x.GetIds()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteUint64(buf[offset:], numTagOrKey, x.GetIds()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *ProductCategoryDeleteResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ProductCategoryDeleteResp) fastWriteField1(buf []byte) (offset int) {
	if x.Pong == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPong())
	return offset
}

func (x *QueryProductCategoryListReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *QueryProductCategoryListData) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *QueryProductCategoryListData) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *QueryProductCategoryListData) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *QueryProductCategoryListData) fastWriteField3(buf []byte) (offset int) {
	if x.ImageUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetImageUrl())
	return offset
}

func (x *QueryProductCategoryListData) fastWriteField4(buf []byte) (offset int) {
	if x.Children == nil {
		return offset
	}
	for i := range x.GetChildren() {
		offset += fastpb.WriteMessage(buf[offset:], 4, x.GetChildren()[i])
	}
	return offset
}

func (x *QueryProductCategoryListResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *QueryProductCategoryListResp) fastWriteField1(buf []byte) (offset int) {
	if x.List == nil {
		return offset
	}
	for i := range x.GetList() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetList()[i])
	}
	return offset
}

func (x *BaseProductCategory) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	return n
}

func (x *BaseProductCategory) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetId())
	return n
}

func (x *BaseProductCategory) sizeField2() (n int) {
	if x.ParentId == 0 {
		return n
	}
	n += fastpb.SizeUint64(2, x.GetParentId())
	return n
}

func (x *BaseProductCategory) sizeField3() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetName())
	return n
}

func (x *BaseProductCategory) sizeField4() (n int) {
	if x.Level == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetLevel())
	return n
}

func (x *BaseProductCategory) sizeField5() (n int) {
	if x.ProductCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetProductCount())
	return n
}

func (x *BaseProductCategory) sizeField6() (n int) {
	if x.ProductUnit == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetProductUnit())
	return n
}

func (x *BaseProductCategory) sizeField7() (n int) {
	if x.NavStatus == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetNavStatus())
	return n
}

func (x *BaseProductCategory) sizeField8() (n int) {
	if x.ShowStatus == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetShowStatus())
	return n
}

func (x *BaseProductCategory) sizeField9() (n int) {
	if x.Sort == 0 {
		return n
	}
	n += fastpb.SizeInt64(9, x.GetSort())
	return n
}

func (x *BaseProductCategory) sizeField10() (n int) {
	if x.Icon == "" {
		return n
	}
	n += fastpb.SizeString(10, x.GetIcon())
	return n
}

func (x *BaseProductCategory) sizeField11() (n int) {
	if x.Keywords == "" {
		return n
	}
	n += fastpb.SizeString(11, x.GetKeywords())
	return n
}

func (x *BaseProductCategory) sizeField12() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(12, x.GetDescription())
	return n
}

func (x *ProductCategoryAddReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ProductCategoryAddReq) sizeField1() (n int) {
	if x.ProductCategory == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetProductCategory())
	return n
}

func (x *ProductCategoryAddResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ProductCategoryAddResp) sizeField1() (n int) {
	if x.Pong == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPong())
	return n
}

func (x *ProductCategoryListReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *ProductCategoryListReq) sizeField1() (n int) {
	if x.Current == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCurrent())
	return n
}

func (x *ProductCategoryListReq) sizeField2() (n int) {
	if x.PageSize == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetPageSize())
	return n
}

func (x *ProductCategoryListReq) sizeField3() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetName())
	return n
}

func (x *ProductCategoryListReq) sizeField4() (n int) {
	if x.ParentId == 0 {
		return n
	}
	n += fastpb.SizeUint64(4, x.GetParentId())
	return n
}

func (x *ProductCategoryListReq) sizeField5() (n int) {
	if x.ShowStatus == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetShowStatus())
	return n
}

func (x *ProductCategoryListResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ProductCategoryListResp) sizeField1() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetTotal())
	return n
}

func (x *ProductCategoryListResp) sizeField2() (n int) {
	if x.List == nil {
		return n
	}
	for i := range x.GetList() {
		n += fastpb.SizeMessage(2, x.GetList()[i])
	}
	return n
}

func (x *ProductCategoryUpdateReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ProductCategoryUpdateReq) sizeField1() (n int) {
	if x.ProductCategory == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetProductCategory())
	return n
}

func (x *ProductCategoryUpdateResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ProductCategoryUpdateResp) sizeField1() (n int) {
	if x.Pong == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPong())
	return n
}

func (x *ProductCategoryDeleteReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ProductCategoryDeleteReq) sizeField1() (n int) {
	if len(x.Ids) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(1, len(x.GetIds()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeUint64(numTagOrKey, x.GetIds()[numIdxOrVal])
			return n
		})
	return n
}

func (x *ProductCategoryDeleteResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ProductCategoryDeleteResp) sizeField1() (n int) {
	if x.Pong == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPong())
	return n
}

func (x *QueryProductCategoryListReq) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *QueryProductCategoryListData) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *QueryProductCategoryListData) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetId())
	return n
}

func (x *QueryProductCategoryListData) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *QueryProductCategoryListData) sizeField3() (n int) {
	if x.ImageUrl == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetImageUrl())
	return n
}

func (x *QueryProductCategoryListData) sizeField4() (n int) {
	if x.Children == nil {
		return n
	}
	for i := range x.GetChildren() {
		n += fastpb.SizeMessage(4, x.GetChildren()[i])
	}
	return n
}

func (x *QueryProductCategoryListResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *QueryProductCategoryListResp) sizeField1() (n int) {
	if x.List == nil {
		return n
	}
	for i := range x.GetList() {
		n += fastpb.SizeMessage(1, x.GetList()[i])
	}
	return n
}

var fieldIDToName_BaseProductCategory = map[int32]string{
	1:  "Id",
	2:  "ParentId",
	3:  "Name",
	4:  "Level",
	5:  "ProductCount",
	6:  "ProductUnit",
	7:  "NavStatus",
	8:  "ShowStatus",
	9:  "Sort",
	10: "Icon",
	11: "Keywords",
	12: "Description",
}

var fieldIDToName_ProductCategoryAddReq = map[int32]string{
	1: "ProductCategory",
}

var fieldIDToName_ProductCategoryAddResp = map[int32]string{
	1: "Pong",
}

var fieldIDToName_ProductCategoryListReq = map[int32]string{
	1: "Current",
	2: "PageSize",
	3: "Name",
	4: "ParentId",
	5: "ShowStatus",
}

var fieldIDToName_ProductCategoryListResp = map[int32]string{
	1: "Total",
	2: "List",
}

var fieldIDToName_ProductCategoryUpdateReq = map[int32]string{
	1: "ProductCategory",
}

var fieldIDToName_ProductCategoryUpdateResp = map[int32]string{
	1: "Pong",
}

var fieldIDToName_ProductCategoryDeleteReq = map[int32]string{
	1: "Ids",
}

var fieldIDToName_ProductCategoryDeleteResp = map[int32]string{
	1: "Pong",
}

var fieldIDToName_QueryProductCategoryListReq = map[int32]string{}

var fieldIDToName_QueryProductCategoryListData = map[int32]string{
	1: "Id",
	2: "Name",
	3: "ImageUrl",
	4: "Children",
}

var fieldIDToName_QueryProductCategoryListResp = map[int32]string{
	1: "List",
}
