// Code generated by Kitex v0.9.0. DO NOT EDIT.

package albumpicservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	album_pic "github.com/yuanyp8/wxcommerce/shared/kitex_gen/pms/album_pic"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"AlbumPicAdd": kitex.NewMethodInfo(
		albumPicAddHandler,
		newAlbumPicAddArgs,
		newAlbumPicAddResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"AlbumPicList": kitex.NewMethodInfo(
		albumPicListHandler,
		newAlbumPicListArgs,
		newAlbumPicListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"AlbumPicUpdate": kitex.NewMethodInfo(
		albumPicUpdateHandler,
		newAlbumPicUpdateArgs,
		newAlbumPicUpdateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"AlbumPicDelete": kitex.NewMethodInfo(
		albumPicDeleteHandler,
		newAlbumPicDeleteArgs,
		newAlbumPicDeleteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	albumPicServiceServiceInfo                = NewServiceInfo()
	albumPicServiceServiceInfoForClient       = NewServiceInfoForClient()
	albumPicServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return albumPicServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return albumPicServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return albumPicServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "AlbumPicService"
	handlerType := (*album_pic.AlbumPicService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "pms",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.0",
		Extra:           extra,
	}
	return svcInfo
}

func albumPicAddHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(album_pic.AlbumPicAddReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(album_pic.AlbumPicService).AlbumPicAdd(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *AlbumPicAddArgs:
		success, err := handler.(album_pic.AlbumPicService).AlbumPicAdd(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AlbumPicAddResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newAlbumPicAddArgs() interface{} {
	return &AlbumPicAddArgs{}
}

func newAlbumPicAddResult() interface{} {
	return &AlbumPicAddResult{}
}

type AlbumPicAddArgs struct {
	Req *album_pic.AlbumPicAddReq
}

func (p *AlbumPicAddArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(album_pic.AlbumPicAddReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AlbumPicAddArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AlbumPicAddArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AlbumPicAddArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *AlbumPicAddArgs) Unmarshal(in []byte) error {
	msg := new(album_pic.AlbumPicAddReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AlbumPicAddArgs_Req_DEFAULT *album_pic.AlbumPicAddReq

func (p *AlbumPicAddArgs) GetReq() *album_pic.AlbumPicAddReq {
	if !p.IsSetReq() {
		return AlbumPicAddArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AlbumPicAddArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AlbumPicAddArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AlbumPicAddResult struct {
	Success *album_pic.AlbumPicAddResp
}

var AlbumPicAddResult_Success_DEFAULT *album_pic.AlbumPicAddResp

func (p *AlbumPicAddResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(album_pic.AlbumPicAddResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AlbumPicAddResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AlbumPicAddResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AlbumPicAddResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *AlbumPicAddResult) Unmarshal(in []byte) error {
	msg := new(album_pic.AlbumPicAddResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AlbumPicAddResult) GetSuccess() *album_pic.AlbumPicAddResp {
	if !p.IsSetSuccess() {
		return AlbumPicAddResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AlbumPicAddResult) SetSuccess(x interface{}) {
	p.Success = x.(*album_pic.AlbumPicAddResp)
}

func (p *AlbumPicAddResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AlbumPicAddResult) GetResult() interface{} {
	return p.Success
}

func albumPicListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(album_pic.AlbumPicListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(album_pic.AlbumPicService).AlbumPicList(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *AlbumPicListArgs:
		success, err := handler.(album_pic.AlbumPicService).AlbumPicList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AlbumPicListResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newAlbumPicListArgs() interface{} {
	return &AlbumPicListArgs{}
}

func newAlbumPicListResult() interface{} {
	return &AlbumPicListResult{}
}

type AlbumPicListArgs struct {
	Req *album_pic.AlbumPicListReq
}

func (p *AlbumPicListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(album_pic.AlbumPicListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AlbumPicListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AlbumPicListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AlbumPicListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *AlbumPicListArgs) Unmarshal(in []byte) error {
	msg := new(album_pic.AlbumPicListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AlbumPicListArgs_Req_DEFAULT *album_pic.AlbumPicListReq

func (p *AlbumPicListArgs) GetReq() *album_pic.AlbumPicListReq {
	if !p.IsSetReq() {
		return AlbumPicListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AlbumPicListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AlbumPicListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AlbumPicListResult struct {
	Success *album_pic.AlbumPicListResp
}

var AlbumPicListResult_Success_DEFAULT *album_pic.AlbumPicListResp

func (p *AlbumPicListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(album_pic.AlbumPicListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AlbumPicListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AlbumPicListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AlbumPicListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *AlbumPicListResult) Unmarshal(in []byte) error {
	msg := new(album_pic.AlbumPicListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AlbumPicListResult) GetSuccess() *album_pic.AlbumPicListResp {
	if !p.IsSetSuccess() {
		return AlbumPicListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AlbumPicListResult) SetSuccess(x interface{}) {
	p.Success = x.(*album_pic.AlbumPicListResp)
}

func (p *AlbumPicListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AlbumPicListResult) GetResult() interface{} {
	return p.Success
}

func albumPicUpdateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(album_pic.AlbumPicUpdateReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(album_pic.AlbumPicService).AlbumPicUpdate(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *AlbumPicUpdateArgs:
		success, err := handler.(album_pic.AlbumPicService).AlbumPicUpdate(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AlbumPicUpdateResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newAlbumPicUpdateArgs() interface{} {
	return &AlbumPicUpdateArgs{}
}

func newAlbumPicUpdateResult() interface{} {
	return &AlbumPicUpdateResult{}
}

type AlbumPicUpdateArgs struct {
	Req *album_pic.AlbumPicUpdateReq
}

func (p *AlbumPicUpdateArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(album_pic.AlbumPicUpdateReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AlbumPicUpdateArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AlbumPicUpdateArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AlbumPicUpdateArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *AlbumPicUpdateArgs) Unmarshal(in []byte) error {
	msg := new(album_pic.AlbumPicUpdateReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AlbumPicUpdateArgs_Req_DEFAULT *album_pic.AlbumPicUpdateReq

func (p *AlbumPicUpdateArgs) GetReq() *album_pic.AlbumPicUpdateReq {
	if !p.IsSetReq() {
		return AlbumPicUpdateArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AlbumPicUpdateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AlbumPicUpdateArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AlbumPicUpdateResult struct {
	Success *album_pic.AlbumPicUpdateResp
}

var AlbumPicUpdateResult_Success_DEFAULT *album_pic.AlbumPicUpdateResp

func (p *AlbumPicUpdateResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(album_pic.AlbumPicUpdateResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AlbumPicUpdateResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AlbumPicUpdateResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AlbumPicUpdateResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *AlbumPicUpdateResult) Unmarshal(in []byte) error {
	msg := new(album_pic.AlbumPicUpdateResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AlbumPicUpdateResult) GetSuccess() *album_pic.AlbumPicUpdateResp {
	if !p.IsSetSuccess() {
		return AlbumPicUpdateResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AlbumPicUpdateResult) SetSuccess(x interface{}) {
	p.Success = x.(*album_pic.AlbumPicUpdateResp)
}

func (p *AlbumPicUpdateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AlbumPicUpdateResult) GetResult() interface{} {
	return p.Success
}

func albumPicDeleteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(album_pic.AlbumPicDeleteReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(album_pic.AlbumPicService).AlbumPicDelete(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *AlbumPicDeleteArgs:
		success, err := handler.(album_pic.AlbumPicService).AlbumPicDelete(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AlbumPicDeleteResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newAlbumPicDeleteArgs() interface{} {
	return &AlbumPicDeleteArgs{}
}

func newAlbumPicDeleteResult() interface{} {
	return &AlbumPicDeleteResult{}
}

type AlbumPicDeleteArgs struct {
	Req *album_pic.AlbumPicDeleteReq
}

func (p *AlbumPicDeleteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(album_pic.AlbumPicDeleteReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AlbumPicDeleteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AlbumPicDeleteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AlbumPicDeleteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *AlbumPicDeleteArgs) Unmarshal(in []byte) error {
	msg := new(album_pic.AlbumPicDeleteReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AlbumPicDeleteArgs_Req_DEFAULT *album_pic.AlbumPicDeleteReq

func (p *AlbumPicDeleteArgs) GetReq() *album_pic.AlbumPicDeleteReq {
	if !p.IsSetReq() {
		return AlbumPicDeleteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AlbumPicDeleteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AlbumPicDeleteArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AlbumPicDeleteResult struct {
	Success *album_pic.AlbumPicDeleteResp
}

var AlbumPicDeleteResult_Success_DEFAULT *album_pic.AlbumPicDeleteResp

func (p *AlbumPicDeleteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(album_pic.AlbumPicDeleteResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AlbumPicDeleteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AlbumPicDeleteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AlbumPicDeleteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *AlbumPicDeleteResult) Unmarshal(in []byte) error {
	msg := new(album_pic.AlbumPicDeleteResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AlbumPicDeleteResult) GetSuccess() *album_pic.AlbumPicDeleteResp {
	if !p.IsSetSuccess() {
		return AlbumPicDeleteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AlbumPicDeleteResult) SetSuccess(x interface{}) {
	p.Success = x.(*album_pic.AlbumPicDeleteResp)
}

func (p *AlbumPicDeleteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AlbumPicDeleteResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AlbumPicAdd(ctx context.Context, Req *album_pic.AlbumPicAddReq) (r *album_pic.AlbumPicAddResp, err error) {
	var _args AlbumPicAddArgs
	_args.Req = Req
	var _result AlbumPicAddResult
	if err = p.c.Call(ctx, "AlbumPicAdd", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AlbumPicList(ctx context.Context, Req *album_pic.AlbumPicListReq) (r *album_pic.AlbumPicListResp, err error) {
	var _args AlbumPicListArgs
	_args.Req = Req
	var _result AlbumPicListResult
	if err = p.c.Call(ctx, "AlbumPicList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AlbumPicUpdate(ctx context.Context, Req *album_pic.AlbumPicUpdateReq) (r *album_pic.AlbumPicUpdateResp, err error) {
	var _args AlbumPicUpdateArgs
	_args.Req = Req
	var _result AlbumPicUpdateResult
	if err = p.c.Call(ctx, "AlbumPicUpdate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AlbumPicDelete(ctx context.Context, Req *album_pic.AlbumPicDeleteReq) (r *album_pic.AlbumPicDeleteResp, err error) {
	var _args AlbumPicDeleteArgs
	_args.Req = Req
	var _result AlbumPicDeleteResult
	if err = p.c.Call(ctx, "AlbumPicDelete", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
