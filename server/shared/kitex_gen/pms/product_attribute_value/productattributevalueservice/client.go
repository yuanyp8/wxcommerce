// Code generated by Kitex v0.9.0. DO NOT EDIT.

package productattributevalueservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	product_attribute_value "github.com/yuanyp8/wxcommerce/shared/kitex_gen/pms/product_attribute_value"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	ProductAttributeValueAdd(ctx context.Context, Req *product_attribute_value.ProductAttributeValueAddReq, callOptions ...callopt.Option) (r *product_attribute_value.ProductAttributeValueAddResp, err error)
	ProductAttributeValueList(ctx context.Context, Req *product_attribute_value.ProductAttributeValueListReq, callOptions ...callopt.Option) (r *product_attribute_value.ProductAttributeValueListResp, err error)
	ProductAttributeValueUpdate(ctx context.Context, Req *product_attribute_value.ProductAttributeValueUpdateReq, callOptions ...callopt.Option) (r *product_attribute_value.ProductAttributeValueUpdateResp, err error)
	ProductAttributeValueDelete(ctx context.Context, Req *product_attribute_value.ProductAttributeValueDeleteReq, callOptions ...callopt.Option) (r *product_attribute_value.ProductAttributeValueDeleteResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kProductAttributeValueServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kProductAttributeValueServiceClient struct {
	*kClient
}

func (p *kProductAttributeValueServiceClient) ProductAttributeValueAdd(ctx context.Context, Req *product_attribute_value.ProductAttributeValueAddReq, callOptions ...callopt.Option) (r *product_attribute_value.ProductAttributeValueAddResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ProductAttributeValueAdd(ctx, Req)
}

func (p *kProductAttributeValueServiceClient) ProductAttributeValueList(ctx context.Context, Req *product_attribute_value.ProductAttributeValueListReq, callOptions ...callopt.Option) (r *product_attribute_value.ProductAttributeValueListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ProductAttributeValueList(ctx, Req)
}

func (p *kProductAttributeValueServiceClient) ProductAttributeValueUpdate(ctx context.Context, Req *product_attribute_value.ProductAttributeValueUpdateReq, callOptions ...callopt.Option) (r *product_attribute_value.ProductAttributeValueUpdateResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ProductAttributeValueUpdate(ctx, Req)
}

func (p *kProductAttributeValueServiceClient) ProductAttributeValueDelete(ctx context.Context, Req *product_attribute_value.ProductAttributeValueDeleteReq, callOptions ...callopt.Option) (r *product_attribute_value.ProductAttributeValueDeleteResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ProductAttributeValueDelete(ctx, Req)
}
