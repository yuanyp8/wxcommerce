// Code generated by Kitex v0.9.0. DO NOT EDIT.

package productladderservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	product_ladder "github.com/yuanyp8/wxcommerce/shared/kitex_gen/pms/product_ladder"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"ProductLadderAdd": kitex.NewMethodInfo(
		productLadderAddHandler,
		newProductLadderAddArgs,
		newProductLadderAddResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ProductLadderList": kitex.NewMethodInfo(
		productLadderListHandler,
		newProductLadderListArgs,
		newProductLadderListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ProductLadderUpdate": kitex.NewMethodInfo(
		productLadderUpdateHandler,
		newProductLadderUpdateArgs,
		newProductLadderUpdateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ProductLadderDelete": kitex.NewMethodInfo(
		productLadderDeleteHandler,
		newProductLadderDeleteArgs,
		newProductLadderDeleteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	productLadderServiceServiceInfo                = NewServiceInfo()
	productLadderServiceServiceInfoForClient       = NewServiceInfoForClient()
	productLadderServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return productLadderServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return productLadderServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return productLadderServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ProductLadderService"
	handlerType := (*product_ladder.ProductLadderService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "pms",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.0",
		Extra:           extra,
	}
	return svcInfo
}

func productLadderAddHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product_ladder.ProductLadderAddReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product_ladder.ProductLadderService).ProductLadderAdd(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ProductLadderAddArgs:
		success, err := handler.(product_ladder.ProductLadderService).ProductLadderAdd(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ProductLadderAddResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newProductLadderAddArgs() interface{} {
	return &ProductLadderAddArgs{}
}

func newProductLadderAddResult() interface{} {
	return &ProductLadderAddResult{}
}

type ProductLadderAddArgs struct {
	Req *product_ladder.ProductLadderAddReq
}

func (p *ProductLadderAddArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product_ladder.ProductLadderAddReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ProductLadderAddArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ProductLadderAddArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ProductLadderAddArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ProductLadderAddArgs) Unmarshal(in []byte) error {
	msg := new(product_ladder.ProductLadderAddReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ProductLadderAddArgs_Req_DEFAULT *product_ladder.ProductLadderAddReq

func (p *ProductLadderAddArgs) GetReq() *product_ladder.ProductLadderAddReq {
	if !p.IsSetReq() {
		return ProductLadderAddArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ProductLadderAddArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductLadderAddArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ProductLadderAddResult struct {
	Success *product_ladder.ProductLadderAddResp
}

var ProductLadderAddResult_Success_DEFAULT *product_ladder.ProductLadderAddResp

func (p *ProductLadderAddResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product_ladder.ProductLadderAddResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ProductLadderAddResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ProductLadderAddResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ProductLadderAddResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ProductLadderAddResult) Unmarshal(in []byte) error {
	msg := new(product_ladder.ProductLadderAddResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ProductLadderAddResult) GetSuccess() *product_ladder.ProductLadderAddResp {
	if !p.IsSetSuccess() {
		return ProductLadderAddResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ProductLadderAddResult) SetSuccess(x interface{}) {
	p.Success = x.(*product_ladder.ProductLadderAddResp)
}

func (p *ProductLadderAddResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductLadderAddResult) GetResult() interface{} {
	return p.Success
}

func productLadderListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product_ladder.ProductLadderListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product_ladder.ProductLadderService).ProductLadderList(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ProductLadderListArgs:
		success, err := handler.(product_ladder.ProductLadderService).ProductLadderList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ProductLadderListResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newProductLadderListArgs() interface{} {
	return &ProductLadderListArgs{}
}

func newProductLadderListResult() interface{} {
	return &ProductLadderListResult{}
}

type ProductLadderListArgs struct {
	Req *product_ladder.ProductLadderListReq
}

func (p *ProductLadderListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product_ladder.ProductLadderListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ProductLadderListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ProductLadderListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ProductLadderListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ProductLadderListArgs) Unmarshal(in []byte) error {
	msg := new(product_ladder.ProductLadderListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ProductLadderListArgs_Req_DEFAULT *product_ladder.ProductLadderListReq

func (p *ProductLadderListArgs) GetReq() *product_ladder.ProductLadderListReq {
	if !p.IsSetReq() {
		return ProductLadderListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ProductLadderListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductLadderListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ProductLadderListResult struct {
	Success *product_ladder.ProductLadderListResp
}

var ProductLadderListResult_Success_DEFAULT *product_ladder.ProductLadderListResp

func (p *ProductLadderListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product_ladder.ProductLadderListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ProductLadderListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ProductLadderListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ProductLadderListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ProductLadderListResult) Unmarshal(in []byte) error {
	msg := new(product_ladder.ProductLadderListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ProductLadderListResult) GetSuccess() *product_ladder.ProductLadderListResp {
	if !p.IsSetSuccess() {
		return ProductLadderListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ProductLadderListResult) SetSuccess(x interface{}) {
	p.Success = x.(*product_ladder.ProductLadderListResp)
}

func (p *ProductLadderListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductLadderListResult) GetResult() interface{} {
	return p.Success
}

func productLadderUpdateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product_ladder.ProductLadderUpdateReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product_ladder.ProductLadderService).ProductLadderUpdate(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ProductLadderUpdateArgs:
		success, err := handler.(product_ladder.ProductLadderService).ProductLadderUpdate(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ProductLadderUpdateResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newProductLadderUpdateArgs() interface{} {
	return &ProductLadderUpdateArgs{}
}

func newProductLadderUpdateResult() interface{} {
	return &ProductLadderUpdateResult{}
}

type ProductLadderUpdateArgs struct {
	Req *product_ladder.ProductLadderUpdateReq
}

func (p *ProductLadderUpdateArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product_ladder.ProductLadderUpdateReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ProductLadderUpdateArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ProductLadderUpdateArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ProductLadderUpdateArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ProductLadderUpdateArgs) Unmarshal(in []byte) error {
	msg := new(product_ladder.ProductLadderUpdateReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ProductLadderUpdateArgs_Req_DEFAULT *product_ladder.ProductLadderUpdateReq

func (p *ProductLadderUpdateArgs) GetReq() *product_ladder.ProductLadderUpdateReq {
	if !p.IsSetReq() {
		return ProductLadderUpdateArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ProductLadderUpdateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductLadderUpdateArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ProductLadderUpdateResult struct {
	Success *product_ladder.ProductLadderUpdateResp
}

var ProductLadderUpdateResult_Success_DEFAULT *product_ladder.ProductLadderUpdateResp

func (p *ProductLadderUpdateResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product_ladder.ProductLadderUpdateResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ProductLadderUpdateResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ProductLadderUpdateResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ProductLadderUpdateResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ProductLadderUpdateResult) Unmarshal(in []byte) error {
	msg := new(product_ladder.ProductLadderUpdateResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ProductLadderUpdateResult) GetSuccess() *product_ladder.ProductLadderUpdateResp {
	if !p.IsSetSuccess() {
		return ProductLadderUpdateResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ProductLadderUpdateResult) SetSuccess(x interface{}) {
	p.Success = x.(*product_ladder.ProductLadderUpdateResp)
}

func (p *ProductLadderUpdateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductLadderUpdateResult) GetResult() interface{} {
	return p.Success
}

func productLadderDeleteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product_ladder.ProductLadderDeleteReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product_ladder.ProductLadderService).ProductLadderDelete(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ProductLadderDeleteArgs:
		success, err := handler.(product_ladder.ProductLadderService).ProductLadderDelete(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ProductLadderDeleteResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newProductLadderDeleteArgs() interface{} {
	return &ProductLadderDeleteArgs{}
}

func newProductLadderDeleteResult() interface{} {
	return &ProductLadderDeleteResult{}
}

type ProductLadderDeleteArgs struct {
	Req *product_ladder.ProductLadderDeleteReq
}

func (p *ProductLadderDeleteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product_ladder.ProductLadderDeleteReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ProductLadderDeleteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ProductLadderDeleteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ProductLadderDeleteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ProductLadderDeleteArgs) Unmarshal(in []byte) error {
	msg := new(product_ladder.ProductLadderDeleteReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ProductLadderDeleteArgs_Req_DEFAULT *product_ladder.ProductLadderDeleteReq

func (p *ProductLadderDeleteArgs) GetReq() *product_ladder.ProductLadderDeleteReq {
	if !p.IsSetReq() {
		return ProductLadderDeleteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ProductLadderDeleteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductLadderDeleteArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ProductLadderDeleteResult struct {
	Success *product_ladder.ProductLadderDeleteResp
}

var ProductLadderDeleteResult_Success_DEFAULT *product_ladder.ProductLadderDeleteResp

func (p *ProductLadderDeleteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product_ladder.ProductLadderDeleteResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ProductLadderDeleteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ProductLadderDeleteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ProductLadderDeleteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ProductLadderDeleteResult) Unmarshal(in []byte) error {
	msg := new(product_ladder.ProductLadderDeleteResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ProductLadderDeleteResult) GetSuccess() *product_ladder.ProductLadderDeleteResp {
	if !p.IsSetSuccess() {
		return ProductLadderDeleteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ProductLadderDeleteResult) SetSuccess(x interface{}) {
	p.Success = x.(*product_ladder.ProductLadderDeleteResp)
}

func (p *ProductLadderDeleteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductLadderDeleteResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ProductLadderAdd(ctx context.Context, Req *product_ladder.ProductLadderAddReq) (r *product_ladder.ProductLadderAddResp, err error) {
	var _args ProductLadderAddArgs
	_args.Req = Req
	var _result ProductLadderAddResult
	if err = p.c.Call(ctx, "ProductLadderAdd", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ProductLadderList(ctx context.Context, Req *product_ladder.ProductLadderListReq) (r *product_ladder.ProductLadderListResp, err error) {
	var _args ProductLadderListArgs
	_args.Req = Req
	var _result ProductLadderListResult
	if err = p.c.Call(ctx, "ProductLadderList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ProductLadderUpdate(ctx context.Context, Req *product_ladder.ProductLadderUpdateReq) (r *product_ladder.ProductLadderUpdateResp, err error) {
	var _args ProductLadderUpdateArgs
	_args.Req = Req
	var _result ProductLadderUpdateResult
	if err = p.c.Call(ctx, "ProductLadderUpdate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ProductLadderDelete(ctx context.Context, Req *product_ladder.ProductLadderDeleteReq) (r *product_ladder.ProductLadderDeleteResp, err error) {
	var _args ProductLadderDeleteArgs
	_args.Req = Req
	var _result ProductLadderDeleteResult
	if err = p.c.Call(ctx, "ProductLadderDelete", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
