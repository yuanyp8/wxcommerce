// Code generated by Kitex v0.9.0. DO NOT EDIT.

package memberpriceservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	member_price "github.com/yuanyp8/wxcommerce/shared/kitex_gen/pms/member_price"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"MemberPriceAdd": kitex.NewMethodInfo(
		memberPriceAddHandler,
		newMemberPriceAddArgs,
		newMemberPriceAddResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"MemberPriceList": kitex.NewMethodInfo(
		memberPriceListHandler,
		newMemberPriceListArgs,
		newMemberPriceListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"MemberPriceUpdate": kitex.NewMethodInfo(
		memberPriceUpdateHandler,
		newMemberPriceUpdateArgs,
		newMemberPriceUpdateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"MemberPriceDelete": kitex.NewMethodInfo(
		memberPriceDeleteHandler,
		newMemberPriceDeleteArgs,
		newMemberPriceDeleteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	memberPriceServiceServiceInfo                = NewServiceInfo()
	memberPriceServiceServiceInfoForClient       = NewServiceInfoForClient()
	memberPriceServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return memberPriceServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return memberPriceServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return memberPriceServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "MemberPriceService"
	handlerType := (*member_price.MemberPriceService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "pms",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.0",
		Extra:           extra,
	}
	return svcInfo
}

func memberPriceAddHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(member_price.MemberPriceAddReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(member_price.MemberPriceService).MemberPriceAdd(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *MemberPriceAddArgs:
		success, err := handler.(member_price.MemberPriceService).MemberPriceAdd(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MemberPriceAddResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newMemberPriceAddArgs() interface{} {
	return &MemberPriceAddArgs{}
}

func newMemberPriceAddResult() interface{} {
	return &MemberPriceAddResult{}
}

type MemberPriceAddArgs struct {
	Req *member_price.MemberPriceAddReq
}

func (p *MemberPriceAddArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(member_price.MemberPriceAddReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MemberPriceAddArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MemberPriceAddArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MemberPriceAddArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MemberPriceAddArgs) Unmarshal(in []byte) error {
	msg := new(member_price.MemberPriceAddReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MemberPriceAddArgs_Req_DEFAULT *member_price.MemberPriceAddReq

func (p *MemberPriceAddArgs) GetReq() *member_price.MemberPriceAddReq {
	if !p.IsSetReq() {
		return MemberPriceAddArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MemberPriceAddArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberPriceAddArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MemberPriceAddResult struct {
	Success *member_price.MemberPriceAddResp
}

var MemberPriceAddResult_Success_DEFAULT *member_price.MemberPriceAddResp

func (p *MemberPriceAddResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(member_price.MemberPriceAddResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MemberPriceAddResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MemberPriceAddResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MemberPriceAddResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MemberPriceAddResult) Unmarshal(in []byte) error {
	msg := new(member_price.MemberPriceAddResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MemberPriceAddResult) GetSuccess() *member_price.MemberPriceAddResp {
	if !p.IsSetSuccess() {
		return MemberPriceAddResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MemberPriceAddResult) SetSuccess(x interface{}) {
	p.Success = x.(*member_price.MemberPriceAddResp)
}

func (p *MemberPriceAddResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberPriceAddResult) GetResult() interface{} {
	return p.Success
}

func memberPriceListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(member_price.MemberPriceListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(member_price.MemberPriceService).MemberPriceList(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *MemberPriceListArgs:
		success, err := handler.(member_price.MemberPriceService).MemberPriceList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MemberPriceListResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newMemberPriceListArgs() interface{} {
	return &MemberPriceListArgs{}
}

func newMemberPriceListResult() interface{} {
	return &MemberPriceListResult{}
}

type MemberPriceListArgs struct {
	Req *member_price.MemberPriceListReq
}

func (p *MemberPriceListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(member_price.MemberPriceListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MemberPriceListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MemberPriceListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MemberPriceListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MemberPriceListArgs) Unmarshal(in []byte) error {
	msg := new(member_price.MemberPriceListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MemberPriceListArgs_Req_DEFAULT *member_price.MemberPriceListReq

func (p *MemberPriceListArgs) GetReq() *member_price.MemberPriceListReq {
	if !p.IsSetReq() {
		return MemberPriceListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MemberPriceListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberPriceListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MemberPriceListResult struct {
	Success *member_price.MemberPriceListResp
}

var MemberPriceListResult_Success_DEFAULT *member_price.MemberPriceListResp

func (p *MemberPriceListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(member_price.MemberPriceListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MemberPriceListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MemberPriceListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MemberPriceListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MemberPriceListResult) Unmarshal(in []byte) error {
	msg := new(member_price.MemberPriceListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MemberPriceListResult) GetSuccess() *member_price.MemberPriceListResp {
	if !p.IsSetSuccess() {
		return MemberPriceListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MemberPriceListResult) SetSuccess(x interface{}) {
	p.Success = x.(*member_price.MemberPriceListResp)
}

func (p *MemberPriceListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberPriceListResult) GetResult() interface{} {
	return p.Success
}

func memberPriceUpdateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(member_price.MemberPriceUpdateReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(member_price.MemberPriceService).MemberPriceUpdate(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *MemberPriceUpdateArgs:
		success, err := handler.(member_price.MemberPriceService).MemberPriceUpdate(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MemberPriceUpdateResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newMemberPriceUpdateArgs() interface{} {
	return &MemberPriceUpdateArgs{}
}

func newMemberPriceUpdateResult() interface{} {
	return &MemberPriceUpdateResult{}
}

type MemberPriceUpdateArgs struct {
	Req *member_price.MemberPriceUpdateReq
}

func (p *MemberPriceUpdateArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(member_price.MemberPriceUpdateReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MemberPriceUpdateArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MemberPriceUpdateArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MemberPriceUpdateArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MemberPriceUpdateArgs) Unmarshal(in []byte) error {
	msg := new(member_price.MemberPriceUpdateReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MemberPriceUpdateArgs_Req_DEFAULT *member_price.MemberPriceUpdateReq

func (p *MemberPriceUpdateArgs) GetReq() *member_price.MemberPriceUpdateReq {
	if !p.IsSetReq() {
		return MemberPriceUpdateArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MemberPriceUpdateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberPriceUpdateArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MemberPriceUpdateResult struct {
	Success *member_price.MemberPriceUpdateResp
}

var MemberPriceUpdateResult_Success_DEFAULT *member_price.MemberPriceUpdateResp

func (p *MemberPriceUpdateResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(member_price.MemberPriceUpdateResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MemberPriceUpdateResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MemberPriceUpdateResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MemberPriceUpdateResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MemberPriceUpdateResult) Unmarshal(in []byte) error {
	msg := new(member_price.MemberPriceUpdateResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MemberPriceUpdateResult) GetSuccess() *member_price.MemberPriceUpdateResp {
	if !p.IsSetSuccess() {
		return MemberPriceUpdateResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MemberPriceUpdateResult) SetSuccess(x interface{}) {
	p.Success = x.(*member_price.MemberPriceUpdateResp)
}

func (p *MemberPriceUpdateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberPriceUpdateResult) GetResult() interface{} {
	return p.Success
}

func memberPriceDeleteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(member_price.MemberPriceDeleteReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(member_price.MemberPriceService).MemberPriceDelete(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *MemberPriceDeleteArgs:
		success, err := handler.(member_price.MemberPriceService).MemberPriceDelete(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MemberPriceDeleteResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newMemberPriceDeleteArgs() interface{} {
	return &MemberPriceDeleteArgs{}
}

func newMemberPriceDeleteResult() interface{} {
	return &MemberPriceDeleteResult{}
}

type MemberPriceDeleteArgs struct {
	Req *member_price.MemberPriceDeleteReq
}

func (p *MemberPriceDeleteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(member_price.MemberPriceDeleteReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MemberPriceDeleteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MemberPriceDeleteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MemberPriceDeleteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MemberPriceDeleteArgs) Unmarshal(in []byte) error {
	msg := new(member_price.MemberPriceDeleteReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MemberPriceDeleteArgs_Req_DEFAULT *member_price.MemberPriceDeleteReq

func (p *MemberPriceDeleteArgs) GetReq() *member_price.MemberPriceDeleteReq {
	if !p.IsSetReq() {
		return MemberPriceDeleteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MemberPriceDeleteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberPriceDeleteArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MemberPriceDeleteResult struct {
	Success *member_price.MemberPriceDeleteResp
}

var MemberPriceDeleteResult_Success_DEFAULT *member_price.MemberPriceDeleteResp

func (p *MemberPriceDeleteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(member_price.MemberPriceDeleteResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MemberPriceDeleteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MemberPriceDeleteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MemberPriceDeleteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MemberPriceDeleteResult) Unmarshal(in []byte) error {
	msg := new(member_price.MemberPriceDeleteResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MemberPriceDeleteResult) GetSuccess() *member_price.MemberPriceDeleteResp {
	if !p.IsSetSuccess() {
		return MemberPriceDeleteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MemberPriceDeleteResult) SetSuccess(x interface{}) {
	p.Success = x.(*member_price.MemberPriceDeleteResp)
}

func (p *MemberPriceDeleteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberPriceDeleteResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) MemberPriceAdd(ctx context.Context, Req *member_price.MemberPriceAddReq) (r *member_price.MemberPriceAddResp, err error) {
	var _args MemberPriceAddArgs
	_args.Req = Req
	var _result MemberPriceAddResult
	if err = p.c.Call(ctx, "MemberPriceAdd", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MemberPriceList(ctx context.Context, Req *member_price.MemberPriceListReq) (r *member_price.MemberPriceListResp, err error) {
	var _args MemberPriceListArgs
	_args.Req = Req
	var _result MemberPriceListResult
	if err = p.c.Call(ctx, "MemberPriceList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MemberPriceUpdate(ctx context.Context, Req *member_price.MemberPriceUpdateReq) (r *member_price.MemberPriceUpdateResp, err error) {
	var _args MemberPriceUpdateArgs
	_args.Req = Req
	var _result MemberPriceUpdateResult
	if err = p.c.Call(ctx, "MemberPriceUpdate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MemberPriceDelete(ctx context.Context, Req *member_price.MemberPriceDeleteReq) (r *member_price.MemberPriceDeleteResp, err error) {
	var _args MemberPriceDeleteArgs
	_args.Req = Req
	var _result MemberPriceDeleteResult
	if err = p.c.Call(ctx, "MemberPriceDelete", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
