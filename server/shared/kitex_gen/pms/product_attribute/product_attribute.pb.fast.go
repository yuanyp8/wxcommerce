// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package product_attribute

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *BaseProductAttribute) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BaseProductAttribute[number], err)
}

func (x *BaseProductAttribute) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProductAttribute) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ProductAttributeCategoryId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProductAttribute) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseProductAttribute) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.SelectType, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProductAttribute) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.InputType, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProductAttribute) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.InputList, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseProductAttribute) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Sort, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProductAttribute) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.FilterType, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProductAttribute) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.SearchType, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProductAttribute) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.RelatedStatus, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProductAttribute) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.HandAddStatus, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProductAttribute) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ProductAttributeAddReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductAttributeAddReq[number], err)
}

func (x *ProductAttributeAddReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseProductAttribute
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ProductAttribute = &v
	return offset, nil
}

func (x *ProductAttributeAddResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductAttributeAddResp[number], err)
}

func (x *ProductAttributeAddResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pong, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ProductAttributeListReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductAttributeListReq[number], err)
}

func (x *ProductAttributeListReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Current, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ProductAttributeListReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.PageSize, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ProductAttributeListReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ProductAttributeListReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ProductAttributeListReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.ProductAttributeCategoryId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ProductAttributeListResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductAttributeListResp[number], err)
}

func (x *ProductAttributeListResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ProductAttributeListResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v BaseProductAttribute
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.List = append(x.List, &v)
	return offset, nil
}

func (x *ProductAttributeUpdateReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductAttributeUpdateReq[number], err)
}

func (x *ProductAttributeUpdateReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseProductAttribute
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ProductAttribute = &v
	return offset, nil
}

func (x *ProductAttributeUpdateResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductAttributeUpdateResp[number], err)
}

func (x *ProductAttributeUpdateResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pong, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ProductAttributeDeleteReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductAttributeDeleteReq[number], err)
}

func (x *ProductAttributeDeleteReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int64
			v, offset, err = fastpb.ReadInt64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.Ids = append(x.Ids, v)
			return offset, err
		})
	return offset, err
}

func (x *ProductAttributeDeleteResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductAttributeDeleteResp[number], err)
}

func (x *ProductAttributeDeleteResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pong, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseProductAttribute) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	return offset
}

func (x *BaseProductAttribute) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *BaseProductAttribute) fastWriteField2(buf []byte) (offset int) {
	if x.ProductAttributeCategoryId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetProductAttributeCategoryId())
	return offset
}

func (x *BaseProductAttribute) fastWriteField3(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetName())
	return offset
}

func (x *BaseProductAttribute) fastWriteField4(buf []byte) (offset int) {
	if x.SelectType == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetSelectType())
	return offset
}

func (x *BaseProductAttribute) fastWriteField5(buf []byte) (offset int) {
	if x.InputType == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetInputType())
	return offset
}

func (x *BaseProductAttribute) fastWriteField6(buf []byte) (offset int) {
	if x.InputList == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetInputList())
	return offset
}

func (x *BaseProductAttribute) fastWriteField7(buf []byte) (offset int) {
	if x.Sort == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetSort())
	return offset
}

func (x *BaseProductAttribute) fastWriteField8(buf []byte) (offset int) {
	if x.FilterType == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetFilterType())
	return offset
}

func (x *BaseProductAttribute) fastWriteField9(buf []byte) (offset int) {
	if x.SearchType == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 9, x.GetSearchType())
	return offset
}

func (x *BaseProductAttribute) fastWriteField10(buf []byte) (offset int) {
	if x.RelatedStatus == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 10, x.GetRelatedStatus())
	return offset
}

func (x *BaseProductAttribute) fastWriteField11(buf []byte) (offset int) {
	if x.HandAddStatus == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 11, x.GetHandAddStatus())
	return offset
}

func (x *BaseProductAttribute) fastWriteField12(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 12, x.GetType())
	return offset
}

func (x *ProductAttributeAddReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ProductAttributeAddReq) fastWriteField1(buf []byte) (offset int) {
	if x.ProductAttribute == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetProductAttribute())
	return offset
}

func (x *ProductAttributeAddResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ProductAttributeAddResp) fastWriteField1(buf []byte) (offset int) {
	if x.Pong == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPong())
	return offset
}

func (x *ProductAttributeListReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *ProductAttributeListReq) fastWriteField1(buf []byte) (offset int) {
	if x.Current == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCurrent())
	return offset
}

func (x *ProductAttributeListReq) fastWriteField2(buf []byte) (offset int) {
	if x.PageSize == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetPageSize())
	return offset
}

func (x *ProductAttributeListReq) fastWriteField3(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetName())
	return offset
}

func (x *ProductAttributeListReq) fastWriteField4(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetType())
	return offset
}

func (x *ProductAttributeListReq) fastWriteField5(buf []byte) (offset int) {
	if x.ProductAttributeCategoryId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetProductAttributeCategoryId())
	return offset
}

func (x *ProductAttributeListResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ProductAttributeListResp) fastWriteField1(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetTotal())
	return offset
}

func (x *ProductAttributeListResp) fastWriteField2(buf []byte) (offset int) {
	if x.List == nil {
		return offset
	}
	for i := range x.GetList() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetList()[i])
	}
	return offset
}

func (x *ProductAttributeUpdateReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ProductAttributeUpdateReq) fastWriteField1(buf []byte) (offset int) {
	if x.ProductAttribute == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetProductAttribute())
	return offset
}

func (x *ProductAttributeUpdateResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ProductAttributeUpdateResp) fastWriteField1(buf []byte) (offset int) {
	if x.Pong == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPong())
	return offset
}

func (x *ProductAttributeDeleteReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ProductAttributeDeleteReq) fastWriteField1(buf []byte) (offset int) {
	if len(x.Ids) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 1, len(x.GetIds()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, x.GetIds()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *ProductAttributeDeleteResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ProductAttributeDeleteResp) fastWriteField1(buf []byte) (offset int) {
	if x.Pong == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPong())
	return offset
}

func (x *BaseProductAttribute) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	return n
}

func (x *BaseProductAttribute) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *BaseProductAttribute) sizeField2() (n int) {
	if x.ProductAttributeCategoryId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetProductAttributeCategoryId())
	return n
}

func (x *BaseProductAttribute) sizeField3() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetName())
	return n
}

func (x *BaseProductAttribute) sizeField4() (n int) {
	if x.SelectType == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetSelectType())
	return n
}

func (x *BaseProductAttribute) sizeField5() (n int) {
	if x.InputType == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetInputType())
	return n
}

func (x *BaseProductAttribute) sizeField6() (n int) {
	if x.InputList == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetInputList())
	return n
}

func (x *BaseProductAttribute) sizeField7() (n int) {
	if x.Sort == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetSort())
	return n
}

func (x *BaseProductAttribute) sizeField8() (n int) {
	if x.FilterType == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetFilterType())
	return n
}

func (x *BaseProductAttribute) sizeField9() (n int) {
	if x.SearchType == 0 {
		return n
	}
	n += fastpb.SizeInt64(9, x.GetSearchType())
	return n
}

func (x *BaseProductAttribute) sizeField10() (n int) {
	if x.RelatedStatus == 0 {
		return n
	}
	n += fastpb.SizeInt64(10, x.GetRelatedStatus())
	return n
}

func (x *BaseProductAttribute) sizeField11() (n int) {
	if x.HandAddStatus == 0 {
		return n
	}
	n += fastpb.SizeInt64(11, x.GetHandAddStatus())
	return n
}

func (x *BaseProductAttribute) sizeField12() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt64(12, x.GetType())
	return n
}

func (x *ProductAttributeAddReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ProductAttributeAddReq) sizeField1() (n int) {
	if x.ProductAttribute == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetProductAttribute())
	return n
}

func (x *ProductAttributeAddResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ProductAttributeAddResp) sizeField1() (n int) {
	if x.Pong == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPong())
	return n
}

func (x *ProductAttributeListReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *ProductAttributeListReq) sizeField1() (n int) {
	if x.Current == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCurrent())
	return n
}

func (x *ProductAttributeListReq) sizeField2() (n int) {
	if x.PageSize == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetPageSize())
	return n
}

func (x *ProductAttributeListReq) sizeField3() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetName())
	return n
}

func (x *ProductAttributeListReq) sizeField4() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetType())
	return n
}

func (x *ProductAttributeListReq) sizeField5() (n int) {
	if x.ProductAttributeCategoryId == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetProductAttributeCategoryId())
	return n
}

func (x *ProductAttributeListResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ProductAttributeListResp) sizeField1() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetTotal())
	return n
}

func (x *ProductAttributeListResp) sizeField2() (n int) {
	if x.List == nil {
		return n
	}
	for i := range x.GetList() {
		n += fastpb.SizeMessage(2, x.GetList()[i])
	}
	return n
}

func (x *ProductAttributeUpdateReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ProductAttributeUpdateReq) sizeField1() (n int) {
	if x.ProductAttribute == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetProductAttribute())
	return n
}

func (x *ProductAttributeUpdateResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ProductAttributeUpdateResp) sizeField1() (n int) {
	if x.Pong == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPong())
	return n
}

func (x *ProductAttributeDeleteReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ProductAttributeDeleteReq) sizeField1() (n int) {
	if len(x.Ids) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(1, len(x.GetIds()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt64(numTagOrKey, x.GetIds()[numIdxOrVal])
			return n
		})
	return n
}

func (x *ProductAttributeDeleteResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ProductAttributeDeleteResp) sizeField1() (n int) {
	if x.Pong == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPong())
	return n
}

var fieldIDToName_BaseProductAttribute = map[int32]string{
	1:  "Id",
	2:  "ProductAttributeCategoryId",
	3:  "Name",
	4:  "SelectType",
	5:  "InputType",
	6:  "InputList",
	7:  "Sort",
	8:  "FilterType",
	9:  "SearchType",
	10: "RelatedStatus",
	11: "HandAddStatus",
	12: "Type",
}

var fieldIDToName_ProductAttributeAddReq = map[int32]string{
	1: "ProductAttribute",
}

var fieldIDToName_ProductAttributeAddResp = map[int32]string{
	1: "Pong",
}

var fieldIDToName_ProductAttributeListReq = map[int32]string{
	1: "Current",
	2: "PageSize",
	3: "Name",
	4: "Type",
	5: "ProductAttributeCategoryId",
}

var fieldIDToName_ProductAttributeListResp = map[int32]string{
	1: "Total",
	2: "List",
}

var fieldIDToName_ProductAttributeUpdateReq = map[int32]string{
	1: "ProductAttribute",
}

var fieldIDToName_ProductAttributeUpdateResp = map[int32]string{
	1: "Pong",
}

var fieldIDToName_ProductAttributeDeleteReq = map[int32]string{
	1: "Ids",
}

var fieldIDToName_ProductAttributeDeleteResp = map[int32]string{
	1: "Pong",
}
