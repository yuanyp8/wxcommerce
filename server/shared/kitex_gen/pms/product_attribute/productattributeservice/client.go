// Code generated by Kitex v0.9.0. DO NOT EDIT.

package productattributeservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	product_attribute "github.com/yuanyp8/wxcommerce/shared/kitex_gen/pms/product_attribute"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	ProductAttributeAdd(ctx context.Context, Req *product_attribute.ProductAttributeAddReq, callOptions ...callopt.Option) (r *product_attribute.ProductAttributeAddResp, err error)
	ProductAttributeList(ctx context.Context, Req *product_attribute.ProductAttributeListReq, callOptions ...callopt.Option) (r *product_attribute.ProductAttributeListResp, err error)
	ProductAttributeUpdate(ctx context.Context, Req *product_attribute.ProductAttributeUpdateReq, callOptions ...callopt.Option) (r *product_attribute.ProductAttributeUpdateResp, err error)
	ProductAttributeDelete(ctx context.Context, Req *product_attribute.ProductAttributeDeleteReq, callOptions ...callopt.Option) (r *product_attribute.ProductAttributeDeleteResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kProductAttributeServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kProductAttributeServiceClient struct {
	*kClient
}

func (p *kProductAttributeServiceClient) ProductAttributeAdd(ctx context.Context, Req *product_attribute.ProductAttributeAddReq, callOptions ...callopt.Option) (r *product_attribute.ProductAttributeAddResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ProductAttributeAdd(ctx, Req)
}

func (p *kProductAttributeServiceClient) ProductAttributeList(ctx context.Context, Req *product_attribute.ProductAttributeListReq, callOptions ...callopt.Option) (r *product_attribute.ProductAttributeListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ProductAttributeList(ctx, Req)
}

func (p *kProductAttributeServiceClient) ProductAttributeUpdate(ctx context.Context, Req *product_attribute.ProductAttributeUpdateReq, callOptions ...callopt.Option) (r *product_attribute.ProductAttributeUpdateResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ProductAttributeUpdate(ctx, Req)
}

func (p *kProductAttributeServiceClient) ProductAttributeDelete(ctx context.Context, Req *product_attribute.ProductAttributeDeleteReq, callOptions ...callopt.Option) (r *product_attribute.ProductAttributeDeleteResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ProductAttributeDelete(ctx, Req)
}
