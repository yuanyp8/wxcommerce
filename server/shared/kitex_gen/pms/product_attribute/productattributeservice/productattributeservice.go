// Code generated by Kitex v0.9.0. DO NOT EDIT.

package productattributeservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	product_attribute "github.com/yuanyp8/wxcommerce/shared/kitex_gen/pms/product_attribute"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"ProductAttributeAdd": kitex.NewMethodInfo(
		productAttributeAddHandler,
		newProductAttributeAddArgs,
		newProductAttributeAddResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ProductAttributeList": kitex.NewMethodInfo(
		productAttributeListHandler,
		newProductAttributeListArgs,
		newProductAttributeListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ProductAttributeUpdate": kitex.NewMethodInfo(
		productAttributeUpdateHandler,
		newProductAttributeUpdateArgs,
		newProductAttributeUpdateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ProductAttributeDelete": kitex.NewMethodInfo(
		productAttributeDeleteHandler,
		newProductAttributeDeleteArgs,
		newProductAttributeDeleteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	productAttributeServiceServiceInfo                = NewServiceInfo()
	productAttributeServiceServiceInfoForClient       = NewServiceInfoForClient()
	productAttributeServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return productAttributeServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return productAttributeServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return productAttributeServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ProductAttributeService"
	handlerType := (*product_attribute.ProductAttributeService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "pms",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.0",
		Extra:           extra,
	}
	return svcInfo
}

func productAttributeAddHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product_attribute.ProductAttributeAddReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product_attribute.ProductAttributeService).ProductAttributeAdd(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ProductAttributeAddArgs:
		success, err := handler.(product_attribute.ProductAttributeService).ProductAttributeAdd(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ProductAttributeAddResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newProductAttributeAddArgs() interface{} {
	return &ProductAttributeAddArgs{}
}

func newProductAttributeAddResult() interface{} {
	return &ProductAttributeAddResult{}
}

type ProductAttributeAddArgs struct {
	Req *product_attribute.ProductAttributeAddReq
}

func (p *ProductAttributeAddArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product_attribute.ProductAttributeAddReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ProductAttributeAddArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ProductAttributeAddArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ProductAttributeAddArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ProductAttributeAddArgs) Unmarshal(in []byte) error {
	msg := new(product_attribute.ProductAttributeAddReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ProductAttributeAddArgs_Req_DEFAULT *product_attribute.ProductAttributeAddReq

func (p *ProductAttributeAddArgs) GetReq() *product_attribute.ProductAttributeAddReq {
	if !p.IsSetReq() {
		return ProductAttributeAddArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ProductAttributeAddArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductAttributeAddArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ProductAttributeAddResult struct {
	Success *product_attribute.ProductAttributeAddResp
}

var ProductAttributeAddResult_Success_DEFAULT *product_attribute.ProductAttributeAddResp

func (p *ProductAttributeAddResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product_attribute.ProductAttributeAddResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ProductAttributeAddResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ProductAttributeAddResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ProductAttributeAddResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ProductAttributeAddResult) Unmarshal(in []byte) error {
	msg := new(product_attribute.ProductAttributeAddResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ProductAttributeAddResult) GetSuccess() *product_attribute.ProductAttributeAddResp {
	if !p.IsSetSuccess() {
		return ProductAttributeAddResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ProductAttributeAddResult) SetSuccess(x interface{}) {
	p.Success = x.(*product_attribute.ProductAttributeAddResp)
}

func (p *ProductAttributeAddResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductAttributeAddResult) GetResult() interface{} {
	return p.Success
}

func productAttributeListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product_attribute.ProductAttributeListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product_attribute.ProductAttributeService).ProductAttributeList(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ProductAttributeListArgs:
		success, err := handler.(product_attribute.ProductAttributeService).ProductAttributeList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ProductAttributeListResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newProductAttributeListArgs() interface{} {
	return &ProductAttributeListArgs{}
}

func newProductAttributeListResult() interface{} {
	return &ProductAttributeListResult{}
}

type ProductAttributeListArgs struct {
	Req *product_attribute.ProductAttributeListReq
}

func (p *ProductAttributeListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product_attribute.ProductAttributeListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ProductAttributeListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ProductAttributeListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ProductAttributeListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ProductAttributeListArgs) Unmarshal(in []byte) error {
	msg := new(product_attribute.ProductAttributeListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ProductAttributeListArgs_Req_DEFAULT *product_attribute.ProductAttributeListReq

func (p *ProductAttributeListArgs) GetReq() *product_attribute.ProductAttributeListReq {
	if !p.IsSetReq() {
		return ProductAttributeListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ProductAttributeListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductAttributeListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ProductAttributeListResult struct {
	Success *product_attribute.ProductAttributeListResp
}

var ProductAttributeListResult_Success_DEFAULT *product_attribute.ProductAttributeListResp

func (p *ProductAttributeListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product_attribute.ProductAttributeListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ProductAttributeListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ProductAttributeListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ProductAttributeListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ProductAttributeListResult) Unmarshal(in []byte) error {
	msg := new(product_attribute.ProductAttributeListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ProductAttributeListResult) GetSuccess() *product_attribute.ProductAttributeListResp {
	if !p.IsSetSuccess() {
		return ProductAttributeListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ProductAttributeListResult) SetSuccess(x interface{}) {
	p.Success = x.(*product_attribute.ProductAttributeListResp)
}

func (p *ProductAttributeListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductAttributeListResult) GetResult() interface{} {
	return p.Success
}

func productAttributeUpdateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product_attribute.ProductAttributeUpdateReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product_attribute.ProductAttributeService).ProductAttributeUpdate(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ProductAttributeUpdateArgs:
		success, err := handler.(product_attribute.ProductAttributeService).ProductAttributeUpdate(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ProductAttributeUpdateResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newProductAttributeUpdateArgs() interface{} {
	return &ProductAttributeUpdateArgs{}
}

func newProductAttributeUpdateResult() interface{} {
	return &ProductAttributeUpdateResult{}
}

type ProductAttributeUpdateArgs struct {
	Req *product_attribute.ProductAttributeUpdateReq
}

func (p *ProductAttributeUpdateArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product_attribute.ProductAttributeUpdateReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ProductAttributeUpdateArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ProductAttributeUpdateArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ProductAttributeUpdateArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ProductAttributeUpdateArgs) Unmarshal(in []byte) error {
	msg := new(product_attribute.ProductAttributeUpdateReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ProductAttributeUpdateArgs_Req_DEFAULT *product_attribute.ProductAttributeUpdateReq

func (p *ProductAttributeUpdateArgs) GetReq() *product_attribute.ProductAttributeUpdateReq {
	if !p.IsSetReq() {
		return ProductAttributeUpdateArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ProductAttributeUpdateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductAttributeUpdateArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ProductAttributeUpdateResult struct {
	Success *product_attribute.ProductAttributeUpdateResp
}

var ProductAttributeUpdateResult_Success_DEFAULT *product_attribute.ProductAttributeUpdateResp

func (p *ProductAttributeUpdateResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product_attribute.ProductAttributeUpdateResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ProductAttributeUpdateResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ProductAttributeUpdateResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ProductAttributeUpdateResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ProductAttributeUpdateResult) Unmarshal(in []byte) error {
	msg := new(product_attribute.ProductAttributeUpdateResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ProductAttributeUpdateResult) GetSuccess() *product_attribute.ProductAttributeUpdateResp {
	if !p.IsSetSuccess() {
		return ProductAttributeUpdateResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ProductAttributeUpdateResult) SetSuccess(x interface{}) {
	p.Success = x.(*product_attribute.ProductAttributeUpdateResp)
}

func (p *ProductAttributeUpdateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductAttributeUpdateResult) GetResult() interface{} {
	return p.Success
}

func productAttributeDeleteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product_attribute.ProductAttributeDeleteReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product_attribute.ProductAttributeService).ProductAttributeDelete(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ProductAttributeDeleteArgs:
		success, err := handler.(product_attribute.ProductAttributeService).ProductAttributeDelete(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ProductAttributeDeleteResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newProductAttributeDeleteArgs() interface{} {
	return &ProductAttributeDeleteArgs{}
}

func newProductAttributeDeleteResult() interface{} {
	return &ProductAttributeDeleteResult{}
}

type ProductAttributeDeleteArgs struct {
	Req *product_attribute.ProductAttributeDeleteReq
}

func (p *ProductAttributeDeleteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product_attribute.ProductAttributeDeleteReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ProductAttributeDeleteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ProductAttributeDeleteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ProductAttributeDeleteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ProductAttributeDeleteArgs) Unmarshal(in []byte) error {
	msg := new(product_attribute.ProductAttributeDeleteReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ProductAttributeDeleteArgs_Req_DEFAULT *product_attribute.ProductAttributeDeleteReq

func (p *ProductAttributeDeleteArgs) GetReq() *product_attribute.ProductAttributeDeleteReq {
	if !p.IsSetReq() {
		return ProductAttributeDeleteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ProductAttributeDeleteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductAttributeDeleteArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ProductAttributeDeleteResult struct {
	Success *product_attribute.ProductAttributeDeleteResp
}

var ProductAttributeDeleteResult_Success_DEFAULT *product_attribute.ProductAttributeDeleteResp

func (p *ProductAttributeDeleteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product_attribute.ProductAttributeDeleteResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ProductAttributeDeleteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ProductAttributeDeleteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ProductAttributeDeleteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ProductAttributeDeleteResult) Unmarshal(in []byte) error {
	msg := new(product_attribute.ProductAttributeDeleteResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ProductAttributeDeleteResult) GetSuccess() *product_attribute.ProductAttributeDeleteResp {
	if !p.IsSetSuccess() {
		return ProductAttributeDeleteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ProductAttributeDeleteResult) SetSuccess(x interface{}) {
	p.Success = x.(*product_attribute.ProductAttributeDeleteResp)
}

func (p *ProductAttributeDeleteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductAttributeDeleteResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ProductAttributeAdd(ctx context.Context, Req *product_attribute.ProductAttributeAddReq) (r *product_attribute.ProductAttributeAddResp, err error) {
	var _args ProductAttributeAddArgs
	_args.Req = Req
	var _result ProductAttributeAddResult
	if err = p.c.Call(ctx, "ProductAttributeAdd", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ProductAttributeList(ctx context.Context, Req *product_attribute.ProductAttributeListReq) (r *product_attribute.ProductAttributeListResp, err error) {
	var _args ProductAttributeListArgs
	_args.Req = Req
	var _result ProductAttributeListResult
	if err = p.c.Call(ctx, "ProductAttributeList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ProductAttributeUpdate(ctx context.Context, Req *product_attribute.ProductAttributeUpdateReq) (r *product_attribute.ProductAttributeUpdateResp, err error) {
	var _args ProductAttributeUpdateArgs
	_args.Req = Req
	var _result ProductAttributeUpdateResult
	if err = p.c.Call(ctx, "ProductAttributeUpdate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ProductAttributeDelete(ctx context.Context, Req *product_attribute.ProductAttributeDeleteReq) (r *product_attribute.ProductAttributeDeleteResp, err error) {
	var _args ProductAttributeDeleteArgs
	_args.Req = Req
	var _result ProductAttributeDeleteResult
	if err = p.c.Call(ctx, "ProductAttributeDelete", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
