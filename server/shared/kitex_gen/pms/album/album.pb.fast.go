// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package album

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	response "github.com/yuanyp8/wxcommerce/shared/kitex_gen/base/response"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Album) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Album[number], err)
}

func (x *Album) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *Album) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Album) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.CoverPic, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Album) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.PicCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Album) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Sort, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Album) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AlbumAddReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AlbumAddReq[number], err)
}

func (x *AlbumAddReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Album
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Album = &v
	return offset, nil
}

func (x *AlbumAddResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AlbumAddResp[number], err)
}

func (x *AlbumAddResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v response.BaseResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResponse = &v
	return offset, nil
}

func (x *AlbumListReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AlbumListReq[number], err)
}

func (x *AlbumListReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Current, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *AlbumListReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.PageSize, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *AlbumListResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AlbumListResp[number], err)
}

func (x *AlbumListResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *AlbumListResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Album
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.List = append(x.List, &v)
	return offset, nil
}

func (x *AlbumListResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v response.BaseResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResponse = &v
	return offset, nil
}

func (x *AlbumUpdateReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AlbumUpdateReq[number], err)
}

func (x *AlbumUpdateReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Album
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Album = &v
	return offset, nil
}

func (x *AlbumUpdateResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AlbumUpdateResp[number], err)
}

func (x *AlbumUpdateResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v response.BaseResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResponse = &v
	return offset, nil
}

func (x *AlbumDeleteReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AlbumDeleteReq[number], err)
}

func (x *AlbumDeleteReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v uint64
			v, offset, err = fastpb.ReadUint64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.Ids = append(x.Ids, v)
			return offset, err
		})
	return offset, err
}

func (x *AlbumDeleteResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AlbumDeleteResp[number], err)
}

func (x *AlbumDeleteResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v response.BaseResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResponse = &v
	return offset, nil
}

func (x *Album) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *Album) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Album) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *Album) fastWriteField3(buf []byte) (offset int) {
	if x.CoverPic == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetCoverPic())
	return offset
}

func (x *Album) fastWriteField4(buf []byte) (offset int) {
	if x.PicCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetPicCount())
	return offset
}

func (x *Album) fastWriteField5(buf []byte) (offset int) {
	if x.Sort == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetSort())
	return offset
}

func (x *Album) fastWriteField6(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetDescription())
	return offset
}

func (x *AlbumAddReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *AlbumAddReq) fastWriteField1(buf []byte) (offset int) {
	if x.Album == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetAlbum())
	return offset
}

func (x *AlbumAddResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *AlbumAddResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResponse == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResponse())
	return offset
}

func (x *AlbumListReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *AlbumListReq) fastWriteField1(buf []byte) (offset int) {
	if x.Current == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCurrent())
	return offset
}

func (x *AlbumListReq) fastWriteField2(buf []byte) (offset int) {
	if x.PageSize == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetPageSize())
	return offset
}

func (x *AlbumListResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *AlbumListResp) fastWriteField1(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetTotal())
	return offset
}

func (x *AlbumListResp) fastWriteField2(buf []byte) (offset int) {
	if x.List == nil {
		return offset
	}
	for i := range x.GetList() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetList()[i])
	}
	return offset
}

func (x *AlbumListResp) fastWriteField3(buf []byte) (offset int) {
	if x.BaseResponse == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetBaseResponse())
	return offset
}

func (x *AlbumUpdateReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *AlbumUpdateReq) fastWriteField1(buf []byte) (offset int) {
	if x.Album == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetAlbum())
	return offset
}

func (x *AlbumUpdateResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *AlbumUpdateResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResponse == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResponse())
	return offset
}

func (x *AlbumDeleteReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *AlbumDeleteReq) fastWriteField1(buf []byte) (offset int) {
	if len(x.Ids) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 1, len(x.GetIds()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteUint64(buf[offset:], numTagOrKey, x.GetIds()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *AlbumDeleteResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *AlbumDeleteResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResponse == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResponse())
	return offset
}

func (x *Album) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *Album) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetId())
	return n
}

func (x *Album) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *Album) sizeField3() (n int) {
	if x.CoverPic == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetCoverPic())
	return n
}

func (x *Album) sizeField4() (n int) {
	if x.PicCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetPicCount())
	return n
}

func (x *Album) sizeField5() (n int) {
	if x.Sort == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetSort())
	return n
}

func (x *Album) sizeField6() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetDescription())
	return n
}

func (x *AlbumAddReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *AlbumAddReq) sizeField1() (n int) {
	if x.Album == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetAlbum())
	return n
}

func (x *AlbumAddResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *AlbumAddResp) sizeField1() (n int) {
	if x.BaseResponse == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResponse())
	return n
}

func (x *AlbumListReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *AlbumListReq) sizeField1() (n int) {
	if x.Current == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCurrent())
	return n
}

func (x *AlbumListReq) sizeField2() (n int) {
	if x.PageSize == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetPageSize())
	return n
}

func (x *AlbumListResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *AlbumListResp) sizeField1() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetTotal())
	return n
}

func (x *AlbumListResp) sizeField2() (n int) {
	if x.List == nil {
		return n
	}
	for i := range x.GetList() {
		n += fastpb.SizeMessage(2, x.GetList()[i])
	}
	return n
}

func (x *AlbumListResp) sizeField3() (n int) {
	if x.BaseResponse == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetBaseResponse())
	return n
}

func (x *AlbumUpdateReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *AlbumUpdateReq) sizeField1() (n int) {
	if x.Album == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetAlbum())
	return n
}

func (x *AlbumUpdateResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *AlbumUpdateResp) sizeField1() (n int) {
	if x.BaseResponse == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResponse())
	return n
}

func (x *AlbumDeleteReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *AlbumDeleteReq) sizeField1() (n int) {
	if len(x.Ids) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(1, len(x.GetIds()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeUint64(numTagOrKey, x.GetIds()[numIdxOrVal])
			return n
		})
	return n
}

func (x *AlbumDeleteResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *AlbumDeleteResp) sizeField1() (n int) {
	if x.BaseResponse == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResponse())
	return n
}

var fieldIDToName_Album = map[int32]string{
	1: "Id",
	2: "Name",
	3: "CoverPic",
	4: "PicCount",
	5: "Sort",
	6: "Description",
}

var fieldIDToName_AlbumAddReq = map[int32]string{
	1: "Album",
}

var fieldIDToName_AlbumAddResp = map[int32]string{
	1: "BaseResponse",
}

var fieldIDToName_AlbumListReq = map[int32]string{
	1: "Current",
	2: "PageSize",
}

var fieldIDToName_AlbumListResp = map[int32]string{
	1: "Total",
	2: "List",
	3: "BaseResponse",
}

var fieldIDToName_AlbumUpdateReq = map[int32]string{
	1: "Album",
}

var fieldIDToName_AlbumUpdateResp = map[int32]string{
	1: "BaseResponse",
}

var fieldIDToName_AlbumDeleteReq = map[int32]string{
	1: "Ids",
}

var fieldIDToName_AlbumDeleteResp = map[int32]string{
	1: "BaseResponse",
}

var _ = response.File_base_response_proto
