// Code generated by Kitex v0.9.0. DO NOT EDIT.

package productcategoryattributerelationservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	product_category_attribute_relation "github.com/yuanyp8/wxcommerce/shared/kitex_gen/pms/product_category_attribute_relation"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"ProductCategoryAttributeRelationAdd": kitex.NewMethodInfo(
		productCategoryAttributeRelationAddHandler,
		newProductCategoryAttributeRelationAddArgs,
		newProductCategoryAttributeRelationAddResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ProductCategoryAttributeRelationList": kitex.NewMethodInfo(
		productCategoryAttributeRelationListHandler,
		newProductCategoryAttributeRelationListArgs,
		newProductCategoryAttributeRelationListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ProductCategoryAttributeRelationUpdate": kitex.NewMethodInfo(
		productCategoryAttributeRelationUpdateHandler,
		newProductCategoryAttributeRelationUpdateArgs,
		newProductCategoryAttributeRelationUpdateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ProductCategoryAttributeRelationDelete": kitex.NewMethodInfo(
		productCategoryAttributeRelationDeleteHandler,
		newProductCategoryAttributeRelationDeleteArgs,
		newProductCategoryAttributeRelationDeleteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	productCategoryAttributeRelationServiceServiceInfo                = NewServiceInfo()
	productCategoryAttributeRelationServiceServiceInfoForClient       = NewServiceInfoForClient()
	productCategoryAttributeRelationServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return productCategoryAttributeRelationServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return productCategoryAttributeRelationServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return productCategoryAttributeRelationServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ProductCategoryAttributeRelationService"
	handlerType := (*product_category_attribute_relation.ProductCategoryAttributeRelationService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "pms",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.0",
		Extra:           extra,
	}
	return svcInfo
}

func productCategoryAttributeRelationAddHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product_category_attribute_relation.ProductCategoryAttributeRelationAddReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product_category_attribute_relation.ProductCategoryAttributeRelationService).ProductCategoryAttributeRelationAdd(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ProductCategoryAttributeRelationAddArgs:
		success, err := handler.(product_category_attribute_relation.ProductCategoryAttributeRelationService).ProductCategoryAttributeRelationAdd(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ProductCategoryAttributeRelationAddResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newProductCategoryAttributeRelationAddArgs() interface{} {
	return &ProductCategoryAttributeRelationAddArgs{}
}

func newProductCategoryAttributeRelationAddResult() interface{} {
	return &ProductCategoryAttributeRelationAddResult{}
}

type ProductCategoryAttributeRelationAddArgs struct {
	Req *product_category_attribute_relation.ProductCategoryAttributeRelationAddReq
}

func (p *ProductCategoryAttributeRelationAddArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product_category_attribute_relation.ProductCategoryAttributeRelationAddReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ProductCategoryAttributeRelationAddArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ProductCategoryAttributeRelationAddArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ProductCategoryAttributeRelationAddArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ProductCategoryAttributeRelationAddArgs) Unmarshal(in []byte) error {
	msg := new(product_category_attribute_relation.ProductCategoryAttributeRelationAddReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ProductCategoryAttributeRelationAddArgs_Req_DEFAULT *product_category_attribute_relation.ProductCategoryAttributeRelationAddReq

func (p *ProductCategoryAttributeRelationAddArgs) GetReq() *product_category_attribute_relation.ProductCategoryAttributeRelationAddReq {
	if !p.IsSetReq() {
		return ProductCategoryAttributeRelationAddArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ProductCategoryAttributeRelationAddArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductCategoryAttributeRelationAddArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ProductCategoryAttributeRelationAddResult struct {
	Success *product_category_attribute_relation.ProductCategoryAttributeRelationAddResp
}

var ProductCategoryAttributeRelationAddResult_Success_DEFAULT *product_category_attribute_relation.ProductCategoryAttributeRelationAddResp

func (p *ProductCategoryAttributeRelationAddResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product_category_attribute_relation.ProductCategoryAttributeRelationAddResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ProductCategoryAttributeRelationAddResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ProductCategoryAttributeRelationAddResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ProductCategoryAttributeRelationAddResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ProductCategoryAttributeRelationAddResult) Unmarshal(in []byte) error {
	msg := new(product_category_attribute_relation.ProductCategoryAttributeRelationAddResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ProductCategoryAttributeRelationAddResult) GetSuccess() *product_category_attribute_relation.ProductCategoryAttributeRelationAddResp {
	if !p.IsSetSuccess() {
		return ProductCategoryAttributeRelationAddResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ProductCategoryAttributeRelationAddResult) SetSuccess(x interface{}) {
	p.Success = x.(*product_category_attribute_relation.ProductCategoryAttributeRelationAddResp)
}

func (p *ProductCategoryAttributeRelationAddResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductCategoryAttributeRelationAddResult) GetResult() interface{} {
	return p.Success
}

func productCategoryAttributeRelationListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product_category_attribute_relation.ProductCategoryAttributeRelationListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product_category_attribute_relation.ProductCategoryAttributeRelationService).ProductCategoryAttributeRelationList(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ProductCategoryAttributeRelationListArgs:
		success, err := handler.(product_category_attribute_relation.ProductCategoryAttributeRelationService).ProductCategoryAttributeRelationList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ProductCategoryAttributeRelationListResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newProductCategoryAttributeRelationListArgs() interface{} {
	return &ProductCategoryAttributeRelationListArgs{}
}

func newProductCategoryAttributeRelationListResult() interface{} {
	return &ProductCategoryAttributeRelationListResult{}
}

type ProductCategoryAttributeRelationListArgs struct {
	Req *product_category_attribute_relation.ProductCategoryAttributeRelationListReq
}

func (p *ProductCategoryAttributeRelationListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product_category_attribute_relation.ProductCategoryAttributeRelationListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ProductCategoryAttributeRelationListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ProductCategoryAttributeRelationListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ProductCategoryAttributeRelationListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ProductCategoryAttributeRelationListArgs) Unmarshal(in []byte) error {
	msg := new(product_category_attribute_relation.ProductCategoryAttributeRelationListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ProductCategoryAttributeRelationListArgs_Req_DEFAULT *product_category_attribute_relation.ProductCategoryAttributeRelationListReq

func (p *ProductCategoryAttributeRelationListArgs) GetReq() *product_category_attribute_relation.ProductCategoryAttributeRelationListReq {
	if !p.IsSetReq() {
		return ProductCategoryAttributeRelationListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ProductCategoryAttributeRelationListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductCategoryAttributeRelationListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ProductCategoryAttributeRelationListResult struct {
	Success *product_category_attribute_relation.ProductCategoryAttributeRelationListResp
}

var ProductCategoryAttributeRelationListResult_Success_DEFAULT *product_category_attribute_relation.ProductCategoryAttributeRelationListResp

func (p *ProductCategoryAttributeRelationListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product_category_attribute_relation.ProductCategoryAttributeRelationListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ProductCategoryAttributeRelationListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ProductCategoryAttributeRelationListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ProductCategoryAttributeRelationListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ProductCategoryAttributeRelationListResult) Unmarshal(in []byte) error {
	msg := new(product_category_attribute_relation.ProductCategoryAttributeRelationListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ProductCategoryAttributeRelationListResult) GetSuccess() *product_category_attribute_relation.ProductCategoryAttributeRelationListResp {
	if !p.IsSetSuccess() {
		return ProductCategoryAttributeRelationListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ProductCategoryAttributeRelationListResult) SetSuccess(x interface{}) {
	p.Success = x.(*product_category_attribute_relation.ProductCategoryAttributeRelationListResp)
}

func (p *ProductCategoryAttributeRelationListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductCategoryAttributeRelationListResult) GetResult() interface{} {
	return p.Success
}

func productCategoryAttributeRelationUpdateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product_category_attribute_relation.ProductCategoryAttributeRelationUpdateReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product_category_attribute_relation.ProductCategoryAttributeRelationService).ProductCategoryAttributeRelationUpdate(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ProductCategoryAttributeRelationUpdateArgs:
		success, err := handler.(product_category_attribute_relation.ProductCategoryAttributeRelationService).ProductCategoryAttributeRelationUpdate(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ProductCategoryAttributeRelationUpdateResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newProductCategoryAttributeRelationUpdateArgs() interface{} {
	return &ProductCategoryAttributeRelationUpdateArgs{}
}

func newProductCategoryAttributeRelationUpdateResult() interface{} {
	return &ProductCategoryAttributeRelationUpdateResult{}
}

type ProductCategoryAttributeRelationUpdateArgs struct {
	Req *product_category_attribute_relation.ProductCategoryAttributeRelationUpdateReq
}

func (p *ProductCategoryAttributeRelationUpdateArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product_category_attribute_relation.ProductCategoryAttributeRelationUpdateReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ProductCategoryAttributeRelationUpdateArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ProductCategoryAttributeRelationUpdateArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ProductCategoryAttributeRelationUpdateArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ProductCategoryAttributeRelationUpdateArgs) Unmarshal(in []byte) error {
	msg := new(product_category_attribute_relation.ProductCategoryAttributeRelationUpdateReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ProductCategoryAttributeRelationUpdateArgs_Req_DEFAULT *product_category_attribute_relation.ProductCategoryAttributeRelationUpdateReq

func (p *ProductCategoryAttributeRelationUpdateArgs) GetReq() *product_category_attribute_relation.ProductCategoryAttributeRelationUpdateReq {
	if !p.IsSetReq() {
		return ProductCategoryAttributeRelationUpdateArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ProductCategoryAttributeRelationUpdateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductCategoryAttributeRelationUpdateArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ProductCategoryAttributeRelationUpdateResult struct {
	Success *product_category_attribute_relation.ProductCategoryAttributeRelationUpdateResp
}

var ProductCategoryAttributeRelationUpdateResult_Success_DEFAULT *product_category_attribute_relation.ProductCategoryAttributeRelationUpdateResp

func (p *ProductCategoryAttributeRelationUpdateResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product_category_attribute_relation.ProductCategoryAttributeRelationUpdateResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ProductCategoryAttributeRelationUpdateResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ProductCategoryAttributeRelationUpdateResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ProductCategoryAttributeRelationUpdateResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ProductCategoryAttributeRelationUpdateResult) Unmarshal(in []byte) error {
	msg := new(product_category_attribute_relation.ProductCategoryAttributeRelationUpdateResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ProductCategoryAttributeRelationUpdateResult) GetSuccess() *product_category_attribute_relation.ProductCategoryAttributeRelationUpdateResp {
	if !p.IsSetSuccess() {
		return ProductCategoryAttributeRelationUpdateResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ProductCategoryAttributeRelationUpdateResult) SetSuccess(x interface{}) {
	p.Success = x.(*product_category_attribute_relation.ProductCategoryAttributeRelationUpdateResp)
}

func (p *ProductCategoryAttributeRelationUpdateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductCategoryAttributeRelationUpdateResult) GetResult() interface{} {
	return p.Success
}

func productCategoryAttributeRelationDeleteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product_category_attribute_relation.ProductCategoryAttributeRelationDeleteReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product_category_attribute_relation.ProductCategoryAttributeRelationService).ProductCategoryAttributeRelationDelete(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ProductCategoryAttributeRelationDeleteArgs:
		success, err := handler.(product_category_attribute_relation.ProductCategoryAttributeRelationService).ProductCategoryAttributeRelationDelete(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ProductCategoryAttributeRelationDeleteResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newProductCategoryAttributeRelationDeleteArgs() interface{} {
	return &ProductCategoryAttributeRelationDeleteArgs{}
}

func newProductCategoryAttributeRelationDeleteResult() interface{} {
	return &ProductCategoryAttributeRelationDeleteResult{}
}

type ProductCategoryAttributeRelationDeleteArgs struct {
	Req *product_category_attribute_relation.ProductCategoryAttributeRelationDeleteReq
}

func (p *ProductCategoryAttributeRelationDeleteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product_category_attribute_relation.ProductCategoryAttributeRelationDeleteReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ProductCategoryAttributeRelationDeleteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ProductCategoryAttributeRelationDeleteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ProductCategoryAttributeRelationDeleteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ProductCategoryAttributeRelationDeleteArgs) Unmarshal(in []byte) error {
	msg := new(product_category_attribute_relation.ProductCategoryAttributeRelationDeleteReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ProductCategoryAttributeRelationDeleteArgs_Req_DEFAULT *product_category_attribute_relation.ProductCategoryAttributeRelationDeleteReq

func (p *ProductCategoryAttributeRelationDeleteArgs) GetReq() *product_category_attribute_relation.ProductCategoryAttributeRelationDeleteReq {
	if !p.IsSetReq() {
		return ProductCategoryAttributeRelationDeleteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ProductCategoryAttributeRelationDeleteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductCategoryAttributeRelationDeleteArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ProductCategoryAttributeRelationDeleteResult struct {
	Success *product_category_attribute_relation.ProductCategoryAttributeRelationDeleteResp
}

var ProductCategoryAttributeRelationDeleteResult_Success_DEFAULT *product_category_attribute_relation.ProductCategoryAttributeRelationDeleteResp

func (p *ProductCategoryAttributeRelationDeleteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product_category_attribute_relation.ProductCategoryAttributeRelationDeleteResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ProductCategoryAttributeRelationDeleteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ProductCategoryAttributeRelationDeleteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ProductCategoryAttributeRelationDeleteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ProductCategoryAttributeRelationDeleteResult) Unmarshal(in []byte) error {
	msg := new(product_category_attribute_relation.ProductCategoryAttributeRelationDeleteResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ProductCategoryAttributeRelationDeleteResult) GetSuccess() *product_category_attribute_relation.ProductCategoryAttributeRelationDeleteResp {
	if !p.IsSetSuccess() {
		return ProductCategoryAttributeRelationDeleteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ProductCategoryAttributeRelationDeleteResult) SetSuccess(x interface{}) {
	p.Success = x.(*product_category_attribute_relation.ProductCategoryAttributeRelationDeleteResp)
}

func (p *ProductCategoryAttributeRelationDeleteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductCategoryAttributeRelationDeleteResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ProductCategoryAttributeRelationAdd(ctx context.Context, Req *product_category_attribute_relation.ProductCategoryAttributeRelationAddReq) (r *product_category_attribute_relation.ProductCategoryAttributeRelationAddResp, err error) {
	var _args ProductCategoryAttributeRelationAddArgs
	_args.Req = Req
	var _result ProductCategoryAttributeRelationAddResult
	if err = p.c.Call(ctx, "ProductCategoryAttributeRelationAdd", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ProductCategoryAttributeRelationList(ctx context.Context, Req *product_category_attribute_relation.ProductCategoryAttributeRelationListReq) (r *product_category_attribute_relation.ProductCategoryAttributeRelationListResp, err error) {
	var _args ProductCategoryAttributeRelationListArgs
	_args.Req = Req
	var _result ProductCategoryAttributeRelationListResult
	if err = p.c.Call(ctx, "ProductCategoryAttributeRelationList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ProductCategoryAttributeRelationUpdate(ctx context.Context, Req *product_category_attribute_relation.ProductCategoryAttributeRelationUpdateReq) (r *product_category_attribute_relation.ProductCategoryAttributeRelationUpdateResp, err error) {
	var _args ProductCategoryAttributeRelationUpdateArgs
	_args.Req = Req
	var _result ProductCategoryAttributeRelationUpdateResult
	if err = p.c.Call(ctx, "ProductCategoryAttributeRelationUpdate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ProductCategoryAttributeRelationDelete(ctx context.Context, Req *product_category_attribute_relation.ProductCategoryAttributeRelationDeleteReq) (r *product_category_attribute_relation.ProductCategoryAttributeRelationDeleteResp, err error) {
	var _args ProductCategoryAttributeRelationDeleteArgs
	_args.Req = Req
	var _result ProductCategoryAttributeRelationDeleteResult
	if err = p.c.Call(ctx, "ProductCategoryAttributeRelationDelete", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
