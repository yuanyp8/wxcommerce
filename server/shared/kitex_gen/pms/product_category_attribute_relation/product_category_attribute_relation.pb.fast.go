// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package product_category_attribute_relation

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *BaseProductCategoryAttributeRelation) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BaseProductCategoryAttributeRelation[number], err)
}

func (x *BaseProductCategoryAttributeRelation) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *BaseProductCategoryAttributeRelation) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ProductCategoryId, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *BaseProductCategoryAttributeRelation) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.ProductAttributeId, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *ProductCategoryAttributeRelationAddReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductCategoryAttributeRelationAddReq[number], err)
}

func (x *ProductCategoryAttributeRelationAddReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseProductCategoryAttributeRelation
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ProductCategoryAttributeRelation = &v
	return offset, nil
}

func (x *ProductCategoryAttributeRelationAddResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductCategoryAttributeRelationAddResp[number], err)
}

func (x *ProductCategoryAttributeRelationAddResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pong, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ProductCategoryAttributeRelationListReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductCategoryAttributeRelationListReq[number], err)
}

func (x *ProductCategoryAttributeRelationListReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Current, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ProductCategoryAttributeRelationListReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.PageSize, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ProductCategoryAttributeRelationListResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductCategoryAttributeRelationListResp[number], err)
}

func (x *ProductCategoryAttributeRelationListResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ProductCategoryAttributeRelationListResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v BaseProductCategoryAttributeRelation
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.List = append(x.List, &v)
	return offset, nil
}

func (x *ProductCategoryAttributeRelationUpdateReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductCategoryAttributeRelationUpdateReq[number], err)
}

func (x *ProductCategoryAttributeRelationUpdateReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseProductCategoryAttributeRelation
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ProductCategoryAttributeRelation = &v
	return offset, nil
}

func (x *ProductCategoryAttributeRelationUpdateResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductCategoryAttributeRelationUpdateResp[number], err)
}

func (x *ProductCategoryAttributeRelationUpdateResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pong, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ProductCategoryAttributeRelationDeleteReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductCategoryAttributeRelationDeleteReq[number], err)
}

func (x *ProductCategoryAttributeRelationDeleteReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *ProductCategoryAttributeRelationDeleteResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductCategoryAttributeRelationDeleteResp[number], err)
}

func (x *ProductCategoryAttributeRelationDeleteResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pong, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseProductCategoryAttributeRelation) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *BaseProductCategoryAttributeRelation) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *BaseProductCategoryAttributeRelation) fastWriteField2(buf []byte) (offset int) {
	if x.ProductCategoryId == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 2, x.GetProductCategoryId())
	return offset
}

func (x *BaseProductCategoryAttributeRelation) fastWriteField3(buf []byte) (offset int) {
	if x.ProductAttributeId == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 3, x.GetProductAttributeId())
	return offset
}

func (x *ProductCategoryAttributeRelationAddReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ProductCategoryAttributeRelationAddReq) fastWriteField1(buf []byte) (offset int) {
	if x.ProductCategoryAttributeRelation == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetProductCategoryAttributeRelation())
	return offset
}

func (x *ProductCategoryAttributeRelationAddResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ProductCategoryAttributeRelationAddResp) fastWriteField1(buf []byte) (offset int) {
	if x.Pong == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPong())
	return offset
}

func (x *ProductCategoryAttributeRelationListReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ProductCategoryAttributeRelationListReq) fastWriteField1(buf []byte) (offset int) {
	if x.Current == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCurrent())
	return offset
}

func (x *ProductCategoryAttributeRelationListReq) fastWriteField2(buf []byte) (offset int) {
	if x.PageSize == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetPageSize())
	return offset
}

func (x *ProductCategoryAttributeRelationListResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ProductCategoryAttributeRelationListResp) fastWriteField1(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetTotal())
	return offset
}

func (x *ProductCategoryAttributeRelationListResp) fastWriteField2(buf []byte) (offset int) {
	if x.List == nil {
		return offset
	}
	for i := range x.GetList() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetList()[i])
	}
	return offset
}

func (x *ProductCategoryAttributeRelationUpdateReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ProductCategoryAttributeRelationUpdateReq) fastWriteField1(buf []byte) (offset int) {
	if x.ProductCategoryAttributeRelation == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetProductCategoryAttributeRelation())
	return offset
}

func (x *ProductCategoryAttributeRelationUpdateResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ProductCategoryAttributeRelationUpdateResp) fastWriteField1(buf []byte) (offset int) {
	if x.Pong == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPong())
	return offset
}

func (x *ProductCategoryAttributeRelationDeleteReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ProductCategoryAttributeRelationDeleteReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *ProductCategoryAttributeRelationDeleteResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ProductCategoryAttributeRelationDeleteResp) fastWriteField1(buf []byte) (offset int) {
	if x.Pong == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPong())
	return offset
}

func (x *BaseProductCategoryAttributeRelation) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *BaseProductCategoryAttributeRelation) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetId())
	return n
}

func (x *BaseProductCategoryAttributeRelation) sizeField2() (n int) {
	if x.ProductCategoryId == 0 {
		return n
	}
	n += fastpb.SizeUint64(2, x.GetProductCategoryId())
	return n
}

func (x *BaseProductCategoryAttributeRelation) sizeField3() (n int) {
	if x.ProductAttributeId == 0 {
		return n
	}
	n += fastpb.SizeUint64(3, x.GetProductAttributeId())
	return n
}

func (x *ProductCategoryAttributeRelationAddReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ProductCategoryAttributeRelationAddReq) sizeField1() (n int) {
	if x.ProductCategoryAttributeRelation == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetProductCategoryAttributeRelation())
	return n
}

func (x *ProductCategoryAttributeRelationAddResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ProductCategoryAttributeRelationAddResp) sizeField1() (n int) {
	if x.Pong == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPong())
	return n
}

func (x *ProductCategoryAttributeRelationListReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ProductCategoryAttributeRelationListReq) sizeField1() (n int) {
	if x.Current == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCurrent())
	return n
}

func (x *ProductCategoryAttributeRelationListReq) sizeField2() (n int) {
	if x.PageSize == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetPageSize())
	return n
}

func (x *ProductCategoryAttributeRelationListResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ProductCategoryAttributeRelationListResp) sizeField1() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetTotal())
	return n
}

func (x *ProductCategoryAttributeRelationListResp) sizeField2() (n int) {
	if x.List == nil {
		return n
	}
	for i := range x.GetList() {
		n += fastpb.SizeMessage(2, x.GetList()[i])
	}
	return n
}

func (x *ProductCategoryAttributeRelationUpdateReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ProductCategoryAttributeRelationUpdateReq) sizeField1() (n int) {
	if x.ProductCategoryAttributeRelation == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetProductCategoryAttributeRelation())
	return n
}

func (x *ProductCategoryAttributeRelationUpdateResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ProductCategoryAttributeRelationUpdateResp) sizeField1() (n int) {
	if x.Pong == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPong())
	return n
}

func (x *ProductCategoryAttributeRelationDeleteReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ProductCategoryAttributeRelationDeleteReq) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetId())
	return n
}

func (x *ProductCategoryAttributeRelationDeleteResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ProductCategoryAttributeRelationDeleteResp) sizeField1() (n int) {
	if x.Pong == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPong())
	return n
}

var fieldIDToName_BaseProductCategoryAttributeRelation = map[int32]string{
	1: "Id",
	2: "ProductCategoryId",
	3: "ProductAttributeId",
}

var fieldIDToName_ProductCategoryAttributeRelationAddReq = map[int32]string{
	1: "ProductCategoryAttributeRelation",
}

var fieldIDToName_ProductCategoryAttributeRelationAddResp = map[int32]string{
	1: "Pong",
}

var fieldIDToName_ProductCategoryAttributeRelationListReq = map[int32]string{
	1: "Current",
	2: "PageSize",
}

var fieldIDToName_ProductCategoryAttributeRelationListResp = map[int32]string{
	1: "Total",
	2: "List",
}

var fieldIDToName_ProductCategoryAttributeRelationUpdateReq = map[int32]string{
	1: "ProductCategoryAttributeRelation",
}

var fieldIDToName_ProductCategoryAttributeRelationUpdateResp = map[int32]string{
	1: "Pong",
}

var fieldIDToName_ProductCategoryAttributeRelationDeleteReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_ProductCategoryAttributeRelationDeleteResp = map[int32]string{
	1: "Pong",
}
