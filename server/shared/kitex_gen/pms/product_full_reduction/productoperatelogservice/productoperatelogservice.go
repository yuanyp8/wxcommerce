// Code generated by Kitex v0.9.0. DO NOT EDIT.

package productoperatelogservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	product_full_reduction "github.com/yuanyp8/wxcommerce/shared/kitex_gen/pms/product_full_reduction"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"ProductOperateLogAdd": kitex.NewMethodInfo(
		productOperateLogAddHandler,
		newProductOperateLogAddArgs,
		newProductOperateLogAddResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ProductOperateLogList": kitex.NewMethodInfo(
		productOperateLogListHandler,
		newProductOperateLogListArgs,
		newProductOperateLogListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ProductOperateLogUpdate": kitex.NewMethodInfo(
		productOperateLogUpdateHandler,
		newProductOperateLogUpdateArgs,
		newProductOperateLogUpdateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ProductOperateLogDelete": kitex.NewMethodInfo(
		productOperateLogDeleteHandler,
		newProductOperateLogDeleteArgs,
		newProductOperateLogDeleteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	productOperateLogServiceServiceInfo                = NewServiceInfo()
	productOperateLogServiceServiceInfoForClient       = NewServiceInfoForClient()
	productOperateLogServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return productOperateLogServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return productOperateLogServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return productOperateLogServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ProductOperateLogService"
	handlerType := (*product_full_reduction.ProductOperateLogService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "pms",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.0",
		Extra:           extra,
	}
	return svcInfo
}

func productOperateLogAddHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product_full_reduction.ProductOperateLogAddReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product_full_reduction.ProductOperateLogService).ProductOperateLogAdd(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ProductOperateLogAddArgs:
		success, err := handler.(product_full_reduction.ProductOperateLogService).ProductOperateLogAdd(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ProductOperateLogAddResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newProductOperateLogAddArgs() interface{} {
	return &ProductOperateLogAddArgs{}
}

func newProductOperateLogAddResult() interface{} {
	return &ProductOperateLogAddResult{}
}

type ProductOperateLogAddArgs struct {
	Req *product_full_reduction.ProductOperateLogAddReq
}

func (p *ProductOperateLogAddArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product_full_reduction.ProductOperateLogAddReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ProductOperateLogAddArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ProductOperateLogAddArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ProductOperateLogAddArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ProductOperateLogAddArgs) Unmarshal(in []byte) error {
	msg := new(product_full_reduction.ProductOperateLogAddReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ProductOperateLogAddArgs_Req_DEFAULT *product_full_reduction.ProductOperateLogAddReq

func (p *ProductOperateLogAddArgs) GetReq() *product_full_reduction.ProductOperateLogAddReq {
	if !p.IsSetReq() {
		return ProductOperateLogAddArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ProductOperateLogAddArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductOperateLogAddArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ProductOperateLogAddResult struct {
	Success *product_full_reduction.ProductOperateLogAddResp
}

var ProductOperateLogAddResult_Success_DEFAULT *product_full_reduction.ProductOperateLogAddResp

func (p *ProductOperateLogAddResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product_full_reduction.ProductOperateLogAddResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ProductOperateLogAddResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ProductOperateLogAddResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ProductOperateLogAddResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ProductOperateLogAddResult) Unmarshal(in []byte) error {
	msg := new(product_full_reduction.ProductOperateLogAddResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ProductOperateLogAddResult) GetSuccess() *product_full_reduction.ProductOperateLogAddResp {
	if !p.IsSetSuccess() {
		return ProductOperateLogAddResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ProductOperateLogAddResult) SetSuccess(x interface{}) {
	p.Success = x.(*product_full_reduction.ProductOperateLogAddResp)
}

func (p *ProductOperateLogAddResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductOperateLogAddResult) GetResult() interface{} {
	return p.Success
}

func productOperateLogListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product_full_reduction.ProductOperateLogListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product_full_reduction.ProductOperateLogService).ProductOperateLogList(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ProductOperateLogListArgs:
		success, err := handler.(product_full_reduction.ProductOperateLogService).ProductOperateLogList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ProductOperateLogListResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newProductOperateLogListArgs() interface{} {
	return &ProductOperateLogListArgs{}
}

func newProductOperateLogListResult() interface{} {
	return &ProductOperateLogListResult{}
}

type ProductOperateLogListArgs struct {
	Req *product_full_reduction.ProductOperateLogListReq
}

func (p *ProductOperateLogListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product_full_reduction.ProductOperateLogListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ProductOperateLogListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ProductOperateLogListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ProductOperateLogListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ProductOperateLogListArgs) Unmarshal(in []byte) error {
	msg := new(product_full_reduction.ProductOperateLogListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ProductOperateLogListArgs_Req_DEFAULT *product_full_reduction.ProductOperateLogListReq

func (p *ProductOperateLogListArgs) GetReq() *product_full_reduction.ProductOperateLogListReq {
	if !p.IsSetReq() {
		return ProductOperateLogListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ProductOperateLogListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductOperateLogListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ProductOperateLogListResult struct {
	Success *product_full_reduction.ProductOperateLogListResp
}

var ProductOperateLogListResult_Success_DEFAULT *product_full_reduction.ProductOperateLogListResp

func (p *ProductOperateLogListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product_full_reduction.ProductOperateLogListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ProductOperateLogListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ProductOperateLogListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ProductOperateLogListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ProductOperateLogListResult) Unmarshal(in []byte) error {
	msg := new(product_full_reduction.ProductOperateLogListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ProductOperateLogListResult) GetSuccess() *product_full_reduction.ProductOperateLogListResp {
	if !p.IsSetSuccess() {
		return ProductOperateLogListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ProductOperateLogListResult) SetSuccess(x interface{}) {
	p.Success = x.(*product_full_reduction.ProductOperateLogListResp)
}

func (p *ProductOperateLogListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductOperateLogListResult) GetResult() interface{} {
	return p.Success
}

func productOperateLogUpdateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product_full_reduction.ProductOperateLogUpdateReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product_full_reduction.ProductOperateLogService).ProductOperateLogUpdate(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ProductOperateLogUpdateArgs:
		success, err := handler.(product_full_reduction.ProductOperateLogService).ProductOperateLogUpdate(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ProductOperateLogUpdateResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newProductOperateLogUpdateArgs() interface{} {
	return &ProductOperateLogUpdateArgs{}
}

func newProductOperateLogUpdateResult() interface{} {
	return &ProductOperateLogUpdateResult{}
}

type ProductOperateLogUpdateArgs struct {
	Req *product_full_reduction.ProductOperateLogUpdateReq
}

func (p *ProductOperateLogUpdateArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product_full_reduction.ProductOperateLogUpdateReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ProductOperateLogUpdateArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ProductOperateLogUpdateArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ProductOperateLogUpdateArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ProductOperateLogUpdateArgs) Unmarshal(in []byte) error {
	msg := new(product_full_reduction.ProductOperateLogUpdateReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ProductOperateLogUpdateArgs_Req_DEFAULT *product_full_reduction.ProductOperateLogUpdateReq

func (p *ProductOperateLogUpdateArgs) GetReq() *product_full_reduction.ProductOperateLogUpdateReq {
	if !p.IsSetReq() {
		return ProductOperateLogUpdateArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ProductOperateLogUpdateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductOperateLogUpdateArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ProductOperateLogUpdateResult struct {
	Success *product_full_reduction.ProductOperateLogUpdateResp
}

var ProductOperateLogUpdateResult_Success_DEFAULT *product_full_reduction.ProductOperateLogUpdateResp

func (p *ProductOperateLogUpdateResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product_full_reduction.ProductOperateLogUpdateResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ProductOperateLogUpdateResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ProductOperateLogUpdateResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ProductOperateLogUpdateResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ProductOperateLogUpdateResult) Unmarshal(in []byte) error {
	msg := new(product_full_reduction.ProductOperateLogUpdateResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ProductOperateLogUpdateResult) GetSuccess() *product_full_reduction.ProductOperateLogUpdateResp {
	if !p.IsSetSuccess() {
		return ProductOperateLogUpdateResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ProductOperateLogUpdateResult) SetSuccess(x interface{}) {
	p.Success = x.(*product_full_reduction.ProductOperateLogUpdateResp)
}

func (p *ProductOperateLogUpdateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductOperateLogUpdateResult) GetResult() interface{} {
	return p.Success
}

func productOperateLogDeleteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product_full_reduction.ProductOperateLogDeleteReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product_full_reduction.ProductOperateLogService).ProductOperateLogDelete(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ProductOperateLogDeleteArgs:
		success, err := handler.(product_full_reduction.ProductOperateLogService).ProductOperateLogDelete(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ProductOperateLogDeleteResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newProductOperateLogDeleteArgs() interface{} {
	return &ProductOperateLogDeleteArgs{}
}

func newProductOperateLogDeleteResult() interface{} {
	return &ProductOperateLogDeleteResult{}
}

type ProductOperateLogDeleteArgs struct {
	Req *product_full_reduction.ProductOperateLogDeleteReq
}

func (p *ProductOperateLogDeleteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product_full_reduction.ProductOperateLogDeleteReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ProductOperateLogDeleteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ProductOperateLogDeleteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ProductOperateLogDeleteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ProductOperateLogDeleteArgs) Unmarshal(in []byte) error {
	msg := new(product_full_reduction.ProductOperateLogDeleteReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ProductOperateLogDeleteArgs_Req_DEFAULT *product_full_reduction.ProductOperateLogDeleteReq

func (p *ProductOperateLogDeleteArgs) GetReq() *product_full_reduction.ProductOperateLogDeleteReq {
	if !p.IsSetReq() {
		return ProductOperateLogDeleteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ProductOperateLogDeleteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductOperateLogDeleteArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ProductOperateLogDeleteResult struct {
	Success *product_full_reduction.ProductOperateLogDeleteResp
}

var ProductOperateLogDeleteResult_Success_DEFAULT *product_full_reduction.ProductOperateLogDeleteResp

func (p *ProductOperateLogDeleteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product_full_reduction.ProductOperateLogDeleteResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ProductOperateLogDeleteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ProductOperateLogDeleteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ProductOperateLogDeleteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ProductOperateLogDeleteResult) Unmarshal(in []byte) error {
	msg := new(product_full_reduction.ProductOperateLogDeleteResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ProductOperateLogDeleteResult) GetSuccess() *product_full_reduction.ProductOperateLogDeleteResp {
	if !p.IsSetSuccess() {
		return ProductOperateLogDeleteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ProductOperateLogDeleteResult) SetSuccess(x interface{}) {
	p.Success = x.(*product_full_reduction.ProductOperateLogDeleteResp)
}

func (p *ProductOperateLogDeleteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductOperateLogDeleteResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ProductOperateLogAdd(ctx context.Context, Req *product_full_reduction.ProductOperateLogAddReq) (r *product_full_reduction.ProductOperateLogAddResp, err error) {
	var _args ProductOperateLogAddArgs
	_args.Req = Req
	var _result ProductOperateLogAddResult
	if err = p.c.Call(ctx, "ProductOperateLogAdd", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ProductOperateLogList(ctx context.Context, Req *product_full_reduction.ProductOperateLogListReq) (r *product_full_reduction.ProductOperateLogListResp, err error) {
	var _args ProductOperateLogListArgs
	_args.Req = Req
	var _result ProductOperateLogListResult
	if err = p.c.Call(ctx, "ProductOperateLogList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ProductOperateLogUpdate(ctx context.Context, Req *product_full_reduction.ProductOperateLogUpdateReq) (r *product_full_reduction.ProductOperateLogUpdateResp, err error) {
	var _args ProductOperateLogUpdateArgs
	_args.Req = Req
	var _result ProductOperateLogUpdateResult
	if err = p.c.Call(ctx, "ProductOperateLogUpdate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ProductOperateLogDelete(ctx context.Context, Req *product_full_reduction.ProductOperateLogDeleteReq) (r *product_full_reduction.ProductOperateLogDeleteResp, err error) {
	var _args ProductOperateLogDeleteArgs
	_args.Req = Req
	var _result ProductOperateLogDeleteResult
	if err = p.c.Call(ctx, "ProductOperateLogDelete", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
