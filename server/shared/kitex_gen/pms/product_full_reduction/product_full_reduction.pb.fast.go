// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package product_full_reduction

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *BaseProductFullReduction) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BaseProductFullReduction[number], err)
}

func (x *BaseProductFullReduction) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProductFullReduction) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ProductId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProductFullReduction) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.FullPrice, offset, err = fastpb.ReadFloat(buf, _type)
	return offset, err
}

func (x *BaseProductFullReduction) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.ReducePrice, offset, err = fastpb.ReadFloat(buf, _type)
	return offset, err
}

func (x *ProductFullReductionAddReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductFullReductionAddReq[number], err)
}

func (x *ProductFullReductionAddReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseProductFullReduction
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ProductFullReduction = &v
	return offset, nil
}

func (x *ProductFullReductionAddResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductFullReductionAddResp[number], err)
}

func (x *ProductFullReductionAddResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pong, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ProductFullReductionListReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductFullReductionListReq[number], err)
}

func (x *ProductFullReductionListReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Current, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ProductFullReductionListReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.PageSize, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ProductFullReductionListReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.ProductId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ProductFullReductionListResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductFullReductionListResp[number], err)
}

func (x *ProductFullReductionListResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ProductFullReductionListResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v BaseProductFullReduction
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.List = append(x.List, &v)
	return offset, nil
}

func (x *ProductFullReductionUpdateReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductFullReductionUpdateReq[number], err)
}

func (x *ProductFullReductionUpdateReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseProductFullReduction
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ProductFullReduction = &v
	return offset, nil
}

func (x *ProductFullReductionUpdateResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductFullReductionUpdateResp[number], err)
}

func (x *ProductFullReductionUpdateResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pong, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ProductFullReductionDeleteReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductFullReductionDeleteReq[number], err)
}

func (x *ProductFullReductionDeleteReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ProductFullReductionDeleteResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductFullReductionDeleteResp[number], err)
}

func (x *ProductFullReductionDeleteResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pong, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseProductFullReduction) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *BaseProductFullReduction) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *BaseProductFullReduction) fastWriteField2(buf []byte) (offset int) {
	if x.ProductId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetProductId())
	return offset
}

func (x *BaseProductFullReduction) fastWriteField3(buf []byte) (offset int) {
	if x.FullPrice == 0 {
		return offset
	}
	offset += fastpb.WriteFloat(buf[offset:], 3, x.GetFullPrice())
	return offset
}

func (x *BaseProductFullReduction) fastWriteField4(buf []byte) (offset int) {
	if x.ReducePrice == 0 {
		return offset
	}
	offset += fastpb.WriteFloat(buf[offset:], 4, x.GetReducePrice())
	return offset
}

func (x *ProductFullReductionAddReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ProductFullReductionAddReq) fastWriteField1(buf []byte) (offset int) {
	if x.ProductFullReduction == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetProductFullReduction())
	return offset
}

func (x *ProductFullReductionAddResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ProductFullReductionAddResp) fastWriteField1(buf []byte) (offset int) {
	if x.Pong == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPong())
	return offset
}

func (x *ProductFullReductionListReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *ProductFullReductionListReq) fastWriteField1(buf []byte) (offset int) {
	if x.Current == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCurrent())
	return offset
}

func (x *ProductFullReductionListReq) fastWriteField2(buf []byte) (offset int) {
	if x.PageSize == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetPageSize())
	return offset
}

func (x *ProductFullReductionListReq) fastWriteField3(buf []byte) (offset int) {
	if x.ProductId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetProductId())
	return offset
}

func (x *ProductFullReductionListResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ProductFullReductionListResp) fastWriteField1(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetTotal())
	return offset
}

func (x *ProductFullReductionListResp) fastWriteField2(buf []byte) (offset int) {
	if x.List == nil {
		return offset
	}
	for i := range x.GetList() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetList()[i])
	}
	return offset
}

func (x *ProductFullReductionUpdateReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ProductFullReductionUpdateReq) fastWriteField1(buf []byte) (offset int) {
	if x.ProductFullReduction == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetProductFullReduction())
	return offset
}

func (x *ProductFullReductionUpdateResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ProductFullReductionUpdateResp) fastWriteField1(buf []byte) (offset int) {
	if x.Pong == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPong())
	return offset
}

func (x *ProductFullReductionDeleteReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ProductFullReductionDeleteReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *ProductFullReductionDeleteResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ProductFullReductionDeleteResp) fastWriteField1(buf []byte) (offset int) {
	if x.Pong == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPong())
	return offset
}

func (x *BaseProductFullReduction) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *BaseProductFullReduction) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *BaseProductFullReduction) sizeField2() (n int) {
	if x.ProductId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetProductId())
	return n
}

func (x *BaseProductFullReduction) sizeField3() (n int) {
	if x.FullPrice == 0 {
		return n
	}
	n += fastpb.SizeFloat(3, x.GetFullPrice())
	return n
}

func (x *BaseProductFullReduction) sizeField4() (n int) {
	if x.ReducePrice == 0 {
		return n
	}
	n += fastpb.SizeFloat(4, x.GetReducePrice())
	return n
}

func (x *ProductFullReductionAddReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ProductFullReductionAddReq) sizeField1() (n int) {
	if x.ProductFullReduction == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetProductFullReduction())
	return n
}

func (x *ProductFullReductionAddResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ProductFullReductionAddResp) sizeField1() (n int) {
	if x.Pong == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPong())
	return n
}

func (x *ProductFullReductionListReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *ProductFullReductionListReq) sizeField1() (n int) {
	if x.Current == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCurrent())
	return n
}

func (x *ProductFullReductionListReq) sizeField2() (n int) {
	if x.PageSize == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetPageSize())
	return n
}

func (x *ProductFullReductionListReq) sizeField3() (n int) {
	if x.ProductId == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetProductId())
	return n
}

func (x *ProductFullReductionListResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ProductFullReductionListResp) sizeField1() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetTotal())
	return n
}

func (x *ProductFullReductionListResp) sizeField2() (n int) {
	if x.List == nil {
		return n
	}
	for i := range x.GetList() {
		n += fastpb.SizeMessage(2, x.GetList()[i])
	}
	return n
}

func (x *ProductFullReductionUpdateReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ProductFullReductionUpdateReq) sizeField1() (n int) {
	if x.ProductFullReduction == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetProductFullReduction())
	return n
}

func (x *ProductFullReductionUpdateResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ProductFullReductionUpdateResp) sizeField1() (n int) {
	if x.Pong == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPong())
	return n
}

func (x *ProductFullReductionDeleteReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ProductFullReductionDeleteReq) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *ProductFullReductionDeleteResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ProductFullReductionDeleteResp) sizeField1() (n int) {
	if x.Pong == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPong())
	return n
}

var fieldIDToName_BaseProductFullReduction = map[int32]string{
	1: "Id",
	2: "ProductId",
	3: "FullPrice",
	4: "ReducePrice",
}

var fieldIDToName_ProductFullReductionAddReq = map[int32]string{
	1: "ProductFullReduction",
}

var fieldIDToName_ProductFullReductionAddResp = map[int32]string{
	1: "Pong",
}

var fieldIDToName_ProductFullReductionListReq = map[int32]string{
	1: "Current",
	2: "PageSize",
	3: "ProductId",
}

var fieldIDToName_ProductFullReductionListResp = map[int32]string{
	1: "Total",
	2: "List",
}

var fieldIDToName_ProductFullReductionUpdateReq = map[int32]string{
	1: "ProductFullReduction",
}

var fieldIDToName_ProductFullReductionUpdateResp = map[int32]string{
	1: "Pong",
}

var fieldIDToName_ProductFullReductionDeleteReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_ProductFullReductionDeleteResp = map[int32]string{
	1: "Pong",
}
