// Code generated by Kitex v0.9.0. DO NOT EDIT.

package skustockservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	sku_stock "github.com/yuanyp8/wxcommerce/shared/kitex_gen/pms/sku_stock"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"SkuStockAdd": kitex.NewMethodInfo(
		skuStockAddHandler,
		newSkuStockAddArgs,
		newSkuStockAddResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SkuStockList": kitex.NewMethodInfo(
		skuStockListHandler,
		newSkuStockListArgs,
		newSkuStockListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SkuStockUpdate": kitex.NewMethodInfo(
		skuStockUpdateHandler,
		newSkuStockUpdateArgs,
		newSkuStockUpdateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SkuStockDelete": kitex.NewMethodInfo(
		skuStockDeleteHandler,
		newSkuStockDeleteArgs,
		newSkuStockDeleteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ReleaseSkuStockLock": kitex.NewMethodInfo(
		releaseSkuStockLockHandler,
		newReleaseSkuStockLockArgs,
		newReleaseSkuStockLockResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"LockSkuStockLock": kitex.NewMethodInfo(
		lockSkuStockLockHandler,
		newLockSkuStockLockArgs,
		newLockSkuStockLockResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"QuerySkuStockByProductSkuId": kitex.NewMethodInfo(
		querySkuStockByProductSkuIdHandler,
		newQuerySkuStockByProductSkuIdArgs,
		newQuerySkuStockByProductSkuIdResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	skuStockServiceServiceInfo                = NewServiceInfo()
	skuStockServiceServiceInfoForClient       = NewServiceInfoForClient()
	skuStockServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return skuStockServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return skuStockServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return skuStockServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "SkuStockService"
	handlerType := (*sku_stock.SkuStockService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "pms",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.0",
		Extra:           extra,
	}
	return svcInfo
}

func skuStockAddHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(sku_stock.SkuStockAddReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(sku_stock.SkuStockService).SkuStockAdd(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SkuStockAddArgs:
		success, err := handler.(sku_stock.SkuStockService).SkuStockAdd(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SkuStockAddResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSkuStockAddArgs() interface{} {
	return &SkuStockAddArgs{}
}

func newSkuStockAddResult() interface{} {
	return &SkuStockAddResult{}
}

type SkuStockAddArgs struct {
	Req *sku_stock.SkuStockAddReq
}

func (p *SkuStockAddArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(sku_stock.SkuStockAddReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SkuStockAddArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SkuStockAddArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SkuStockAddArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SkuStockAddArgs) Unmarshal(in []byte) error {
	msg := new(sku_stock.SkuStockAddReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SkuStockAddArgs_Req_DEFAULT *sku_stock.SkuStockAddReq

func (p *SkuStockAddArgs) GetReq() *sku_stock.SkuStockAddReq {
	if !p.IsSetReq() {
		return SkuStockAddArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SkuStockAddArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SkuStockAddArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SkuStockAddResult struct {
	Success *sku_stock.SkuStockAddResp
}

var SkuStockAddResult_Success_DEFAULT *sku_stock.SkuStockAddResp

func (p *SkuStockAddResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(sku_stock.SkuStockAddResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SkuStockAddResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SkuStockAddResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SkuStockAddResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SkuStockAddResult) Unmarshal(in []byte) error {
	msg := new(sku_stock.SkuStockAddResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SkuStockAddResult) GetSuccess() *sku_stock.SkuStockAddResp {
	if !p.IsSetSuccess() {
		return SkuStockAddResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SkuStockAddResult) SetSuccess(x interface{}) {
	p.Success = x.(*sku_stock.SkuStockAddResp)
}

func (p *SkuStockAddResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SkuStockAddResult) GetResult() interface{} {
	return p.Success
}

func skuStockListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(sku_stock.SkuStockListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(sku_stock.SkuStockService).SkuStockList(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SkuStockListArgs:
		success, err := handler.(sku_stock.SkuStockService).SkuStockList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SkuStockListResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSkuStockListArgs() interface{} {
	return &SkuStockListArgs{}
}

func newSkuStockListResult() interface{} {
	return &SkuStockListResult{}
}

type SkuStockListArgs struct {
	Req *sku_stock.SkuStockListReq
}

func (p *SkuStockListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(sku_stock.SkuStockListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SkuStockListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SkuStockListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SkuStockListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SkuStockListArgs) Unmarshal(in []byte) error {
	msg := new(sku_stock.SkuStockListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SkuStockListArgs_Req_DEFAULT *sku_stock.SkuStockListReq

func (p *SkuStockListArgs) GetReq() *sku_stock.SkuStockListReq {
	if !p.IsSetReq() {
		return SkuStockListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SkuStockListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SkuStockListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SkuStockListResult struct {
	Success *sku_stock.SkuStockListResp
}

var SkuStockListResult_Success_DEFAULT *sku_stock.SkuStockListResp

func (p *SkuStockListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(sku_stock.SkuStockListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SkuStockListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SkuStockListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SkuStockListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SkuStockListResult) Unmarshal(in []byte) error {
	msg := new(sku_stock.SkuStockListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SkuStockListResult) GetSuccess() *sku_stock.SkuStockListResp {
	if !p.IsSetSuccess() {
		return SkuStockListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SkuStockListResult) SetSuccess(x interface{}) {
	p.Success = x.(*sku_stock.SkuStockListResp)
}

func (p *SkuStockListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SkuStockListResult) GetResult() interface{} {
	return p.Success
}

func skuStockUpdateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(sku_stock.SkuStockUpdateReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(sku_stock.SkuStockService).SkuStockUpdate(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SkuStockUpdateArgs:
		success, err := handler.(sku_stock.SkuStockService).SkuStockUpdate(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SkuStockUpdateResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSkuStockUpdateArgs() interface{} {
	return &SkuStockUpdateArgs{}
}

func newSkuStockUpdateResult() interface{} {
	return &SkuStockUpdateResult{}
}

type SkuStockUpdateArgs struct {
	Req *sku_stock.SkuStockUpdateReq
}

func (p *SkuStockUpdateArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(sku_stock.SkuStockUpdateReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SkuStockUpdateArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SkuStockUpdateArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SkuStockUpdateArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SkuStockUpdateArgs) Unmarshal(in []byte) error {
	msg := new(sku_stock.SkuStockUpdateReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SkuStockUpdateArgs_Req_DEFAULT *sku_stock.SkuStockUpdateReq

func (p *SkuStockUpdateArgs) GetReq() *sku_stock.SkuStockUpdateReq {
	if !p.IsSetReq() {
		return SkuStockUpdateArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SkuStockUpdateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SkuStockUpdateArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SkuStockUpdateResult struct {
	Success *sku_stock.SkuStockUpdateResp
}

var SkuStockUpdateResult_Success_DEFAULT *sku_stock.SkuStockUpdateResp

func (p *SkuStockUpdateResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(sku_stock.SkuStockUpdateResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SkuStockUpdateResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SkuStockUpdateResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SkuStockUpdateResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SkuStockUpdateResult) Unmarshal(in []byte) error {
	msg := new(sku_stock.SkuStockUpdateResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SkuStockUpdateResult) GetSuccess() *sku_stock.SkuStockUpdateResp {
	if !p.IsSetSuccess() {
		return SkuStockUpdateResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SkuStockUpdateResult) SetSuccess(x interface{}) {
	p.Success = x.(*sku_stock.SkuStockUpdateResp)
}

func (p *SkuStockUpdateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SkuStockUpdateResult) GetResult() interface{} {
	return p.Success
}

func skuStockDeleteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(sku_stock.SkuStockDeleteReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(sku_stock.SkuStockService).SkuStockDelete(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SkuStockDeleteArgs:
		success, err := handler.(sku_stock.SkuStockService).SkuStockDelete(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SkuStockDeleteResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSkuStockDeleteArgs() interface{} {
	return &SkuStockDeleteArgs{}
}

func newSkuStockDeleteResult() interface{} {
	return &SkuStockDeleteResult{}
}

type SkuStockDeleteArgs struct {
	Req *sku_stock.SkuStockDeleteReq
}

func (p *SkuStockDeleteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(sku_stock.SkuStockDeleteReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SkuStockDeleteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SkuStockDeleteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SkuStockDeleteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SkuStockDeleteArgs) Unmarshal(in []byte) error {
	msg := new(sku_stock.SkuStockDeleteReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SkuStockDeleteArgs_Req_DEFAULT *sku_stock.SkuStockDeleteReq

func (p *SkuStockDeleteArgs) GetReq() *sku_stock.SkuStockDeleteReq {
	if !p.IsSetReq() {
		return SkuStockDeleteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SkuStockDeleteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SkuStockDeleteArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SkuStockDeleteResult struct {
	Success *sku_stock.SkuStockDeleteResp
}

var SkuStockDeleteResult_Success_DEFAULT *sku_stock.SkuStockDeleteResp

func (p *SkuStockDeleteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(sku_stock.SkuStockDeleteResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SkuStockDeleteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SkuStockDeleteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SkuStockDeleteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SkuStockDeleteResult) Unmarshal(in []byte) error {
	msg := new(sku_stock.SkuStockDeleteResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SkuStockDeleteResult) GetSuccess() *sku_stock.SkuStockDeleteResp {
	if !p.IsSetSuccess() {
		return SkuStockDeleteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SkuStockDeleteResult) SetSuccess(x interface{}) {
	p.Success = x.(*sku_stock.SkuStockDeleteResp)
}

func (p *SkuStockDeleteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SkuStockDeleteResult) GetResult() interface{} {
	return p.Success
}

func releaseSkuStockLockHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(sku_stock.ReleaseSkuStockLockReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(sku_stock.SkuStockService).ReleaseSkuStockLock(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ReleaseSkuStockLockArgs:
		success, err := handler.(sku_stock.SkuStockService).ReleaseSkuStockLock(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ReleaseSkuStockLockResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newReleaseSkuStockLockArgs() interface{} {
	return &ReleaseSkuStockLockArgs{}
}

func newReleaseSkuStockLockResult() interface{} {
	return &ReleaseSkuStockLockResult{}
}

type ReleaseSkuStockLockArgs struct {
	Req *sku_stock.ReleaseSkuStockLockReq
}

func (p *ReleaseSkuStockLockArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(sku_stock.ReleaseSkuStockLockReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ReleaseSkuStockLockArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ReleaseSkuStockLockArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ReleaseSkuStockLockArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ReleaseSkuStockLockArgs) Unmarshal(in []byte) error {
	msg := new(sku_stock.ReleaseSkuStockLockReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ReleaseSkuStockLockArgs_Req_DEFAULT *sku_stock.ReleaseSkuStockLockReq

func (p *ReleaseSkuStockLockArgs) GetReq() *sku_stock.ReleaseSkuStockLockReq {
	if !p.IsSetReq() {
		return ReleaseSkuStockLockArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ReleaseSkuStockLockArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ReleaseSkuStockLockArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ReleaseSkuStockLockResult struct {
	Success *sku_stock.ReleaseSkuStockLockResp
}

var ReleaseSkuStockLockResult_Success_DEFAULT *sku_stock.ReleaseSkuStockLockResp

func (p *ReleaseSkuStockLockResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(sku_stock.ReleaseSkuStockLockResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ReleaseSkuStockLockResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ReleaseSkuStockLockResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ReleaseSkuStockLockResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ReleaseSkuStockLockResult) Unmarshal(in []byte) error {
	msg := new(sku_stock.ReleaseSkuStockLockResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ReleaseSkuStockLockResult) GetSuccess() *sku_stock.ReleaseSkuStockLockResp {
	if !p.IsSetSuccess() {
		return ReleaseSkuStockLockResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ReleaseSkuStockLockResult) SetSuccess(x interface{}) {
	p.Success = x.(*sku_stock.ReleaseSkuStockLockResp)
}

func (p *ReleaseSkuStockLockResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ReleaseSkuStockLockResult) GetResult() interface{} {
	return p.Success
}

func lockSkuStockLockHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(sku_stock.LockSkuStockLockReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(sku_stock.SkuStockService).LockSkuStockLock(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *LockSkuStockLockArgs:
		success, err := handler.(sku_stock.SkuStockService).LockSkuStockLock(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*LockSkuStockLockResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newLockSkuStockLockArgs() interface{} {
	return &LockSkuStockLockArgs{}
}

func newLockSkuStockLockResult() interface{} {
	return &LockSkuStockLockResult{}
}

type LockSkuStockLockArgs struct {
	Req *sku_stock.LockSkuStockLockReq
}

func (p *LockSkuStockLockArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(sku_stock.LockSkuStockLockReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *LockSkuStockLockArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *LockSkuStockLockArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *LockSkuStockLockArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *LockSkuStockLockArgs) Unmarshal(in []byte) error {
	msg := new(sku_stock.LockSkuStockLockReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var LockSkuStockLockArgs_Req_DEFAULT *sku_stock.LockSkuStockLockReq

func (p *LockSkuStockLockArgs) GetReq() *sku_stock.LockSkuStockLockReq {
	if !p.IsSetReq() {
		return LockSkuStockLockArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *LockSkuStockLockArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LockSkuStockLockArgs) GetFirstArgument() interface{} {
	return p.Req
}

type LockSkuStockLockResult struct {
	Success *sku_stock.LockSkuStockLockResp
}

var LockSkuStockLockResult_Success_DEFAULT *sku_stock.LockSkuStockLockResp

func (p *LockSkuStockLockResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(sku_stock.LockSkuStockLockResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *LockSkuStockLockResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *LockSkuStockLockResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *LockSkuStockLockResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *LockSkuStockLockResult) Unmarshal(in []byte) error {
	msg := new(sku_stock.LockSkuStockLockResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *LockSkuStockLockResult) GetSuccess() *sku_stock.LockSkuStockLockResp {
	if !p.IsSetSuccess() {
		return LockSkuStockLockResult_Success_DEFAULT
	}
	return p.Success
}

func (p *LockSkuStockLockResult) SetSuccess(x interface{}) {
	p.Success = x.(*sku_stock.LockSkuStockLockResp)
}

func (p *LockSkuStockLockResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LockSkuStockLockResult) GetResult() interface{} {
	return p.Success
}

func querySkuStockByProductSkuIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(sku_stock.QuerySkuStockByProductSkuIdReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(sku_stock.SkuStockService).QuerySkuStockByProductSkuId(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *QuerySkuStockByProductSkuIdArgs:
		success, err := handler.(sku_stock.SkuStockService).QuerySkuStockByProductSkuId(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*QuerySkuStockByProductSkuIdResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newQuerySkuStockByProductSkuIdArgs() interface{} {
	return &QuerySkuStockByProductSkuIdArgs{}
}

func newQuerySkuStockByProductSkuIdResult() interface{} {
	return &QuerySkuStockByProductSkuIdResult{}
}

type QuerySkuStockByProductSkuIdArgs struct {
	Req *sku_stock.QuerySkuStockByProductSkuIdReq
}

func (p *QuerySkuStockByProductSkuIdArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(sku_stock.QuerySkuStockByProductSkuIdReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *QuerySkuStockByProductSkuIdArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *QuerySkuStockByProductSkuIdArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *QuerySkuStockByProductSkuIdArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *QuerySkuStockByProductSkuIdArgs) Unmarshal(in []byte) error {
	msg := new(sku_stock.QuerySkuStockByProductSkuIdReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var QuerySkuStockByProductSkuIdArgs_Req_DEFAULT *sku_stock.QuerySkuStockByProductSkuIdReq

func (p *QuerySkuStockByProductSkuIdArgs) GetReq() *sku_stock.QuerySkuStockByProductSkuIdReq {
	if !p.IsSetReq() {
		return QuerySkuStockByProductSkuIdArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *QuerySkuStockByProductSkuIdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *QuerySkuStockByProductSkuIdArgs) GetFirstArgument() interface{} {
	return p.Req
}

type QuerySkuStockByProductSkuIdResult struct {
	Success *sku_stock.BaseSkuStock
}

var QuerySkuStockByProductSkuIdResult_Success_DEFAULT *sku_stock.BaseSkuStock

func (p *QuerySkuStockByProductSkuIdResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(sku_stock.BaseSkuStock)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *QuerySkuStockByProductSkuIdResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *QuerySkuStockByProductSkuIdResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *QuerySkuStockByProductSkuIdResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *QuerySkuStockByProductSkuIdResult) Unmarshal(in []byte) error {
	msg := new(sku_stock.BaseSkuStock)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *QuerySkuStockByProductSkuIdResult) GetSuccess() *sku_stock.BaseSkuStock {
	if !p.IsSetSuccess() {
		return QuerySkuStockByProductSkuIdResult_Success_DEFAULT
	}
	return p.Success
}

func (p *QuerySkuStockByProductSkuIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*sku_stock.BaseSkuStock)
}

func (p *QuerySkuStockByProductSkuIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QuerySkuStockByProductSkuIdResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SkuStockAdd(ctx context.Context, Req *sku_stock.SkuStockAddReq) (r *sku_stock.SkuStockAddResp, err error) {
	var _args SkuStockAddArgs
	_args.Req = Req
	var _result SkuStockAddResult
	if err = p.c.Call(ctx, "SkuStockAdd", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SkuStockList(ctx context.Context, Req *sku_stock.SkuStockListReq) (r *sku_stock.SkuStockListResp, err error) {
	var _args SkuStockListArgs
	_args.Req = Req
	var _result SkuStockListResult
	if err = p.c.Call(ctx, "SkuStockList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SkuStockUpdate(ctx context.Context, Req *sku_stock.SkuStockUpdateReq) (r *sku_stock.SkuStockUpdateResp, err error) {
	var _args SkuStockUpdateArgs
	_args.Req = Req
	var _result SkuStockUpdateResult
	if err = p.c.Call(ctx, "SkuStockUpdate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SkuStockDelete(ctx context.Context, Req *sku_stock.SkuStockDeleteReq) (r *sku_stock.SkuStockDeleteResp, err error) {
	var _args SkuStockDeleteArgs
	_args.Req = Req
	var _result SkuStockDeleteResult
	if err = p.c.Call(ctx, "SkuStockDelete", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ReleaseSkuStockLock(ctx context.Context, Req *sku_stock.ReleaseSkuStockLockReq) (r *sku_stock.ReleaseSkuStockLockResp, err error) {
	var _args ReleaseSkuStockLockArgs
	_args.Req = Req
	var _result ReleaseSkuStockLockResult
	if err = p.c.Call(ctx, "ReleaseSkuStockLock", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LockSkuStockLock(ctx context.Context, Req *sku_stock.LockSkuStockLockReq) (r *sku_stock.LockSkuStockLockResp, err error) {
	var _args LockSkuStockLockArgs
	_args.Req = Req
	var _result LockSkuStockLockResult
	if err = p.c.Call(ctx, "LockSkuStockLock", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QuerySkuStockByProductSkuId(ctx context.Context, Req *sku_stock.QuerySkuStockByProductSkuIdReq) (r *sku_stock.BaseSkuStock, err error) {
	var _args QuerySkuStockByProductSkuIdArgs
	_args.Req = Req
	var _result QuerySkuStockByProductSkuIdResult
	if err = p.c.Call(ctx, "QuerySkuStockByProductSkuId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
