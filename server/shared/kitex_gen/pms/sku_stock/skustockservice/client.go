// Code generated by Kitex v0.9.0. DO NOT EDIT.

package skustockservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	sku_stock "github.com/yuanyp8/wxcommerce/shared/kitex_gen/pms/sku_stock"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	SkuStockAdd(ctx context.Context, Req *sku_stock.SkuStockAddReq, callOptions ...callopt.Option) (r *sku_stock.SkuStockAddResp, err error)
	SkuStockList(ctx context.Context, Req *sku_stock.SkuStockListReq, callOptions ...callopt.Option) (r *sku_stock.SkuStockListResp, err error)
	SkuStockUpdate(ctx context.Context, Req *sku_stock.SkuStockUpdateReq, callOptions ...callopt.Option) (r *sku_stock.SkuStockUpdateResp, err error)
	SkuStockDelete(ctx context.Context, Req *sku_stock.SkuStockDeleteReq, callOptions ...callopt.Option) (r *sku_stock.SkuStockDeleteResp, err error)
	ReleaseSkuStockLock(ctx context.Context, Req *sku_stock.ReleaseSkuStockLockReq, callOptions ...callopt.Option) (r *sku_stock.ReleaseSkuStockLockResp, err error)
	LockSkuStockLock(ctx context.Context, Req *sku_stock.LockSkuStockLockReq, callOptions ...callopt.Option) (r *sku_stock.LockSkuStockLockResp, err error)
	QuerySkuStockByProductSkuId(ctx context.Context, Req *sku_stock.QuerySkuStockByProductSkuIdReq, callOptions ...callopt.Option) (r *sku_stock.BaseSkuStock, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kSkuStockServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kSkuStockServiceClient struct {
	*kClient
}

func (p *kSkuStockServiceClient) SkuStockAdd(ctx context.Context, Req *sku_stock.SkuStockAddReq, callOptions ...callopt.Option) (r *sku_stock.SkuStockAddResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SkuStockAdd(ctx, Req)
}

func (p *kSkuStockServiceClient) SkuStockList(ctx context.Context, Req *sku_stock.SkuStockListReq, callOptions ...callopt.Option) (r *sku_stock.SkuStockListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SkuStockList(ctx, Req)
}

func (p *kSkuStockServiceClient) SkuStockUpdate(ctx context.Context, Req *sku_stock.SkuStockUpdateReq, callOptions ...callopt.Option) (r *sku_stock.SkuStockUpdateResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SkuStockUpdate(ctx, Req)
}

func (p *kSkuStockServiceClient) SkuStockDelete(ctx context.Context, Req *sku_stock.SkuStockDeleteReq, callOptions ...callopt.Option) (r *sku_stock.SkuStockDeleteResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SkuStockDelete(ctx, Req)
}

func (p *kSkuStockServiceClient) ReleaseSkuStockLock(ctx context.Context, Req *sku_stock.ReleaseSkuStockLockReq, callOptions ...callopt.Option) (r *sku_stock.ReleaseSkuStockLockResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ReleaseSkuStockLock(ctx, Req)
}

func (p *kSkuStockServiceClient) LockSkuStockLock(ctx context.Context, Req *sku_stock.LockSkuStockLockReq, callOptions ...callopt.Option) (r *sku_stock.LockSkuStockLockResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.LockSkuStockLock(ctx, Req)
}

func (p *kSkuStockServiceClient) QuerySkuStockByProductSkuId(ctx context.Context, Req *sku_stock.QuerySkuStockByProductSkuIdReq, callOptions ...callopt.Option) (r *sku_stock.BaseSkuStock, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QuerySkuStockByProductSkuId(ctx, Req)
}
