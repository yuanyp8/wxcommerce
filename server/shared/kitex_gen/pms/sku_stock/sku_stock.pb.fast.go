// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package sku_stock

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *BaseSkuStock) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BaseSkuStock[number], err)
}

func (x *BaseSkuStock) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseSkuStock) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ProductId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseSkuStock) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.SkuCode, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseSkuStock) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Price, offset, err = fastpb.ReadFloat(buf, _type)
	return offset, err
}

func (x *BaseSkuStock) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Stock, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseSkuStock) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.LowStock, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseSkuStock) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Pic, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseSkuStock) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Sale, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseSkuStock) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.PromotionPrice, offset, err = fastpb.ReadFloat(buf, _type)
	return offset, err
}

func (x *BaseSkuStock) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.LockStock, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseSkuStock) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.SpData, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SkuStockAddReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SkuStockAddReq[number], err)
}

func (x *SkuStockAddReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseSkuStock
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.SkuStock = &v
	return offset, nil
}

func (x *SkuStockAddResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SkuStockAddResp[number], err)
}

func (x *SkuStockAddResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pong, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SkuStockListReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SkuStockListReq[number], err)
}

func (x *SkuStockListReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ProductId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SkuStockListResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SkuStockListResp[number], err)
}

func (x *SkuStockListResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SkuStockListResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v BaseSkuStock
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.List = append(x.List, &v)
	return offset, nil
}

func (x *SkuStockUpdateReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SkuStockUpdateReq[number], err)
}

func (x *SkuStockUpdateReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseSkuStock
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.SkuStock = &v
	return offset, nil
}

func (x *SkuStockUpdateResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SkuStockUpdateResp[number], err)
}

func (x *SkuStockUpdateResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pong, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SkuStockDeleteReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SkuStockDeleteReq[number], err)
}

func (x *SkuStockDeleteReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int64
			v, offset, err = fastpb.ReadInt64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.Ids = append(x.Ids, v)
			return offset, err
		})
	return offset, err
}

func (x *SkuStockDeleteResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SkuStockDeleteResp[number], err)
}

func (x *SkuStockDeleteResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pong, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ReleaseSkuStockLockReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ReleaseSkuStockLockReq[number], err)
}

func (x *ReleaseSkuStockLockReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v ReleaseSkuStockLockData
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Data = append(x.Data, &v)
	return offset, nil
}

func (x *ReleaseSkuStockLockData) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ReleaseSkuStockLockData[number], err)
}

func (x *ReleaseSkuStockLockData) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ProductSkuId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ReleaseSkuStockLockData) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ProductQuantity, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ReleaseSkuStockLockResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ReleaseSkuStockLockResp[number], err)
}

func (x *ReleaseSkuStockLockResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pong, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LockSkuStockLockReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_LockSkuStockLockReq[number], err)
}

func (x *LockSkuStockLockReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v LockSkuStockLockData
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Data = append(x.Data, &v)
	return offset, nil
}

func (x *LockSkuStockLockData) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_LockSkuStockLockData[number], err)
}

func (x *LockSkuStockLockData) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ProductSkuId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *LockSkuStockLockData) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ProductQuantity, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *LockSkuStockLockResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_LockSkuStockLockResp[number], err)
}

func (x *LockSkuStockLockResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pong, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *QuerySkuStockByProductSkuIdReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_QuerySkuStockByProductSkuIdReq[number], err)
}

func (x *QuerySkuStockByProductSkuIdReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ProductSkuId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseSkuStock) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	return offset
}

func (x *BaseSkuStock) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *BaseSkuStock) fastWriteField2(buf []byte) (offset int) {
	if x.ProductId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetProductId())
	return offset
}

func (x *BaseSkuStock) fastWriteField3(buf []byte) (offset int) {
	if x.SkuCode == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetSkuCode())
	return offset
}

func (x *BaseSkuStock) fastWriteField4(buf []byte) (offset int) {
	if x.Price == 0 {
		return offset
	}
	offset += fastpb.WriteFloat(buf[offset:], 4, x.GetPrice())
	return offset
}

func (x *BaseSkuStock) fastWriteField5(buf []byte) (offset int) {
	if x.Stock == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetStock())
	return offset
}

func (x *BaseSkuStock) fastWriteField6(buf []byte) (offset int) {
	if x.LowStock == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetLowStock())
	return offset
}

func (x *BaseSkuStock) fastWriteField7(buf []byte) (offset int) {
	if x.Pic == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetPic())
	return offset
}

func (x *BaseSkuStock) fastWriteField8(buf []byte) (offset int) {
	if x.Sale == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetSale())
	return offset
}

func (x *BaseSkuStock) fastWriteField9(buf []byte) (offset int) {
	if x.PromotionPrice == 0 {
		return offset
	}
	offset += fastpb.WriteFloat(buf[offset:], 9, x.GetPromotionPrice())
	return offset
}

func (x *BaseSkuStock) fastWriteField10(buf []byte) (offset int) {
	if x.LockStock == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 10, x.GetLockStock())
	return offset
}

func (x *BaseSkuStock) fastWriteField11(buf []byte) (offset int) {
	if x.SpData == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 11, x.GetSpData())
	return offset
}

func (x *SkuStockAddReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *SkuStockAddReq) fastWriteField1(buf []byte) (offset int) {
	if x.SkuStock == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetSkuStock())
	return offset
}

func (x *SkuStockAddResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *SkuStockAddResp) fastWriteField1(buf []byte) (offset int) {
	if x.Pong == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPong())
	return offset
}

func (x *SkuStockListReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *SkuStockListReq) fastWriteField1(buf []byte) (offset int) {
	if x.ProductId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetProductId())
	return offset
}

func (x *SkuStockListResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *SkuStockListResp) fastWriteField1(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetTotal())
	return offset
}

func (x *SkuStockListResp) fastWriteField2(buf []byte) (offset int) {
	if x.List == nil {
		return offset
	}
	for i := range x.GetList() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetList()[i])
	}
	return offset
}

func (x *SkuStockUpdateReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *SkuStockUpdateReq) fastWriteField1(buf []byte) (offset int) {
	if x.SkuStock == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetSkuStock())
	return offset
}

func (x *SkuStockUpdateResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *SkuStockUpdateResp) fastWriteField1(buf []byte) (offset int) {
	if x.Pong == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPong())
	return offset
}

func (x *SkuStockDeleteReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *SkuStockDeleteReq) fastWriteField1(buf []byte) (offset int) {
	if len(x.Ids) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 1, len(x.GetIds()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, x.GetIds()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *SkuStockDeleteResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *SkuStockDeleteResp) fastWriteField1(buf []byte) (offset int) {
	if x.Pong == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPong())
	return offset
}

func (x *ReleaseSkuStockLockReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ReleaseSkuStockLockReq) fastWriteField1(buf []byte) (offset int) {
	if x.Data == nil {
		return offset
	}
	for i := range x.GetData() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetData()[i])
	}
	return offset
}

func (x *ReleaseSkuStockLockData) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ReleaseSkuStockLockData) fastWriteField1(buf []byte) (offset int) {
	if x.ProductSkuId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetProductSkuId())
	return offset
}

func (x *ReleaseSkuStockLockData) fastWriteField2(buf []byte) (offset int) {
	if x.ProductQuantity == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetProductQuantity())
	return offset
}

func (x *ReleaseSkuStockLockResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ReleaseSkuStockLockResp) fastWriteField1(buf []byte) (offset int) {
	if x.Pong == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPong())
	return offset
}

func (x *LockSkuStockLockReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *LockSkuStockLockReq) fastWriteField1(buf []byte) (offset int) {
	if x.Data == nil {
		return offset
	}
	for i := range x.GetData() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetData()[i])
	}
	return offset
}

func (x *LockSkuStockLockData) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *LockSkuStockLockData) fastWriteField1(buf []byte) (offset int) {
	if x.ProductSkuId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetProductSkuId())
	return offset
}

func (x *LockSkuStockLockData) fastWriteField2(buf []byte) (offset int) {
	if x.ProductQuantity == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetProductQuantity())
	return offset
}

func (x *LockSkuStockLockResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *LockSkuStockLockResp) fastWriteField1(buf []byte) (offset int) {
	if x.Pong == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPong())
	return offset
}

func (x *QuerySkuStockByProductSkuIdReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *QuerySkuStockByProductSkuIdReq) fastWriteField1(buf []byte) (offset int) {
	if x.ProductSkuId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetProductSkuId())
	return offset
}

func (x *BaseSkuStock) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	return n
}

func (x *BaseSkuStock) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *BaseSkuStock) sizeField2() (n int) {
	if x.ProductId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetProductId())
	return n
}

func (x *BaseSkuStock) sizeField3() (n int) {
	if x.SkuCode == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetSkuCode())
	return n
}

func (x *BaseSkuStock) sizeField4() (n int) {
	if x.Price == 0 {
		return n
	}
	n += fastpb.SizeFloat(4, x.GetPrice())
	return n
}

func (x *BaseSkuStock) sizeField5() (n int) {
	if x.Stock == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetStock())
	return n
}

func (x *BaseSkuStock) sizeField6() (n int) {
	if x.LowStock == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetLowStock())
	return n
}

func (x *BaseSkuStock) sizeField7() (n int) {
	if x.Pic == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetPic())
	return n
}

func (x *BaseSkuStock) sizeField8() (n int) {
	if x.Sale == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetSale())
	return n
}

func (x *BaseSkuStock) sizeField9() (n int) {
	if x.PromotionPrice == 0 {
		return n
	}
	n += fastpb.SizeFloat(9, x.GetPromotionPrice())
	return n
}

func (x *BaseSkuStock) sizeField10() (n int) {
	if x.LockStock == 0 {
		return n
	}
	n += fastpb.SizeInt64(10, x.GetLockStock())
	return n
}

func (x *BaseSkuStock) sizeField11() (n int) {
	if x.SpData == "" {
		return n
	}
	n += fastpb.SizeString(11, x.GetSpData())
	return n
}

func (x *SkuStockAddReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *SkuStockAddReq) sizeField1() (n int) {
	if x.SkuStock == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetSkuStock())
	return n
}

func (x *SkuStockAddResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *SkuStockAddResp) sizeField1() (n int) {
	if x.Pong == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPong())
	return n
}

func (x *SkuStockListReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *SkuStockListReq) sizeField1() (n int) {
	if x.ProductId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetProductId())
	return n
}

func (x *SkuStockListResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *SkuStockListResp) sizeField1() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetTotal())
	return n
}

func (x *SkuStockListResp) sizeField2() (n int) {
	if x.List == nil {
		return n
	}
	for i := range x.GetList() {
		n += fastpb.SizeMessage(2, x.GetList()[i])
	}
	return n
}

func (x *SkuStockUpdateReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *SkuStockUpdateReq) sizeField1() (n int) {
	if x.SkuStock == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetSkuStock())
	return n
}

func (x *SkuStockUpdateResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *SkuStockUpdateResp) sizeField1() (n int) {
	if x.Pong == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPong())
	return n
}

func (x *SkuStockDeleteReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *SkuStockDeleteReq) sizeField1() (n int) {
	if len(x.Ids) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(1, len(x.GetIds()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt64(numTagOrKey, x.GetIds()[numIdxOrVal])
			return n
		})
	return n
}

func (x *SkuStockDeleteResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *SkuStockDeleteResp) sizeField1() (n int) {
	if x.Pong == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPong())
	return n
}

func (x *ReleaseSkuStockLockReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ReleaseSkuStockLockReq) sizeField1() (n int) {
	if x.Data == nil {
		return n
	}
	for i := range x.GetData() {
		n += fastpb.SizeMessage(1, x.GetData()[i])
	}
	return n
}

func (x *ReleaseSkuStockLockData) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ReleaseSkuStockLockData) sizeField1() (n int) {
	if x.ProductSkuId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetProductSkuId())
	return n
}

func (x *ReleaseSkuStockLockData) sizeField2() (n int) {
	if x.ProductQuantity == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetProductQuantity())
	return n
}

func (x *ReleaseSkuStockLockResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ReleaseSkuStockLockResp) sizeField1() (n int) {
	if x.Pong == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPong())
	return n
}

func (x *LockSkuStockLockReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *LockSkuStockLockReq) sizeField1() (n int) {
	if x.Data == nil {
		return n
	}
	for i := range x.GetData() {
		n += fastpb.SizeMessage(1, x.GetData()[i])
	}
	return n
}

func (x *LockSkuStockLockData) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *LockSkuStockLockData) sizeField1() (n int) {
	if x.ProductSkuId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetProductSkuId())
	return n
}

func (x *LockSkuStockLockData) sizeField2() (n int) {
	if x.ProductQuantity == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetProductQuantity())
	return n
}

func (x *LockSkuStockLockResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *LockSkuStockLockResp) sizeField1() (n int) {
	if x.Pong == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPong())
	return n
}

func (x *QuerySkuStockByProductSkuIdReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *QuerySkuStockByProductSkuIdReq) sizeField1() (n int) {
	if x.ProductSkuId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetProductSkuId())
	return n
}

var fieldIDToName_BaseSkuStock = map[int32]string{
	1:  "Id",
	2:  "ProductId",
	3:  "SkuCode",
	4:  "Price",
	5:  "Stock",
	6:  "LowStock",
	7:  "Pic",
	8:  "Sale",
	9:  "PromotionPrice",
	10: "LockStock",
	11: "SpData",
}

var fieldIDToName_SkuStockAddReq = map[int32]string{
	1: "SkuStock",
}

var fieldIDToName_SkuStockAddResp = map[int32]string{
	1: "Pong",
}

var fieldIDToName_SkuStockListReq = map[int32]string{
	1: "ProductId",
}

var fieldIDToName_SkuStockListResp = map[int32]string{
	1: "Total",
	2: "List",
}

var fieldIDToName_SkuStockUpdateReq = map[int32]string{
	1: "SkuStock",
}

var fieldIDToName_SkuStockUpdateResp = map[int32]string{
	1: "Pong",
}

var fieldIDToName_SkuStockDeleteReq = map[int32]string{
	1: "Ids",
}

var fieldIDToName_SkuStockDeleteResp = map[int32]string{
	1: "Pong",
}

var fieldIDToName_ReleaseSkuStockLockReq = map[int32]string{
	1: "Data",
}

var fieldIDToName_ReleaseSkuStockLockData = map[int32]string{
	1: "ProductSkuId",
	2: "ProductQuantity",
}

var fieldIDToName_ReleaseSkuStockLockResp = map[int32]string{
	1: "Pong",
}

var fieldIDToName_LockSkuStockLockReq = map[int32]string{
	1: "Data",
}

var fieldIDToName_LockSkuStockLockData = map[int32]string{
	1: "ProductSkuId",
	2: "ProductQuantity",
}

var fieldIDToName_LockSkuStockLockResp = map[int32]string{
	1: "Pong",
}

var fieldIDToName_QuerySkuStockByProductSkuIdReq = map[int32]string{
	1: "ProductSkuId",
}
