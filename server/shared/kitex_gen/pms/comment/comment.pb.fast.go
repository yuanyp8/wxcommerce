// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package comment

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *BaseComment) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 14:
		offset, err = x.fastReadField14(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 15:
		offset, err = x.fastReadField15(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BaseComment[number], err)
}

func (x *BaseComment) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *BaseComment) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ProductId, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *BaseComment) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.MemberNickName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseComment) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.ProductName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseComment) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Star, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseComment) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.MemberIp, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseComment) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseComment) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.ShowStatus, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseComment) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.ProductAttribute, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseComment) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.CollectCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseComment) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.ReadCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseComment) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.Content, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseComment) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	x.Pics, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseComment) fastReadField14(buf []byte, _type int8) (offset int, err error) {
	x.MemberIcon, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseComment) fastReadField15(buf []byte, _type int8) (offset int, err error) {
	x.ReplayCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CommentAddReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CommentAddReq[number], err)
}

func (x *CommentAddReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseComment
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Comment = &v
	return offset, nil
}

func (x *CommentAddResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CommentAddResp[number], err)
}

func (x *CommentAddResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pong, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CommentListReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CommentListReq[number], err)
}

func (x *CommentListReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Current, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CommentListReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.PageSize, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CommentListResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CommentListResp[number], err)
}

func (x *CommentListResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CommentListResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v BaseComment
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.List = append(x.List, &v)
	return offset, nil
}

func (x *CommentUpdateReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CommentUpdateReq[number], err)
}

func (x *CommentUpdateReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseComment
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Comment = &v
	return offset, nil
}

func (x *CommentUpdateResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CommentUpdateResp[number], err)
}

func (x *CommentUpdateResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pong, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CommentDeleteReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CommentDeleteReq[number], err)
}

func (x *CommentDeleteReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v uint64
			v, offset, err = fastpb.ReadUint64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.Ids = append(x.Ids, v)
			return offset, err
		})
	return offset, err
}

func (x *CommentDeleteResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CommentDeleteResp[number], err)
}

func (x *CommentDeleteResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pong, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseComment) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	offset += x.fastWriteField14(buf[offset:])
	offset += x.fastWriteField15(buf[offset:])
	return offset
}

func (x *BaseComment) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *BaseComment) fastWriteField2(buf []byte) (offset int) {
	if x.ProductId == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 2, x.GetProductId())
	return offset
}

func (x *BaseComment) fastWriteField3(buf []byte) (offset int) {
	if x.MemberNickName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetMemberNickName())
	return offset
}

func (x *BaseComment) fastWriteField4(buf []byte) (offset int) {
	if x.ProductName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetProductName())
	return offset
}

func (x *BaseComment) fastWriteField5(buf []byte) (offset int) {
	if x.Star == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetStar())
	return offset
}

func (x *BaseComment) fastWriteField6(buf []byte) (offset int) {
	if x.MemberIp == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetMemberIp())
	return offset
}

func (x *BaseComment) fastWriteField7(buf []byte) (offset int) {
	if x.CreateTime == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetCreateTime())
	return offset
}

func (x *BaseComment) fastWriteField8(buf []byte) (offset int) {
	if x.ShowStatus == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetShowStatus())
	return offset
}

func (x *BaseComment) fastWriteField9(buf []byte) (offset int) {
	if x.ProductAttribute == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 9, x.GetProductAttribute())
	return offset
}

func (x *BaseComment) fastWriteField10(buf []byte) (offset int) {
	if x.CollectCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 10, x.GetCollectCount())
	return offset
}

func (x *BaseComment) fastWriteField11(buf []byte) (offset int) {
	if x.ReadCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 11, x.GetReadCount())
	return offset
}

func (x *BaseComment) fastWriteField12(buf []byte) (offset int) {
	if x.Content == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 12, x.GetContent())
	return offset
}

func (x *BaseComment) fastWriteField13(buf []byte) (offset int) {
	if x.Pics == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 13, x.GetPics())
	return offset
}

func (x *BaseComment) fastWriteField14(buf []byte) (offset int) {
	if x.MemberIcon == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 14, x.GetMemberIcon())
	return offset
}

func (x *BaseComment) fastWriteField15(buf []byte) (offset int) {
	if x.ReplayCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 15, x.GetReplayCount())
	return offset
}

func (x *CommentAddReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CommentAddReq) fastWriteField1(buf []byte) (offset int) {
	if x.Comment == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetComment())
	return offset
}

func (x *CommentAddResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CommentAddResp) fastWriteField1(buf []byte) (offset int) {
	if x.Pong == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPong())
	return offset
}

func (x *CommentListReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CommentListReq) fastWriteField1(buf []byte) (offset int) {
	if x.Current == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCurrent())
	return offset
}

func (x *CommentListReq) fastWriteField2(buf []byte) (offset int) {
	if x.PageSize == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetPageSize())
	return offset
}

func (x *CommentListResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CommentListResp) fastWriteField1(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetTotal())
	return offset
}

func (x *CommentListResp) fastWriteField2(buf []byte) (offset int) {
	if x.List == nil {
		return offset
	}
	for i := range x.GetList() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetList()[i])
	}
	return offset
}

func (x *CommentUpdateReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CommentUpdateReq) fastWriteField1(buf []byte) (offset int) {
	if x.Comment == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetComment())
	return offset
}

func (x *CommentUpdateResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CommentUpdateResp) fastWriteField1(buf []byte) (offset int) {
	if x.Pong == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPong())
	return offset
}

func (x *CommentDeleteReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CommentDeleteReq) fastWriteField1(buf []byte) (offset int) {
	if len(x.Ids) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 1, len(x.GetIds()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteUint64(buf[offset:], numTagOrKey, x.GetIds()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *CommentDeleteResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CommentDeleteResp) fastWriteField1(buf []byte) (offset int) {
	if x.Pong == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPong())
	return offset
}

func (x *BaseComment) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	n += x.sizeField14()
	n += x.sizeField15()
	return n
}

func (x *BaseComment) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetId())
	return n
}

func (x *BaseComment) sizeField2() (n int) {
	if x.ProductId == 0 {
		return n
	}
	n += fastpb.SizeUint64(2, x.GetProductId())
	return n
}

func (x *BaseComment) sizeField3() (n int) {
	if x.MemberNickName == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetMemberNickName())
	return n
}

func (x *BaseComment) sizeField4() (n int) {
	if x.ProductName == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetProductName())
	return n
}

func (x *BaseComment) sizeField5() (n int) {
	if x.Star == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetStar())
	return n
}

func (x *BaseComment) sizeField6() (n int) {
	if x.MemberIp == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetMemberIp())
	return n
}

func (x *BaseComment) sizeField7() (n int) {
	if x.CreateTime == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetCreateTime())
	return n
}

func (x *BaseComment) sizeField8() (n int) {
	if x.ShowStatus == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetShowStatus())
	return n
}

func (x *BaseComment) sizeField9() (n int) {
	if x.ProductAttribute == "" {
		return n
	}
	n += fastpb.SizeString(9, x.GetProductAttribute())
	return n
}

func (x *BaseComment) sizeField10() (n int) {
	if x.CollectCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(10, x.GetCollectCount())
	return n
}

func (x *BaseComment) sizeField11() (n int) {
	if x.ReadCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(11, x.GetReadCount())
	return n
}

func (x *BaseComment) sizeField12() (n int) {
	if x.Content == "" {
		return n
	}
	n += fastpb.SizeString(12, x.GetContent())
	return n
}

func (x *BaseComment) sizeField13() (n int) {
	if x.Pics == "" {
		return n
	}
	n += fastpb.SizeString(13, x.GetPics())
	return n
}

func (x *BaseComment) sizeField14() (n int) {
	if x.MemberIcon == "" {
		return n
	}
	n += fastpb.SizeString(14, x.GetMemberIcon())
	return n
}

func (x *BaseComment) sizeField15() (n int) {
	if x.ReplayCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(15, x.GetReplayCount())
	return n
}

func (x *CommentAddReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CommentAddReq) sizeField1() (n int) {
	if x.Comment == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetComment())
	return n
}

func (x *CommentAddResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CommentAddResp) sizeField1() (n int) {
	if x.Pong == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPong())
	return n
}

func (x *CommentListReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CommentListReq) sizeField1() (n int) {
	if x.Current == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCurrent())
	return n
}

func (x *CommentListReq) sizeField2() (n int) {
	if x.PageSize == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetPageSize())
	return n
}

func (x *CommentListResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CommentListResp) sizeField1() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetTotal())
	return n
}

func (x *CommentListResp) sizeField2() (n int) {
	if x.List == nil {
		return n
	}
	for i := range x.GetList() {
		n += fastpb.SizeMessage(2, x.GetList()[i])
	}
	return n
}

func (x *CommentUpdateReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CommentUpdateReq) sizeField1() (n int) {
	if x.Comment == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetComment())
	return n
}

func (x *CommentUpdateResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CommentUpdateResp) sizeField1() (n int) {
	if x.Pong == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPong())
	return n
}

func (x *CommentDeleteReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CommentDeleteReq) sizeField1() (n int) {
	if len(x.Ids) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(1, len(x.GetIds()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeUint64(numTagOrKey, x.GetIds()[numIdxOrVal])
			return n
		})
	return n
}

func (x *CommentDeleteResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CommentDeleteResp) sizeField1() (n int) {
	if x.Pong == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPong())
	return n
}

var fieldIDToName_BaseComment = map[int32]string{
	1:  "Id",
	2:  "ProductId",
	3:  "MemberNickName",
	4:  "ProductName",
	5:  "Star",
	6:  "MemberIp",
	7:  "CreateTime",
	8:  "ShowStatus",
	9:  "ProductAttribute",
	10: "CollectCount",
	11: "ReadCount",
	12: "Content",
	13: "Pics",
	14: "MemberIcon",
	15: "ReplayCount",
}

var fieldIDToName_CommentAddReq = map[int32]string{
	1: "Comment",
}

var fieldIDToName_CommentAddResp = map[int32]string{
	1: "Pong",
}

var fieldIDToName_CommentListReq = map[int32]string{
	1: "Current",
	2: "PageSize",
}

var fieldIDToName_CommentListResp = map[int32]string{
	1: "Total",
	2: "List",
}

var fieldIDToName_CommentUpdateReq = map[int32]string{
	1: "Comment",
}

var fieldIDToName_CommentUpdateResp = map[int32]string{
	1: "Pong",
}

var fieldIDToName_CommentDeleteReq = map[int32]string{
	1: "Ids",
}

var fieldIDToName_CommentDeleteResp = map[int32]string{
	1: "Pong",
}
