// Code generated by Kitex v0.9.0. DO NOT EDIT.

package brandservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	brand "github.com/yuanyp8/wxcommerce/shared/kitex_gen/pms/brand"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"BrandAdd": kitex.NewMethodInfo(
		brandAddHandler,
		newBrandAddArgs,
		newBrandAddResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"BrandList": kitex.NewMethodInfo(
		brandListHandler,
		newBrandListArgs,
		newBrandListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"BrandListByIds": kitex.NewMethodInfo(
		brandListByIdsHandler,
		newBrandListByIdsArgs,
		newBrandListByIdsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"BrandUpdate": kitex.NewMethodInfo(
		brandUpdateHandler,
		newBrandUpdateArgs,
		newBrandUpdateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"BrandDelete": kitex.NewMethodInfo(
		brandDeleteHandler,
		newBrandDeleteArgs,
		newBrandDeleteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	brandServiceServiceInfo                = NewServiceInfo()
	brandServiceServiceInfoForClient       = NewServiceInfoForClient()
	brandServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return brandServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return brandServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return brandServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "BrandService"
	handlerType := (*brand.BrandService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "pms",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.0",
		Extra:           extra,
	}
	return svcInfo
}

func brandAddHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(brand.BrandAddReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(brand.BrandService).BrandAdd(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *BrandAddArgs:
		success, err := handler.(brand.BrandService).BrandAdd(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*BrandAddResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newBrandAddArgs() interface{} {
	return &BrandAddArgs{}
}

func newBrandAddResult() interface{} {
	return &BrandAddResult{}
}

type BrandAddArgs struct {
	Req *brand.BrandAddReq
}

func (p *BrandAddArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(brand.BrandAddReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *BrandAddArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *BrandAddArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *BrandAddArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *BrandAddArgs) Unmarshal(in []byte) error {
	msg := new(brand.BrandAddReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var BrandAddArgs_Req_DEFAULT *brand.BrandAddReq

func (p *BrandAddArgs) GetReq() *brand.BrandAddReq {
	if !p.IsSetReq() {
		return BrandAddArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *BrandAddArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BrandAddArgs) GetFirstArgument() interface{} {
	return p.Req
}

type BrandAddResult struct {
	Success *brand.BrandAddResp
}

var BrandAddResult_Success_DEFAULT *brand.BrandAddResp

func (p *BrandAddResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(brand.BrandAddResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *BrandAddResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *BrandAddResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *BrandAddResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *BrandAddResult) Unmarshal(in []byte) error {
	msg := new(brand.BrandAddResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *BrandAddResult) GetSuccess() *brand.BrandAddResp {
	if !p.IsSetSuccess() {
		return BrandAddResult_Success_DEFAULT
	}
	return p.Success
}

func (p *BrandAddResult) SetSuccess(x interface{}) {
	p.Success = x.(*brand.BrandAddResp)
}

func (p *BrandAddResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BrandAddResult) GetResult() interface{} {
	return p.Success
}

func brandListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(brand.BrandListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(brand.BrandService).BrandList(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *BrandListArgs:
		success, err := handler.(brand.BrandService).BrandList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*BrandListResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newBrandListArgs() interface{} {
	return &BrandListArgs{}
}

func newBrandListResult() interface{} {
	return &BrandListResult{}
}

type BrandListArgs struct {
	Req *brand.BrandListReq
}

func (p *BrandListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(brand.BrandListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *BrandListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *BrandListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *BrandListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *BrandListArgs) Unmarshal(in []byte) error {
	msg := new(brand.BrandListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var BrandListArgs_Req_DEFAULT *brand.BrandListReq

func (p *BrandListArgs) GetReq() *brand.BrandListReq {
	if !p.IsSetReq() {
		return BrandListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *BrandListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BrandListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type BrandListResult struct {
	Success *brand.BrandListResp
}

var BrandListResult_Success_DEFAULT *brand.BrandListResp

func (p *BrandListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(brand.BrandListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *BrandListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *BrandListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *BrandListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *BrandListResult) Unmarshal(in []byte) error {
	msg := new(brand.BrandListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *BrandListResult) GetSuccess() *brand.BrandListResp {
	if !p.IsSetSuccess() {
		return BrandListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *BrandListResult) SetSuccess(x interface{}) {
	p.Success = x.(*brand.BrandListResp)
}

func (p *BrandListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BrandListResult) GetResult() interface{} {
	return p.Success
}

func brandListByIdsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(brand.BrandListByIdsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(brand.BrandService).BrandListByIds(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *BrandListByIdsArgs:
		success, err := handler.(brand.BrandService).BrandListByIds(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*BrandListByIdsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newBrandListByIdsArgs() interface{} {
	return &BrandListByIdsArgs{}
}

func newBrandListByIdsResult() interface{} {
	return &BrandListByIdsResult{}
}

type BrandListByIdsArgs struct {
	Req *brand.BrandListByIdsReq
}

func (p *BrandListByIdsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(brand.BrandListByIdsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *BrandListByIdsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *BrandListByIdsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *BrandListByIdsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *BrandListByIdsArgs) Unmarshal(in []byte) error {
	msg := new(brand.BrandListByIdsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var BrandListByIdsArgs_Req_DEFAULT *brand.BrandListByIdsReq

func (p *BrandListByIdsArgs) GetReq() *brand.BrandListByIdsReq {
	if !p.IsSetReq() {
		return BrandListByIdsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *BrandListByIdsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BrandListByIdsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type BrandListByIdsResult struct {
	Success *brand.BrandListResp
}

var BrandListByIdsResult_Success_DEFAULT *brand.BrandListResp

func (p *BrandListByIdsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(brand.BrandListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *BrandListByIdsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *BrandListByIdsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *BrandListByIdsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *BrandListByIdsResult) Unmarshal(in []byte) error {
	msg := new(brand.BrandListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *BrandListByIdsResult) GetSuccess() *brand.BrandListResp {
	if !p.IsSetSuccess() {
		return BrandListByIdsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *BrandListByIdsResult) SetSuccess(x interface{}) {
	p.Success = x.(*brand.BrandListResp)
}

func (p *BrandListByIdsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BrandListByIdsResult) GetResult() interface{} {
	return p.Success
}

func brandUpdateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(brand.BrandUpdateReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(brand.BrandService).BrandUpdate(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *BrandUpdateArgs:
		success, err := handler.(brand.BrandService).BrandUpdate(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*BrandUpdateResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newBrandUpdateArgs() interface{} {
	return &BrandUpdateArgs{}
}

func newBrandUpdateResult() interface{} {
	return &BrandUpdateResult{}
}

type BrandUpdateArgs struct {
	Req *brand.BrandUpdateReq
}

func (p *BrandUpdateArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(brand.BrandUpdateReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *BrandUpdateArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *BrandUpdateArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *BrandUpdateArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *BrandUpdateArgs) Unmarshal(in []byte) error {
	msg := new(brand.BrandUpdateReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var BrandUpdateArgs_Req_DEFAULT *brand.BrandUpdateReq

func (p *BrandUpdateArgs) GetReq() *brand.BrandUpdateReq {
	if !p.IsSetReq() {
		return BrandUpdateArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *BrandUpdateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BrandUpdateArgs) GetFirstArgument() interface{} {
	return p.Req
}

type BrandUpdateResult struct {
	Success *brand.BrandUpdateResp
}

var BrandUpdateResult_Success_DEFAULT *brand.BrandUpdateResp

func (p *BrandUpdateResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(brand.BrandUpdateResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *BrandUpdateResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *BrandUpdateResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *BrandUpdateResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *BrandUpdateResult) Unmarshal(in []byte) error {
	msg := new(brand.BrandUpdateResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *BrandUpdateResult) GetSuccess() *brand.BrandUpdateResp {
	if !p.IsSetSuccess() {
		return BrandUpdateResult_Success_DEFAULT
	}
	return p.Success
}

func (p *BrandUpdateResult) SetSuccess(x interface{}) {
	p.Success = x.(*brand.BrandUpdateResp)
}

func (p *BrandUpdateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BrandUpdateResult) GetResult() interface{} {
	return p.Success
}

func brandDeleteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(brand.BrandDeleteReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(brand.BrandService).BrandDelete(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *BrandDeleteArgs:
		success, err := handler.(brand.BrandService).BrandDelete(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*BrandDeleteResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newBrandDeleteArgs() interface{} {
	return &BrandDeleteArgs{}
}

func newBrandDeleteResult() interface{} {
	return &BrandDeleteResult{}
}

type BrandDeleteArgs struct {
	Req *brand.BrandDeleteReq
}

func (p *BrandDeleteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(brand.BrandDeleteReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *BrandDeleteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *BrandDeleteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *BrandDeleteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *BrandDeleteArgs) Unmarshal(in []byte) error {
	msg := new(brand.BrandDeleteReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var BrandDeleteArgs_Req_DEFAULT *brand.BrandDeleteReq

func (p *BrandDeleteArgs) GetReq() *brand.BrandDeleteReq {
	if !p.IsSetReq() {
		return BrandDeleteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *BrandDeleteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BrandDeleteArgs) GetFirstArgument() interface{} {
	return p.Req
}

type BrandDeleteResult struct {
	Success *brand.BrandDeleteResp
}

var BrandDeleteResult_Success_DEFAULT *brand.BrandDeleteResp

func (p *BrandDeleteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(brand.BrandDeleteResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *BrandDeleteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *BrandDeleteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *BrandDeleteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *BrandDeleteResult) Unmarshal(in []byte) error {
	msg := new(brand.BrandDeleteResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *BrandDeleteResult) GetSuccess() *brand.BrandDeleteResp {
	if !p.IsSetSuccess() {
		return BrandDeleteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *BrandDeleteResult) SetSuccess(x interface{}) {
	p.Success = x.(*brand.BrandDeleteResp)
}

func (p *BrandDeleteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BrandDeleteResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) BrandAdd(ctx context.Context, Req *brand.BrandAddReq) (r *brand.BrandAddResp, err error) {
	var _args BrandAddArgs
	_args.Req = Req
	var _result BrandAddResult
	if err = p.c.Call(ctx, "BrandAdd", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BrandList(ctx context.Context, Req *brand.BrandListReq) (r *brand.BrandListResp, err error) {
	var _args BrandListArgs
	_args.Req = Req
	var _result BrandListResult
	if err = p.c.Call(ctx, "BrandList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BrandListByIds(ctx context.Context, Req *brand.BrandListByIdsReq) (r *brand.BrandListResp, err error) {
	var _args BrandListByIdsArgs
	_args.Req = Req
	var _result BrandListByIdsResult
	if err = p.c.Call(ctx, "BrandListByIds", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BrandUpdate(ctx context.Context, Req *brand.BrandUpdateReq) (r *brand.BrandUpdateResp, err error) {
	var _args BrandUpdateArgs
	_args.Req = Req
	var _result BrandUpdateResult
	if err = p.c.Call(ctx, "BrandUpdate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BrandDelete(ctx context.Context, Req *brand.BrandDeleteReq) (r *brand.BrandDeleteResp, err error) {
	var _args BrandDeleteArgs
	_args.Req = Req
	var _result BrandDeleteResult
	if err = p.c.Call(ctx, "BrandDelete", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
