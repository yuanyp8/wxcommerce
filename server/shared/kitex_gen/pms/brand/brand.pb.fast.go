// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package brand

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *BaseBrand) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BaseBrand[number], err)
}

func (x *BaseBrand) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *BaseBrand) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseBrand) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.FirstLetter, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseBrand) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Sort, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseBrand) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.FactoryStatus, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseBrand) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.ShowStatus, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseBrand) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.ProductCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseBrand) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.ProductCommentCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseBrand) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.Logo, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseBrand) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.BigPic, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseBrand) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.BrandStory, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BrandAddReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BrandAddReq[number], err)
}

func (x *BrandAddReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseBrand
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Brand = &v
	return offset, nil
}

func (x *BrandAddResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BrandAddResp[number], err)
}

func (x *BrandAddResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pong, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BrandListReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BrandListReq[number], err)
}

func (x *BrandListReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Current, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BrandListReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.PageSize, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BrandListReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BrandListReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.FactoryStatus, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BrandListReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.ShowStatus, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BrandListByIdsReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BrandListByIdsReq[number], err)
}

func (x *BrandListByIdsReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v uint64
			v, offset, err = fastpb.ReadUint64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.Ids = append(x.Ids, v)
			return offset, err
		})
	return offset, err
}

func (x *BrandListResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BrandListResp[number], err)
}

func (x *BrandListResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BrandListResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v BaseBrand
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.List = append(x.List, &v)
	return offset, nil
}

func (x *BrandUpdateReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BrandUpdateReq[number], err)
}

func (x *BrandUpdateReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseBrand
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Brand = &v
	return offset, nil
}

func (x *BrandUpdateResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BrandUpdateResp[number], err)
}

func (x *BrandUpdateResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pong, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BrandDeleteReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BrandDeleteReq[number], err)
}

func (x *BrandDeleteReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v uint64
			v, offset, err = fastpb.ReadUint64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.Ids = append(x.Ids, v)
			return offset, err
		})
	return offset, err
}

func (x *BrandDeleteResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BrandDeleteResp[number], err)
}

func (x *BrandDeleteResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pong, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseBrand) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	return offset
}

func (x *BaseBrand) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *BaseBrand) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *BaseBrand) fastWriteField3(buf []byte) (offset int) {
	if x.FirstLetter == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetFirstLetter())
	return offset
}

func (x *BaseBrand) fastWriteField4(buf []byte) (offset int) {
	if x.Sort == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetSort())
	return offset
}

func (x *BaseBrand) fastWriteField5(buf []byte) (offset int) {
	if x.FactoryStatus == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetFactoryStatus())
	return offset
}

func (x *BaseBrand) fastWriteField6(buf []byte) (offset int) {
	if x.ShowStatus == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetShowStatus())
	return offset
}

func (x *BaseBrand) fastWriteField7(buf []byte) (offset int) {
	if x.ProductCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetProductCount())
	return offset
}

func (x *BaseBrand) fastWriteField8(buf []byte) (offset int) {
	if x.ProductCommentCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetProductCommentCount())
	return offset
}

func (x *BaseBrand) fastWriteField9(buf []byte) (offset int) {
	if x.Logo == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 9, x.GetLogo())
	return offset
}

func (x *BaseBrand) fastWriteField10(buf []byte) (offset int) {
	if x.BigPic == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 10, x.GetBigPic())
	return offset
}

func (x *BaseBrand) fastWriteField11(buf []byte) (offset int) {
	if x.BrandStory == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 11, x.GetBrandStory())
	return offset
}

func (x *BrandAddReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *BrandAddReq) fastWriteField1(buf []byte) (offset int) {
	if x.Brand == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBrand())
	return offset
}

func (x *BrandAddResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *BrandAddResp) fastWriteField1(buf []byte) (offset int) {
	if x.Pong == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPong())
	return offset
}

func (x *BrandListReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *BrandListReq) fastWriteField1(buf []byte) (offset int) {
	if x.Current == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCurrent())
	return offset
}

func (x *BrandListReq) fastWriteField2(buf []byte) (offset int) {
	if x.PageSize == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetPageSize())
	return offset
}

func (x *BrandListReq) fastWriteField3(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetName())
	return offset
}

func (x *BrandListReq) fastWriteField4(buf []byte) (offset int) {
	if x.FactoryStatus == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetFactoryStatus())
	return offset
}

func (x *BrandListReq) fastWriteField5(buf []byte) (offset int) {
	if x.ShowStatus == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetShowStatus())
	return offset
}

func (x *BrandListByIdsReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *BrandListByIdsReq) fastWriteField1(buf []byte) (offset int) {
	if len(x.Ids) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 1, len(x.GetIds()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteUint64(buf[offset:], numTagOrKey, x.GetIds()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *BrandListResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *BrandListResp) fastWriteField1(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetTotal())
	return offset
}

func (x *BrandListResp) fastWriteField2(buf []byte) (offset int) {
	if x.List == nil {
		return offset
	}
	for i := range x.GetList() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetList()[i])
	}
	return offset
}

func (x *BrandUpdateReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *BrandUpdateReq) fastWriteField1(buf []byte) (offset int) {
	if x.Brand == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBrand())
	return offset
}

func (x *BrandUpdateResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *BrandUpdateResp) fastWriteField1(buf []byte) (offset int) {
	if x.Pong == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPong())
	return offset
}

func (x *BrandDeleteReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *BrandDeleteReq) fastWriteField1(buf []byte) (offset int) {
	if len(x.Ids) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 1, len(x.GetIds()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteUint64(buf[offset:], numTagOrKey, x.GetIds()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *BrandDeleteResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *BrandDeleteResp) fastWriteField1(buf []byte) (offset int) {
	if x.Pong == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPong())
	return offset
}

func (x *BaseBrand) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	return n
}

func (x *BaseBrand) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetId())
	return n
}

func (x *BaseBrand) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *BaseBrand) sizeField3() (n int) {
	if x.FirstLetter == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetFirstLetter())
	return n
}

func (x *BaseBrand) sizeField4() (n int) {
	if x.Sort == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetSort())
	return n
}

func (x *BaseBrand) sizeField5() (n int) {
	if x.FactoryStatus == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetFactoryStatus())
	return n
}

func (x *BaseBrand) sizeField6() (n int) {
	if x.ShowStatus == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetShowStatus())
	return n
}

func (x *BaseBrand) sizeField7() (n int) {
	if x.ProductCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetProductCount())
	return n
}

func (x *BaseBrand) sizeField8() (n int) {
	if x.ProductCommentCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetProductCommentCount())
	return n
}

func (x *BaseBrand) sizeField9() (n int) {
	if x.Logo == "" {
		return n
	}
	n += fastpb.SizeString(9, x.GetLogo())
	return n
}

func (x *BaseBrand) sizeField10() (n int) {
	if x.BigPic == "" {
		return n
	}
	n += fastpb.SizeString(10, x.GetBigPic())
	return n
}

func (x *BaseBrand) sizeField11() (n int) {
	if x.BrandStory == "" {
		return n
	}
	n += fastpb.SizeString(11, x.GetBrandStory())
	return n
}

func (x *BrandAddReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *BrandAddReq) sizeField1() (n int) {
	if x.Brand == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBrand())
	return n
}

func (x *BrandAddResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *BrandAddResp) sizeField1() (n int) {
	if x.Pong == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPong())
	return n
}

func (x *BrandListReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *BrandListReq) sizeField1() (n int) {
	if x.Current == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCurrent())
	return n
}

func (x *BrandListReq) sizeField2() (n int) {
	if x.PageSize == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetPageSize())
	return n
}

func (x *BrandListReq) sizeField3() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetName())
	return n
}

func (x *BrandListReq) sizeField4() (n int) {
	if x.FactoryStatus == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetFactoryStatus())
	return n
}

func (x *BrandListReq) sizeField5() (n int) {
	if x.ShowStatus == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetShowStatus())
	return n
}

func (x *BrandListByIdsReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *BrandListByIdsReq) sizeField1() (n int) {
	if len(x.Ids) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(1, len(x.GetIds()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeUint64(numTagOrKey, x.GetIds()[numIdxOrVal])
			return n
		})
	return n
}

func (x *BrandListResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *BrandListResp) sizeField1() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetTotal())
	return n
}

func (x *BrandListResp) sizeField2() (n int) {
	if x.List == nil {
		return n
	}
	for i := range x.GetList() {
		n += fastpb.SizeMessage(2, x.GetList()[i])
	}
	return n
}

func (x *BrandUpdateReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *BrandUpdateReq) sizeField1() (n int) {
	if x.Brand == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBrand())
	return n
}

func (x *BrandUpdateResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *BrandUpdateResp) sizeField1() (n int) {
	if x.Pong == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPong())
	return n
}

func (x *BrandDeleteReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *BrandDeleteReq) sizeField1() (n int) {
	if len(x.Ids) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(1, len(x.GetIds()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeUint64(numTagOrKey, x.GetIds()[numIdxOrVal])
			return n
		})
	return n
}

func (x *BrandDeleteResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *BrandDeleteResp) sizeField1() (n int) {
	if x.Pong == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPong())
	return n
}

var fieldIDToName_BaseBrand = map[int32]string{
	1:  "Id",
	2:  "Name",
	3:  "FirstLetter",
	4:  "Sort",
	5:  "FactoryStatus",
	6:  "ShowStatus",
	7:  "ProductCount",
	8:  "ProductCommentCount",
	9:  "Logo",
	10: "BigPic",
	11: "BrandStory",
}

var fieldIDToName_BrandAddReq = map[int32]string{
	1: "Brand",
}

var fieldIDToName_BrandAddResp = map[int32]string{
	1: "Pong",
}

var fieldIDToName_BrandListReq = map[int32]string{
	1: "Current",
	2: "PageSize",
	3: "Name",
	4: "FactoryStatus",
	5: "ShowStatus",
}

var fieldIDToName_BrandListByIdsReq = map[int32]string{
	1: "Ids",
}

var fieldIDToName_BrandListResp = map[int32]string{
	1: "Total",
	2: "List",
}

var fieldIDToName_BrandUpdateReq = map[int32]string{
	1: "Brand",
}

var fieldIDToName_BrandUpdateResp = map[int32]string{
	1: "Pong",
}

var fieldIDToName_BrandDeleteReq = map[int32]string{
	1: "Ids",
}

var fieldIDToName_BrandDeleteResp = map[int32]string{
	1: "Pong",
}
