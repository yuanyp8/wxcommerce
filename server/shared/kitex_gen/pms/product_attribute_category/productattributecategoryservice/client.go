// Code generated by Kitex v0.9.0. DO NOT EDIT.

package productattributecategoryservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	product_attribute_category "github.com/yuanyp8/wxcommerce/shared/kitex_gen/pms/product_attribute_category"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	ProductAttributeCategoryAdd(ctx context.Context, Req *product_attribute_category.ProductAttributeCategoryAddReq, callOptions ...callopt.Option) (r *product_attribute_category.ProductAttributeCategoryAddResp, err error)
	ProductAttributeCategoryList(ctx context.Context, Req *product_attribute_category.ProductAttributeCategoryListReq, callOptions ...callopt.Option) (r *product_attribute_category.ProductAttributeCategoryListResp, err error)
	ProductAttributeCategoryUpdate(ctx context.Context, Req *product_attribute_category.ProductAttributeCategoryUpdateReq, callOptions ...callopt.Option) (r *product_attribute_category.ProductAttributeCategoryUpdateResp, err error)
	ProductAttributeCategoryDelete(ctx context.Context, Req *product_attribute_category.ProductAttributeCategoryDeleteReq, callOptions ...callopt.Option) (r *product_attribute_category.ProductAttributeCategoryDeleteResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kProductAttributeCategoryServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kProductAttributeCategoryServiceClient struct {
	*kClient
}

func (p *kProductAttributeCategoryServiceClient) ProductAttributeCategoryAdd(ctx context.Context, Req *product_attribute_category.ProductAttributeCategoryAddReq, callOptions ...callopt.Option) (r *product_attribute_category.ProductAttributeCategoryAddResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ProductAttributeCategoryAdd(ctx, Req)
}

func (p *kProductAttributeCategoryServiceClient) ProductAttributeCategoryList(ctx context.Context, Req *product_attribute_category.ProductAttributeCategoryListReq, callOptions ...callopt.Option) (r *product_attribute_category.ProductAttributeCategoryListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ProductAttributeCategoryList(ctx, Req)
}

func (p *kProductAttributeCategoryServiceClient) ProductAttributeCategoryUpdate(ctx context.Context, Req *product_attribute_category.ProductAttributeCategoryUpdateReq, callOptions ...callopt.Option) (r *product_attribute_category.ProductAttributeCategoryUpdateResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ProductAttributeCategoryUpdate(ctx, Req)
}

func (p *kProductAttributeCategoryServiceClient) ProductAttributeCategoryDelete(ctx context.Context, Req *product_attribute_category.ProductAttributeCategoryDeleteReq, callOptions ...callopt.Option) (r *product_attribute_category.ProductAttributeCategoryDeleteResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ProductAttributeCategoryDelete(ctx, Req)
}
