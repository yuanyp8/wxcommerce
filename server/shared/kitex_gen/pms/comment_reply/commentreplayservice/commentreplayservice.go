// Code generated by Kitex v0.9.0. DO NOT EDIT.

package commentreplayservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	comment_reply "github.com/yuanyp8/wxcommerce/shared/kitex_gen/pms/comment_reply"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CommentReplayAdd": kitex.NewMethodInfo(
		commentReplayAddHandler,
		newCommentReplayAddArgs,
		newCommentReplayAddResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CommentReplayList": kitex.NewMethodInfo(
		commentReplayListHandler,
		newCommentReplayListArgs,
		newCommentReplayListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CommentReplayUpdate": kitex.NewMethodInfo(
		commentReplayUpdateHandler,
		newCommentReplayUpdateArgs,
		newCommentReplayUpdateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CommentReplayDelete": kitex.NewMethodInfo(
		commentReplayDeleteHandler,
		newCommentReplayDeleteArgs,
		newCommentReplayDeleteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	commentReplayServiceServiceInfo                = NewServiceInfo()
	commentReplayServiceServiceInfoForClient       = NewServiceInfoForClient()
	commentReplayServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return commentReplayServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return commentReplayServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return commentReplayServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "CommentReplayService"
	handlerType := (*comment_reply.CommentReplayService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "pms",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.0",
		Extra:           extra,
	}
	return svcInfo
}

func commentReplayAddHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment_reply.CommentReplayAddReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment_reply.CommentReplayService).CommentReplayAdd(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CommentReplayAddArgs:
		success, err := handler.(comment_reply.CommentReplayService).CommentReplayAdd(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CommentReplayAddResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCommentReplayAddArgs() interface{} {
	return &CommentReplayAddArgs{}
}

func newCommentReplayAddResult() interface{} {
	return &CommentReplayAddResult{}
}

type CommentReplayAddArgs struct {
	Req *comment_reply.CommentReplayAddReq
}

func (p *CommentReplayAddArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment_reply.CommentReplayAddReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CommentReplayAddArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CommentReplayAddArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CommentReplayAddArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CommentReplayAddArgs) Unmarshal(in []byte) error {
	msg := new(comment_reply.CommentReplayAddReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CommentReplayAddArgs_Req_DEFAULT *comment_reply.CommentReplayAddReq

func (p *CommentReplayAddArgs) GetReq() *comment_reply.CommentReplayAddReq {
	if !p.IsSetReq() {
		return CommentReplayAddArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CommentReplayAddArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommentReplayAddArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CommentReplayAddResult struct {
	Success *comment_reply.CommentReplayAddResp
}

var CommentReplayAddResult_Success_DEFAULT *comment_reply.CommentReplayAddResp

func (p *CommentReplayAddResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment_reply.CommentReplayAddResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CommentReplayAddResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CommentReplayAddResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CommentReplayAddResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CommentReplayAddResult) Unmarshal(in []byte) error {
	msg := new(comment_reply.CommentReplayAddResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CommentReplayAddResult) GetSuccess() *comment_reply.CommentReplayAddResp {
	if !p.IsSetSuccess() {
		return CommentReplayAddResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CommentReplayAddResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment_reply.CommentReplayAddResp)
}

func (p *CommentReplayAddResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommentReplayAddResult) GetResult() interface{} {
	return p.Success
}

func commentReplayListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment_reply.CommentReplayListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment_reply.CommentReplayService).CommentReplayList(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CommentReplayListArgs:
		success, err := handler.(comment_reply.CommentReplayService).CommentReplayList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CommentReplayListResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCommentReplayListArgs() interface{} {
	return &CommentReplayListArgs{}
}

func newCommentReplayListResult() interface{} {
	return &CommentReplayListResult{}
}

type CommentReplayListArgs struct {
	Req *comment_reply.CommentReplayListReq
}

func (p *CommentReplayListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment_reply.CommentReplayListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CommentReplayListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CommentReplayListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CommentReplayListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CommentReplayListArgs) Unmarshal(in []byte) error {
	msg := new(comment_reply.CommentReplayListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CommentReplayListArgs_Req_DEFAULT *comment_reply.CommentReplayListReq

func (p *CommentReplayListArgs) GetReq() *comment_reply.CommentReplayListReq {
	if !p.IsSetReq() {
		return CommentReplayListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CommentReplayListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommentReplayListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CommentReplayListResult struct {
	Success *comment_reply.CommentReplayListResp
}

var CommentReplayListResult_Success_DEFAULT *comment_reply.CommentReplayListResp

func (p *CommentReplayListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment_reply.CommentReplayListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CommentReplayListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CommentReplayListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CommentReplayListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CommentReplayListResult) Unmarshal(in []byte) error {
	msg := new(comment_reply.CommentReplayListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CommentReplayListResult) GetSuccess() *comment_reply.CommentReplayListResp {
	if !p.IsSetSuccess() {
		return CommentReplayListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CommentReplayListResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment_reply.CommentReplayListResp)
}

func (p *CommentReplayListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommentReplayListResult) GetResult() interface{} {
	return p.Success
}

func commentReplayUpdateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment_reply.CommentReplayUpdateReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment_reply.CommentReplayService).CommentReplayUpdate(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CommentReplayUpdateArgs:
		success, err := handler.(comment_reply.CommentReplayService).CommentReplayUpdate(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CommentReplayUpdateResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCommentReplayUpdateArgs() interface{} {
	return &CommentReplayUpdateArgs{}
}

func newCommentReplayUpdateResult() interface{} {
	return &CommentReplayUpdateResult{}
}

type CommentReplayUpdateArgs struct {
	Req *comment_reply.CommentReplayUpdateReq
}

func (p *CommentReplayUpdateArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment_reply.CommentReplayUpdateReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CommentReplayUpdateArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CommentReplayUpdateArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CommentReplayUpdateArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CommentReplayUpdateArgs) Unmarshal(in []byte) error {
	msg := new(comment_reply.CommentReplayUpdateReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CommentReplayUpdateArgs_Req_DEFAULT *comment_reply.CommentReplayUpdateReq

func (p *CommentReplayUpdateArgs) GetReq() *comment_reply.CommentReplayUpdateReq {
	if !p.IsSetReq() {
		return CommentReplayUpdateArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CommentReplayUpdateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommentReplayUpdateArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CommentReplayUpdateResult struct {
	Success *comment_reply.CommentReplayUpdateResp
}

var CommentReplayUpdateResult_Success_DEFAULT *comment_reply.CommentReplayUpdateResp

func (p *CommentReplayUpdateResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment_reply.CommentReplayUpdateResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CommentReplayUpdateResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CommentReplayUpdateResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CommentReplayUpdateResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CommentReplayUpdateResult) Unmarshal(in []byte) error {
	msg := new(comment_reply.CommentReplayUpdateResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CommentReplayUpdateResult) GetSuccess() *comment_reply.CommentReplayUpdateResp {
	if !p.IsSetSuccess() {
		return CommentReplayUpdateResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CommentReplayUpdateResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment_reply.CommentReplayUpdateResp)
}

func (p *CommentReplayUpdateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommentReplayUpdateResult) GetResult() interface{} {
	return p.Success
}

func commentReplayDeleteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment_reply.CommentReplayDeleteReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment_reply.CommentReplayService).CommentReplayDelete(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CommentReplayDeleteArgs:
		success, err := handler.(comment_reply.CommentReplayService).CommentReplayDelete(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CommentReplayDeleteResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCommentReplayDeleteArgs() interface{} {
	return &CommentReplayDeleteArgs{}
}

func newCommentReplayDeleteResult() interface{} {
	return &CommentReplayDeleteResult{}
}

type CommentReplayDeleteArgs struct {
	Req *comment_reply.CommentReplayDeleteReq
}

func (p *CommentReplayDeleteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment_reply.CommentReplayDeleteReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CommentReplayDeleteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CommentReplayDeleteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CommentReplayDeleteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CommentReplayDeleteArgs) Unmarshal(in []byte) error {
	msg := new(comment_reply.CommentReplayDeleteReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CommentReplayDeleteArgs_Req_DEFAULT *comment_reply.CommentReplayDeleteReq

func (p *CommentReplayDeleteArgs) GetReq() *comment_reply.CommentReplayDeleteReq {
	if !p.IsSetReq() {
		return CommentReplayDeleteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CommentReplayDeleteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommentReplayDeleteArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CommentReplayDeleteResult struct {
	Success *comment_reply.CommentReplayDeleteResp
}

var CommentReplayDeleteResult_Success_DEFAULT *comment_reply.CommentReplayDeleteResp

func (p *CommentReplayDeleteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment_reply.CommentReplayDeleteResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CommentReplayDeleteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CommentReplayDeleteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CommentReplayDeleteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CommentReplayDeleteResult) Unmarshal(in []byte) error {
	msg := new(comment_reply.CommentReplayDeleteResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CommentReplayDeleteResult) GetSuccess() *comment_reply.CommentReplayDeleteResp {
	if !p.IsSetSuccess() {
		return CommentReplayDeleteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CommentReplayDeleteResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment_reply.CommentReplayDeleteResp)
}

func (p *CommentReplayDeleteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommentReplayDeleteResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CommentReplayAdd(ctx context.Context, Req *comment_reply.CommentReplayAddReq) (r *comment_reply.CommentReplayAddResp, err error) {
	var _args CommentReplayAddArgs
	_args.Req = Req
	var _result CommentReplayAddResult
	if err = p.c.Call(ctx, "CommentReplayAdd", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentReplayList(ctx context.Context, Req *comment_reply.CommentReplayListReq) (r *comment_reply.CommentReplayListResp, err error) {
	var _args CommentReplayListArgs
	_args.Req = Req
	var _result CommentReplayListResult
	if err = p.c.Call(ctx, "CommentReplayList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentReplayUpdate(ctx context.Context, Req *comment_reply.CommentReplayUpdateReq) (r *comment_reply.CommentReplayUpdateResp, err error) {
	var _args CommentReplayUpdateArgs
	_args.Req = Req
	var _result CommentReplayUpdateResult
	if err = p.c.Call(ctx, "CommentReplayUpdate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentReplayDelete(ctx context.Context, Req *comment_reply.CommentReplayDeleteReq) (r *comment_reply.CommentReplayDeleteResp, err error) {
	var _args CommentReplayDeleteArgs
	_args.Req = Req
	var _result CommentReplayDeleteResult
	if err = p.c.Call(ctx, "CommentReplayDelete", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
