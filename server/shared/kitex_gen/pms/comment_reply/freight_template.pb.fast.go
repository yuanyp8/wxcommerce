// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package comment_reply

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *BaseFreightTemplate) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 61:
		offset, err = x.fastReadField61(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BaseFreightTemplate[number], err)
}

func (x *BaseFreightTemplate) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *BaseFreightTemplate) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseFreightTemplate) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.ChargeType, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseFreightTemplate) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.FirstWeight, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseFreightTemplate) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.FirstFee, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseFreightTemplate) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.ContinueFee, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseFreightTemplate) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Dest, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseFreightTemplate) fastReadField61(buf []byte, _type int8) (offset int, err error) {
	x.ContinueWeight, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *FreightTemplateAddReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_FreightTemplateAddReq[number], err)
}

func (x *FreightTemplateAddReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseFreightTemplate
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.FreightTemplate = &v
	return offset, nil
}

func (x *FreightTemplateAddResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_FreightTemplateAddResp[number], err)
}

func (x *FreightTemplateAddResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pong, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FreightTemplateListReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_FreightTemplateListReq[number], err)
}

func (x *FreightTemplateListReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Current, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *FreightTemplateListReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.PageSize, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *FreightTemplateListResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_FreightTemplateListResp[number], err)
}

func (x *FreightTemplateListResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *FreightTemplateListResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v BaseFreightTemplate
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.List = append(x.List, &v)
	return offset, nil
}

func (x *FreightTemplateUpdateReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_FreightTemplateUpdateReq[number], err)
}

func (x *FreightTemplateUpdateReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseFreightTemplate
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.FreightTemplate = &v
	return offset, nil
}

func (x *FreightTemplateUpdateResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_FreightTemplateUpdateResp[number], err)
}

func (x *FreightTemplateUpdateResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pong, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FreightTemplateDeleteReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_FreightTemplateDeleteReq[number], err)
}

func (x *FreightTemplateDeleteReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v uint64
			v, offset, err = fastpb.ReadUint64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.Ids = append(x.Ids, v)
			return offset, err
		})
	return offset, err
}

func (x *FreightTemplateDeleteResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_FreightTemplateDeleteResp[number], err)
}

func (x *FreightTemplateDeleteResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pong, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseFreightTemplate) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField61(buf[offset:])
	return offset
}

func (x *BaseFreightTemplate) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *BaseFreightTemplate) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *BaseFreightTemplate) fastWriteField3(buf []byte) (offset int) {
	if x.ChargeType == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetChargeType())
	return offset
}

func (x *BaseFreightTemplate) fastWriteField4(buf []byte) (offset int) {
	if x.FirstWeight == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetFirstWeight())
	return offset
}

func (x *BaseFreightTemplate) fastWriteField5(buf []byte) (offset int) {
	if x.FirstFee == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetFirstFee())
	return offset
}

func (x *BaseFreightTemplate) fastWriteField7(buf []byte) (offset int) {
	if x.ContinueFee == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetContinueFee())
	return offset
}

func (x *BaseFreightTemplate) fastWriteField8(buf []byte) (offset int) {
	if x.Dest == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetDest())
	return offset
}

func (x *BaseFreightTemplate) fastWriteField61(buf []byte) (offset int) {
	if x.ContinueWeight == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 61, x.GetContinueWeight())
	return offset
}

func (x *FreightTemplateAddReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *FreightTemplateAddReq) fastWriteField1(buf []byte) (offset int) {
	if x.FreightTemplate == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFreightTemplate())
	return offset
}

func (x *FreightTemplateAddResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *FreightTemplateAddResp) fastWriteField1(buf []byte) (offset int) {
	if x.Pong == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPong())
	return offset
}

func (x *FreightTemplateListReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *FreightTemplateListReq) fastWriteField1(buf []byte) (offset int) {
	if x.Current == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCurrent())
	return offset
}

func (x *FreightTemplateListReq) fastWriteField2(buf []byte) (offset int) {
	if x.PageSize == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetPageSize())
	return offset
}

func (x *FreightTemplateListResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *FreightTemplateListResp) fastWriteField1(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetTotal())
	return offset
}

func (x *FreightTemplateListResp) fastWriteField2(buf []byte) (offset int) {
	if x.List == nil {
		return offset
	}
	for i := range x.GetList() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetList()[i])
	}
	return offset
}

func (x *FreightTemplateUpdateReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *FreightTemplateUpdateReq) fastWriteField1(buf []byte) (offset int) {
	if x.FreightTemplate == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFreightTemplate())
	return offset
}

func (x *FreightTemplateUpdateResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *FreightTemplateUpdateResp) fastWriteField1(buf []byte) (offset int) {
	if x.Pong == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPong())
	return offset
}

func (x *FreightTemplateDeleteReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *FreightTemplateDeleteReq) fastWriteField1(buf []byte) (offset int) {
	if len(x.Ids) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 1, len(x.GetIds()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteUint64(buf[offset:], numTagOrKey, x.GetIds()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *FreightTemplateDeleteResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *FreightTemplateDeleteResp) fastWriteField1(buf []byte) (offset int) {
	if x.Pong == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPong())
	return offset
}

func (x *BaseFreightTemplate) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField61()
	return n
}

func (x *BaseFreightTemplate) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetId())
	return n
}

func (x *BaseFreightTemplate) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *BaseFreightTemplate) sizeField3() (n int) {
	if x.ChargeType == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetChargeType())
	return n
}

func (x *BaseFreightTemplate) sizeField4() (n int) {
	if x.FirstWeight == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetFirstWeight())
	return n
}

func (x *BaseFreightTemplate) sizeField5() (n int) {
	if x.FirstFee == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetFirstFee())
	return n
}

func (x *BaseFreightTemplate) sizeField7() (n int) {
	if x.ContinueFee == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetContinueFee())
	return n
}

func (x *BaseFreightTemplate) sizeField8() (n int) {
	if x.Dest == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetDest())
	return n
}

func (x *BaseFreightTemplate) sizeField61() (n int) {
	if x.ContinueWeight == 0 {
		return n
	}
	n += fastpb.SizeInt64(61, x.GetContinueWeight())
	return n
}

func (x *FreightTemplateAddReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *FreightTemplateAddReq) sizeField1() (n int) {
	if x.FreightTemplate == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetFreightTemplate())
	return n
}

func (x *FreightTemplateAddResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *FreightTemplateAddResp) sizeField1() (n int) {
	if x.Pong == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPong())
	return n
}

func (x *FreightTemplateListReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *FreightTemplateListReq) sizeField1() (n int) {
	if x.Current == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCurrent())
	return n
}

func (x *FreightTemplateListReq) sizeField2() (n int) {
	if x.PageSize == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetPageSize())
	return n
}

func (x *FreightTemplateListResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *FreightTemplateListResp) sizeField1() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetTotal())
	return n
}

func (x *FreightTemplateListResp) sizeField2() (n int) {
	if x.List == nil {
		return n
	}
	for i := range x.GetList() {
		n += fastpb.SizeMessage(2, x.GetList()[i])
	}
	return n
}

func (x *FreightTemplateUpdateReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *FreightTemplateUpdateReq) sizeField1() (n int) {
	if x.FreightTemplate == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetFreightTemplate())
	return n
}

func (x *FreightTemplateUpdateResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *FreightTemplateUpdateResp) sizeField1() (n int) {
	if x.Pong == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPong())
	return n
}

func (x *FreightTemplateDeleteReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *FreightTemplateDeleteReq) sizeField1() (n int) {
	if len(x.Ids) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(1, len(x.GetIds()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeUint64(numTagOrKey, x.GetIds()[numIdxOrVal])
			return n
		})
	return n
}

func (x *FreightTemplateDeleteResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *FreightTemplateDeleteResp) sizeField1() (n int) {
	if x.Pong == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPong())
	return n
}

var fieldIDToName_BaseFreightTemplate = map[int32]string{
	1:  "Id",
	2:  "Name",
	3:  "ChargeType",
	4:  "FirstWeight",
	5:  "FirstFee",
	7:  "ContinueFee",
	8:  "Dest",
	61: "ContinueWeight",
}

var fieldIDToName_FreightTemplateAddReq = map[int32]string{
	1: "FreightTemplate",
}

var fieldIDToName_FreightTemplateAddResp = map[int32]string{
	1: "Pong",
}

var fieldIDToName_FreightTemplateListReq = map[int32]string{
	1: "Current",
	2: "PageSize",
}

var fieldIDToName_FreightTemplateListResp = map[int32]string{
	1: "Total",
	2: "List",
}

var fieldIDToName_FreightTemplateUpdateReq = map[int32]string{
	1: "FreightTemplate",
}

var fieldIDToName_FreightTemplateUpdateResp = map[int32]string{
	1: "Pong",
}

var fieldIDToName_FreightTemplateDeleteReq = map[int32]string{
	1: "Ids",
}

var fieldIDToName_FreightTemplateDeleteResp = map[int32]string{
	1: "Pong",
}
