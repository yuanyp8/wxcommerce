// Code generated by Kitex v0.9.0. DO NOT EDIT.

package freighttemplateservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	comment_reply "github.com/yuanyp8/wxcommerce/shared/kitex_gen/pms/comment_reply"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	FreightTemplateAdd(ctx context.Context, Req *comment_reply.FreightTemplateAddReq, callOptions ...callopt.Option) (r *comment_reply.FreightTemplateAddResp, err error)
	FreightTemplateList(ctx context.Context, Req *comment_reply.FreightTemplateListReq, callOptions ...callopt.Option) (r *comment_reply.FreightTemplateListResp, err error)
	FreightTemplateUpdate(ctx context.Context, Req *comment_reply.FreightTemplateUpdateReq, callOptions ...callopt.Option) (r *comment_reply.FreightTemplateUpdateResp, err error)
	FreightTemplateDelete(ctx context.Context, Req *comment_reply.FreightTemplateDeleteReq, callOptions ...callopt.Option) (r *comment_reply.FreightTemplateDeleteResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kFreightTemplateServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kFreightTemplateServiceClient struct {
	*kClient
}

func (p *kFreightTemplateServiceClient) FreightTemplateAdd(ctx context.Context, Req *comment_reply.FreightTemplateAddReq, callOptions ...callopt.Option) (r *comment_reply.FreightTemplateAddResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FreightTemplateAdd(ctx, Req)
}

func (p *kFreightTemplateServiceClient) FreightTemplateList(ctx context.Context, Req *comment_reply.FreightTemplateListReq, callOptions ...callopt.Option) (r *comment_reply.FreightTemplateListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FreightTemplateList(ctx, Req)
}

func (p *kFreightTemplateServiceClient) FreightTemplateUpdate(ctx context.Context, Req *comment_reply.FreightTemplateUpdateReq, callOptions ...callopt.Option) (r *comment_reply.FreightTemplateUpdateResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FreightTemplateUpdate(ctx, Req)
}

func (p *kFreightTemplateServiceClient) FreightTemplateDelete(ctx context.Context, Req *comment_reply.FreightTemplateDeleteReq, callOptions ...callopt.Option) (r *comment_reply.FreightTemplateDeleteResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FreightTemplateDelete(ctx, Req)
}
