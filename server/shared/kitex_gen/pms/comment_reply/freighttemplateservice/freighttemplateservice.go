// Code generated by Kitex v0.9.0. DO NOT EDIT.

package freighttemplateservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	comment_reply "github.com/yuanyp8/wxcommerce/shared/kitex_gen/pms/comment_reply"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"FreightTemplateAdd": kitex.NewMethodInfo(
		freightTemplateAddHandler,
		newFreightTemplateAddArgs,
		newFreightTemplateAddResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"FreightTemplateList": kitex.NewMethodInfo(
		freightTemplateListHandler,
		newFreightTemplateListArgs,
		newFreightTemplateListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"FreightTemplateUpdate": kitex.NewMethodInfo(
		freightTemplateUpdateHandler,
		newFreightTemplateUpdateArgs,
		newFreightTemplateUpdateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"FreightTemplateDelete": kitex.NewMethodInfo(
		freightTemplateDeleteHandler,
		newFreightTemplateDeleteArgs,
		newFreightTemplateDeleteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	freightTemplateServiceServiceInfo                = NewServiceInfo()
	freightTemplateServiceServiceInfoForClient       = NewServiceInfoForClient()
	freightTemplateServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return freightTemplateServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return freightTemplateServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return freightTemplateServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "FreightTemplateService"
	handlerType := (*comment_reply.FreightTemplateService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "pms",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.0",
		Extra:           extra,
	}
	return svcInfo
}

func freightTemplateAddHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment_reply.FreightTemplateAddReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment_reply.FreightTemplateService).FreightTemplateAdd(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *FreightTemplateAddArgs:
		success, err := handler.(comment_reply.FreightTemplateService).FreightTemplateAdd(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FreightTemplateAddResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newFreightTemplateAddArgs() interface{} {
	return &FreightTemplateAddArgs{}
}

func newFreightTemplateAddResult() interface{} {
	return &FreightTemplateAddResult{}
}

type FreightTemplateAddArgs struct {
	Req *comment_reply.FreightTemplateAddReq
}

func (p *FreightTemplateAddArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment_reply.FreightTemplateAddReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FreightTemplateAddArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FreightTemplateAddArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FreightTemplateAddArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *FreightTemplateAddArgs) Unmarshal(in []byte) error {
	msg := new(comment_reply.FreightTemplateAddReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FreightTemplateAddArgs_Req_DEFAULT *comment_reply.FreightTemplateAddReq

func (p *FreightTemplateAddArgs) GetReq() *comment_reply.FreightTemplateAddReq {
	if !p.IsSetReq() {
		return FreightTemplateAddArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FreightTemplateAddArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FreightTemplateAddArgs) GetFirstArgument() interface{} {
	return p.Req
}

type FreightTemplateAddResult struct {
	Success *comment_reply.FreightTemplateAddResp
}

var FreightTemplateAddResult_Success_DEFAULT *comment_reply.FreightTemplateAddResp

func (p *FreightTemplateAddResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment_reply.FreightTemplateAddResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FreightTemplateAddResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FreightTemplateAddResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FreightTemplateAddResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *FreightTemplateAddResult) Unmarshal(in []byte) error {
	msg := new(comment_reply.FreightTemplateAddResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FreightTemplateAddResult) GetSuccess() *comment_reply.FreightTemplateAddResp {
	if !p.IsSetSuccess() {
		return FreightTemplateAddResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FreightTemplateAddResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment_reply.FreightTemplateAddResp)
}

func (p *FreightTemplateAddResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FreightTemplateAddResult) GetResult() interface{} {
	return p.Success
}

func freightTemplateListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment_reply.FreightTemplateListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment_reply.FreightTemplateService).FreightTemplateList(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *FreightTemplateListArgs:
		success, err := handler.(comment_reply.FreightTemplateService).FreightTemplateList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FreightTemplateListResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newFreightTemplateListArgs() interface{} {
	return &FreightTemplateListArgs{}
}

func newFreightTemplateListResult() interface{} {
	return &FreightTemplateListResult{}
}

type FreightTemplateListArgs struct {
	Req *comment_reply.FreightTemplateListReq
}

func (p *FreightTemplateListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment_reply.FreightTemplateListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FreightTemplateListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FreightTemplateListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FreightTemplateListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *FreightTemplateListArgs) Unmarshal(in []byte) error {
	msg := new(comment_reply.FreightTemplateListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FreightTemplateListArgs_Req_DEFAULT *comment_reply.FreightTemplateListReq

func (p *FreightTemplateListArgs) GetReq() *comment_reply.FreightTemplateListReq {
	if !p.IsSetReq() {
		return FreightTemplateListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FreightTemplateListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FreightTemplateListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type FreightTemplateListResult struct {
	Success *comment_reply.FreightTemplateListResp
}

var FreightTemplateListResult_Success_DEFAULT *comment_reply.FreightTemplateListResp

func (p *FreightTemplateListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment_reply.FreightTemplateListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FreightTemplateListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FreightTemplateListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FreightTemplateListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *FreightTemplateListResult) Unmarshal(in []byte) error {
	msg := new(comment_reply.FreightTemplateListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FreightTemplateListResult) GetSuccess() *comment_reply.FreightTemplateListResp {
	if !p.IsSetSuccess() {
		return FreightTemplateListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FreightTemplateListResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment_reply.FreightTemplateListResp)
}

func (p *FreightTemplateListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FreightTemplateListResult) GetResult() interface{} {
	return p.Success
}

func freightTemplateUpdateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment_reply.FreightTemplateUpdateReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment_reply.FreightTemplateService).FreightTemplateUpdate(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *FreightTemplateUpdateArgs:
		success, err := handler.(comment_reply.FreightTemplateService).FreightTemplateUpdate(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FreightTemplateUpdateResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newFreightTemplateUpdateArgs() interface{} {
	return &FreightTemplateUpdateArgs{}
}

func newFreightTemplateUpdateResult() interface{} {
	return &FreightTemplateUpdateResult{}
}

type FreightTemplateUpdateArgs struct {
	Req *comment_reply.FreightTemplateUpdateReq
}

func (p *FreightTemplateUpdateArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment_reply.FreightTemplateUpdateReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FreightTemplateUpdateArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FreightTemplateUpdateArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FreightTemplateUpdateArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *FreightTemplateUpdateArgs) Unmarshal(in []byte) error {
	msg := new(comment_reply.FreightTemplateUpdateReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FreightTemplateUpdateArgs_Req_DEFAULT *comment_reply.FreightTemplateUpdateReq

func (p *FreightTemplateUpdateArgs) GetReq() *comment_reply.FreightTemplateUpdateReq {
	if !p.IsSetReq() {
		return FreightTemplateUpdateArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FreightTemplateUpdateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FreightTemplateUpdateArgs) GetFirstArgument() interface{} {
	return p.Req
}

type FreightTemplateUpdateResult struct {
	Success *comment_reply.FreightTemplateUpdateResp
}

var FreightTemplateUpdateResult_Success_DEFAULT *comment_reply.FreightTemplateUpdateResp

func (p *FreightTemplateUpdateResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment_reply.FreightTemplateUpdateResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FreightTemplateUpdateResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FreightTemplateUpdateResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FreightTemplateUpdateResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *FreightTemplateUpdateResult) Unmarshal(in []byte) error {
	msg := new(comment_reply.FreightTemplateUpdateResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FreightTemplateUpdateResult) GetSuccess() *comment_reply.FreightTemplateUpdateResp {
	if !p.IsSetSuccess() {
		return FreightTemplateUpdateResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FreightTemplateUpdateResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment_reply.FreightTemplateUpdateResp)
}

func (p *FreightTemplateUpdateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FreightTemplateUpdateResult) GetResult() interface{} {
	return p.Success
}

func freightTemplateDeleteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment_reply.FreightTemplateDeleteReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment_reply.FreightTemplateService).FreightTemplateDelete(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *FreightTemplateDeleteArgs:
		success, err := handler.(comment_reply.FreightTemplateService).FreightTemplateDelete(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FreightTemplateDeleteResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newFreightTemplateDeleteArgs() interface{} {
	return &FreightTemplateDeleteArgs{}
}

func newFreightTemplateDeleteResult() interface{} {
	return &FreightTemplateDeleteResult{}
}

type FreightTemplateDeleteArgs struct {
	Req *comment_reply.FreightTemplateDeleteReq
}

func (p *FreightTemplateDeleteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment_reply.FreightTemplateDeleteReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FreightTemplateDeleteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FreightTemplateDeleteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FreightTemplateDeleteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *FreightTemplateDeleteArgs) Unmarshal(in []byte) error {
	msg := new(comment_reply.FreightTemplateDeleteReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FreightTemplateDeleteArgs_Req_DEFAULT *comment_reply.FreightTemplateDeleteReq

func (p *FreightTemplateDeleteArgs) GetReq() *comment_reply.FreightTemplateDeleteReq {
	if !p.IsSetReq() {
		return FreightTemplateDeleteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FreightTemplateDeleteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FreightTemplateDeleteArgs) GetFirstArgument() interface{} {
	return p.Req
}

type FreightTemplateDeleteResult struct {
	Success *comment_reply.FreightTemplateDeleteResp
}

var FreightTemplateDeleteResult_Success_DEFAULT *comment_reply.FreightTemplateDeleteResp

func (p *FreightTemplateDeleteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment_reply.FreightTemplateDeleteResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FreightTemplateDeleteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FreightTemplateDeleteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FreightTemplateDeleteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *FreightTemplateDeleteResult) Unmarshal(in []byte) error {
	msg := new(comment_reply.FreightTemplateDeleteResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FreightTemplateDeleteResult) GetSuccess() *comment_reply.FreightTemplateDeleteResp {
	if !p.IsSetSuccess() {
		return FreightTemplateDeleteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FreightTemplateDeleteResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment_reply.FreightTemplateDeleteResp)
}

func (p *FreightTemplateDeleteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FreightTemplateDeleteResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FreightTemplateAdd(ctx context.Context, Req *comment_reply.FreightTemplateAddReq) (r *comment_reply.FreightTemplateAddResp, err error) {
	var _args FreightTemplateAddArgs
	_args.Req = Req
	var _result FreightTemplateAddResult
	if err = p.c.Call(ctx, "FreightTemplateAdd", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FreightTemplateList(ctx context.Context, Req *comment_reply.FreightTemplateListReq) (r *comment_reply.FreightTemplateListResp, err error) {
	var _args FreightTemplateListArgs
	_args.Req = Req
	var _result FreightTemplateListResult
	if err = p.c.Call(ctx, "FreightTemplateList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FreightTemplateUpdate(ctx context.Context, Req *comment_reply.FreightTemplateUpdateReq) (r *comment_reply.FreightTemplateUpdateResp, err error) {
	var _args FreightTemplateUpdateArgs
	_args.Req = Req
	var _result FreightTemplateUpdateResult
	if err = p.c.Call(ctx, "FreightTemplateUpdate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FreightTemplateDelete(ctx context.Context, Req *comment_reply.FreightTemplateDeleteReq) (r *comment_reply.FreightTemplateDeleteResp, err error) {
	var _args FreightTemplateDeleteArgs
	_args.Req = Req
	var _result FreightTemplateDeleteResult
	if err = p.c.Call(ctx, "FreightTemplateDelete", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
