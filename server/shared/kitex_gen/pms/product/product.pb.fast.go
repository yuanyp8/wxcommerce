// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package product

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	brand "github.com/yuanyp8/wxcommerce/shared/kitex_gen/pms/brand"
	member_price "github.com/yuanyp8/wxcommerce/shared/kitex_gen/pms/member_price"
	product_attribute "github.com/yuanyp8/wxcommerce/shared/kitex_gen/pms/product_attribute"
	product_attribute_value "github.com/yuanyp8/wxcommerce/shared/kitex_gen/pms/product_attribute_value"
	product_full_reduction "github.com/yuanyp8/wxcommerce/shared/kitex_gen/pms/product_full_reduction"
	product_ladder "github.com/yuanyp8/wxcommerce/shared/kitex_gen/pms/product_ladder"
	sku_stock "github.com/yuanyp8/wxcommerce/shared/kitex_gen/pms/sku_stock"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *BaseProduct) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 14:
		offset, err = x.fastReadField14(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 15:
		offset, err = x.fastReadField15(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 16:
		offset, err = x.fastReadField16(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 17:
		offset, err = x.fastReadField17(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 18:
		offset, err = x.fastReadField18(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 19:
		offset, err = x.fastReadField19(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 20:
		offset, err = x.fastReadField20(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 21:
		offset, err = x.fastReadField21(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 22:
		offset, err = x.fastReadField22(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 23:
		offset, err = x.fastReadField23(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 24:
		offset, err = x.fastReadField24(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 25:
		offset, err = x.fastReadField25(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 26:
		offset, err = x.fastReadField26(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 27:
		offset, err = x.fastReadField27(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 28:
		offset, err = x.fastReadField28(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 29:
		offset, err = x.fastReadField29(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 30:
		offset, err = x.fastReadField30(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 31:
		offset, err = x.fastReadField31(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 32:
		offset, err = x.fastReadField32(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 33:
		offset, err = x.fastReadField33(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 34:
		offset, err = x.fastReadField34(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 35:
		offset, err = x.fastReadField35(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 36:
		offset, err = x.fastReadField36(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 37:
		offset, err = x.fastReadField37(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 38:
		offset, err = x.fastReadField38(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 39:
		offset, err = x.fastReadField39(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 40:
		offset, err = x.fastReadField40(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 41:
		offset, err = x.fastReadField41(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 42:
		offset, err = x.fastReadField42(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 43:
		offset, err = x.fastReadField43(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BaseProduct[number], err)
}

func (x *BaseProduct) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Pic, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.ProductSn, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.BrandId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.BrandName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.ProductCategoryId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.ProductCategoryName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int64
			v, offset, err = fastpb.ReadInt64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.ProductCategoryIdArray = append(x.ProductCategoryIdArray, v)
			return offset, err
		})
	return offset, err
}

func (x *BaseProduct) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.FreightTemplateId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.ProductAttributeCategoryId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.ServiceIDs, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	x.DeleteStatus, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField14(buf []byte, _type int8) (offset int, err error) {
	x.PublishStatus, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField15(buf []byte, _type int8) (offset int, err error) {
	x.NewStatus, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField16(buf []byte, _type int8) (offset int, err error) {
	x.RecommendStatus, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField17(buf []byte, _type int8) (offset int, err error) {
	x.VerifyStatus, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField18(buf []byte, _type int8) (offset int, err error) {
	x.PreviewStatus, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField19(buf []byte, _type int8) (offset int, err error) {
	x.Sort, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField20(buf []byte, _type int8) (offset int, err error) {
	x.Sale, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField21(buf []byte, _type int8) (offset int, err error) {
	x.Price, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField22(buf []byte, _type int8) (offset int, err error) {
	x.PromotionPrice, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField23(buf []byte, _type int8) (offset int, err error) {
	x.Stock, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField24(buf []byte, _type int8) (offset int, err error) {
	x.LowStock, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField25(buf []byte, _type int8) (offset int, err error) {
	x.GiftGrowth, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField26(buf []byte, _type int8) (offset int, err error) {
	x.GiftPoint, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField27(buf []byte, _type int8) (offset int, err error) {
	x.UsePointLimit, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField28(buf []byte, _type int8) (offset int, err error) {
	x.PromotionStartTime, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField29(buf []byte, _type int8) (offset int, err error) {
	x.PromotionEndTime, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField30(buf []byte, _type int8) (offset int, err error) {
	x.PromotionPerLimit, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField31(buf []byte, _type int8) (offset int, err error) {
	x.PromotionType, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField32(buf []byte, _type int8) (offset int, err error) {
	x.SubTitle, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField33(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField34(buf []byte, _type int8) (offset int, err error) {
	x.OriginalPrice, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField35(buf []byte, _type int8) (offset int, err error) {
	x.Unit, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField36(buf []byte, _type int8) (offset int, err error) {
	x.Weight, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField37(buf []byte, _type int8) (offset int, err error) {
	x.Keywords, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField38(buf []byte, _type int8) (offset int, err error) {
	x.Note, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField39(buf []byte, _type int8) (offset int, err error) {
	x.AlbumPics, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField40(buf []byte, _type int8) (offset int, err error) {
	x.DetailTitle, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField41(buf []byte, _type int8) (offset int, err error) {
	x.DetailDesc, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField42(buf []byte, _type int8) (offset int, err error) {
	x.DetailHtml, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseProduct) fastReadField43(buf []byte, _type int8) (offset int, err error) {
	x.DetailMobileHtml, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MemberPriceList) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MemberPriceList[number], err)
}

func (x *MemberPriceList) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.MemberLevelId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *MemberPriceList) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.MemberPrice, offset, err = fastpb.ReadFloat(buf, _type)
	return offset, err
}

func (x *MemberPriceList) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.MemberLevelName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ProductAttributeValueList) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductAttributeValueList[number], err)
}

func (x *ProductAttributeValueList) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ProductAttributeId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ProductAttributeValueList) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.AttributeValues, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ProductFullReductionList) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductFullReductionList[number], err)
}

func (x *ProductFullReductionList) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FullPrice, offset, err = fastpb.ReadFloat(buf, _type)
	return offset, err
}

func (x *ProductFullReductionList) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ReducePrice, offset, err = fastpb.ReadFloat(buf, _type)
	return offset, err
}

func (x *ProductLadderList) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductLadderList[number], err)
}

func (x *ProductLadderList) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Count, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ProductLadderList) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Discount, offset, err = fastpb.ReadFloat(buf, _type)
	return offset, err
}

func (x *ProductLadderList) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Price, offset, err = fastpb.ReadFloat(buf, _type)
	return offset, err
}

func (x *SkuStockList) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SkuStockList[number], err)
}

func (x *SkuStockList) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.SkuCode, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SkuStockList) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Price, offset, err = fastpb.ReadFloat(buf, _type)
	return offset, err
}

func (x *SkuStockList) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Stock, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SkuStockList) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.LowStock, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SkuStockList) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Pic, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SkuStockList) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Sale, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SkuStockList) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.PromotionPrice, offset, err = fastpb.ReadFloat(buf, _type)
	return offset, err
}

func (x *SkuStockList) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.LockStock, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SkuStockList) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.SpData, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ProductAddReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductAddReq[number], err)
}

func (x *ProductAddReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseProduct
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Product = &v
	return offset, nil
}

func (x *ProductAddReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v MemberPriceList
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.MemberPriceList = append(x.MemberPriceList, &v)
	return offset, nil
}

func (x *ProductAddReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v ProductAttributeValueList
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ProductAttributeValueList = append(x.ProductAttributeValueList, &v)
	return offset, nil
}

func (x *ProductAddReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v ProductFullReductionList
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ProductFullReductionList = append(x.ProductFullReductionList, &v)
	return offset, nil
}

func (x *ProductAddReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v ProductLadderList
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ProductLadderList = append(x.ProductLadderList, &v)
	return offset, nil
}

func (x *ProductAddReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v SkuStockList
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.SkuStockList = append(x.SkuStockList, &v)
	return offset, nil
}

func (x *ProductAddResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductAddResp[number], err)
}

func (x *ProductAddResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ProductId, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *ProductListReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductListReq[number], err)
}

func (x *ProductListReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Current, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ProductListReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.PageSize, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ProductListReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ProductListReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.VerifyStatus, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ProductListReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.ProductCategoryId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ProductListReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.PublishStatus, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ProductListReq) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.DeleteStatus, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ProductListReq) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.BrandId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ProductByIdsReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductByIdsReq[number], err)
}

func (x *ProductByIdsReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v uint64
			v, offset, err = fastpb.ReadUint64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.Ids = append(x.Ids, v)
			return offset, err
		})
	return offset, err
}

func (x *ProductListResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductListResp[number], err)
}

func (x *ProductListResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ProductListResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v BaseProduct
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.List = append(x.List, &v)
	return offset, nil
}

func (x *ProductUpdateReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductUpdateReq[number], err)
}

func (x *ProductUpdateReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseProduct
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Product = &v
	return offset, nil
}

func (x *ProductUpdateReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v MemberPriceList
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.MemberPriceList = append(x.MemberPriceList, &v)
	return offset, nil
}

func (x *ProductUpdateReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v ProductAttributeValueList
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ProductAttributeValueList = append(x.ProductAttributeValueList, &v)
	return offset, nil
}

func (x *ProductUpdateReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v ProductFullReductionList
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ProductFullReductionList = append(x.ProductFullReductionList, &v)
	return offset, nil
}

func (x *ProductUpdateReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v ProductLadderList
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ProductLadderList = append(x.ProductLadderList, &v)
	return offset, nil
}

func (x *ProductUpdateReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v SkuStockList
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.SkuStockList = append(x.SkuStockList, &v)
	return offset, nil
}

func (x *ProductUpdateResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductUpdateResp[number], err)
}

func (x *ProductUpdateResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pong, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ProductDeleteReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductDeleteReq[number], err)
}

func (x *ProductDeleteReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int64
			v, offset, err = fastpb.ReadInt64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.Ids = append(x.Ids, v)
			return offset, err
		})
	return offset, err
}

func (x *ProductDeleteResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductDeleteResp[number], err)
}

func (x *ProductDeleteResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pong, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ProductDetailByIdReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductDetailByIdReq[number], err)
}

func (x *ProductDetailByIdReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *ProductDetailByIdResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductDetailByIdResp[number], err)
}

func (x *ProductDetailByIdResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseProduct
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Product = &v
	return offset, nil
}

func (x *ProductDetailByIdResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v brand.BaseBrand
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Brand = &v
	return offset, nil
}

func (x *ProductDetailByIdResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v product_attribute.BaseProductAttribute
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ProductAttributeList = append(x.ProductAttributeList, &v)
	return offset, nil
}

func (x *ProductDetailByIdResp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v product_attribute_value.BaseProductAttributeValue
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ProductAttributeValueList = append(x.ProductAttributeValueList, &v)
	return offset, nil
}

func (x *ProductDetailByIdResp) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v sku_stock.BaseSkuStock
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.SkuStockList = append(x.SkuStockList, &v)
	return offset, nil
}

func (x *ProductDetailByIdResp) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v product_ladder.BaseProductLadder
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ProductLadderList = append(x.ProductLadderList, &v)
	return offset, nil
}

func (x *ProductDetailByIdResp) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	var v product_full_reduction.BaseProductFullReduction
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ProductFullReductionList = append(x.ProductFullReductionList, &v)
	return offset, nil
}

func (x *ProductDetailByIdResp) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	var v member_price.BaseMemberPrice
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.MemberPriceList = append(x.MemberPriceList, &v)
	return offset, nil
}

func (x *BaseProduct) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	offset += x.fastWriteField14(buf[offset:])
	offset += x.fastWriteField15(buf[offset:])
	offset += x.fastWriteField16(buf[offset:])
	offset += x.fastWriteField17(buf[offset:])
	offset += x.fastWriteField18(buf[offset:])
	offset += x.fastWriteField19(buf[offset:])
	offset += x.fastWriteField20(buf[offset:])
	offset += x.fastWriteField21(buf[offset:])
	offset += x.fastWriteField22(buf[offset:])
	offset += x.fastWriteField23(buf[offset:])
	offset += x.fastWriteField24(buf[offset:])
	offset += x.fastWriteField25(buf[offset:])
	offset += x.fastWriteField26(buf[offset:])
	offset += x.fastWriteField27(buf[offset:])
	offset += x.fastWriteField28(buf[offset:])
	offset += x.fastWriteField29(buf[offset:])
	offset += x.fastWriteField30(buf[offset:])
	offset += x.fastWriteField31(buf[offset:])
	offset += x.fastWriteField32(buf[offset:])
	offset += x.fastWriteField33(buf[offset:])
	offset += x.fastWriteField34(buf[offset:])
	offset += x.fastWriteField35(buf[offset:])
	offset += x.fastWriteField36(buf[offset:])
	offset += x.fastWriteField37(buf[offset:])
	offset += x.fastWriteField38(buf[offset:])
	offset += x.fastWriteField39(buf[offset:])
	offset += x.fastWriteField40(buf[offset:])
	offset += x.fastWriteField41(buf[offset:])
	offset += x.fastWriteField42(buf[offset:])
	offset += x.fastWriteField43(buf[offset:])
	return offset
}

func (x *BaseProduct) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *BaseProduct) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *BaseProduct) fastWriteField3(buf []byte) (offset int) {
	if x.Pic == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetPic())
	return offset
}

func (x *BaseProduct) fastWriteField4(buf []byte) (offset int) {
	if x.ProductSn == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetProductSn())
	return offset
}

func (x *BaseProduct) fastWriteField5(buf []byte) (offset int) {
	if x.BrandId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetBrandId())
	return offset
}

func (x *BaseProduct) fastWriteField6(buf []byte) (offset int) {
	if x.BrandName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetBrandName())
	return offset
}

func (x *BaseProduct) fastWriteField7(buf []byte) (offset int) {
	if x.ProductCategoryId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetProductCategoryId())
	return offset
}

func (x *BaseProduct) fastWriteField8(buf []byte) (offset int) {
	if x.ProductCategoryName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetProductCategoryName())
	return offset
}

func (x *BaseProduct) fastWriteField9(buf []byte) (offset int) {
	if len(x.ProductCategoryIdArray) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 9, len(x.GetProductCategoryIdArray()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, x.GetProductCategoryIdArray()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *BaseProduct) fastWriteField10(buf []byte) (offset int) {
	if x.FreightTemplateId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 10, x.GetFreightTemplateId())
	return offset
}

func (x *BaseProduct) fastWriteField11(buf []byte) (offset int) {
	if x.ProductAttributeCategoryId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 11, x.GetProductAttributeCategoryId())
	return offset
}

func (x *BaseProduct) fastWriteField12(buf []byte) (offset int) {
	if x.ServiceIDs == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 12, x.GetServiceIDs())
	return offset
}

func (x *BaseProduct) fastWriteField13(buf []byte) (offset int) {
	if x.DeleteStatus == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 13, x.GetDeleteStatus())
	return offset
}

func (x *BaseProduct) fastWriteField14(buf []byte) (offset int) {
	if x.PublishStatus == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 14, x.GetPublishStatus())
	return offset
}

func (x *BaseProduct) fastWriteField15(buf []byte) (offset int) {
	if x.NewStatus == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 15, x.GetNewStatus())
	return offset
}

func (x *BaseProduct) fastWriteField16(buf []byte) (offset int) {
	if x.RecommendStatus == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 16, x.GetRecommendStatus())
	return offset
}

func (x *BaseProduct) fastWriteField17(buf []byte) (offset int) {
	if x.VerifyStatus == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 17, x.GetVerifyStatus())
	return offset
}

func (x *BaseProduct) fastWriteField18(buf []byte) (offset int) {
	if x.PreviewStatus == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 18, x.GetPreviewStatus())
	return offset
}

func (x *BaseProduct) fastWriteField19(buf []byte) (offset int) {
	if x.Sort == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 19, x.GetSort())
	return offset
}

func (x *BaseProduct) fastWriteField20(buf []byte) (offset int) {
	if x.Sale == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 20, x.GetSale())
	return offset
}

func (x *BaseProduct) fastWriteField21(buf []byte) (offset int) {
	if x.Price == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 21, x.GetPrice())
	return offset
}

func (x *BaseProduct) fastWriteField22(buf []byte) (offset int) {
	if x.PromotionPrice == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 22, x.GetPromotionPrice())
	return offset
}

func (x *BaseProduct) fastWriteField23(buf []byte) (offset int) {
	if x.Stock == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 23, x.GetStock())
	return offset
}

func (x *BaseProduct) fastWriteField24(buf []byte) (offset int) {
	if x.LowStock == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 24, x.GetLowStock())
	return offset
}

func (x *BaseProduct) fastWriteField25(buf []byte) (offset int) {
	if x.GiftGrowth == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 25, x.GetGiftGrowth())
	return offset
}

func (x *BaseProduct) fastWriteField26(buf []byte) (offset int) {
	if x.GiftPoint == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 26, x.GetGiftPoint())
	return offset
}

func (x *BaseProduct) fastWriteField27(buf []byte) (offset int) {
	if x.UsePointLimit == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 27, x.GetUsePointLimit())
	return offset
}

func (x *BaseProduct) fastWriteField28(buf []byte) (offset int) {
	if x.PromotionStartTime == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 28, x.GetPromotionStartTime())
	return offset
}

func (x *BaseProduct) fastWriteField29(buf []byte) (offset int) {
	if x.PromotionEndTime == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 29, x.GetPromotionEndTime())
	return offset
}

func (x *BaseProduct) fastWriteField30(buf []byte) (offset int) {
	if x.PromotionPerLimit == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 30, x.GetPromotionPerLimit())
	return offset
}

func (x *BaseProduct) fastWriteField31(buf []byte) (offset int) {
	if x.PromotionType == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 31, x.GetPromotionType())
	return offset
}

func (x *BaseProduct) fastWriteField32(buf []byte) (offset int) {
	if x.SubTitle == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 32, x.GetSubTitle())
	return offset
}

func (x *BaseProduct) fastWriteField33(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 33, x.GetDescription())
	return offset
}

func (x *BaseProduct) fastWriteField34(buf []byte) (offset int) {
	if x.OriginalPrice == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 34, x.GetOriginalPrice())
	return offset
}

func (x *BaseProduct) fastWriteField35(buf []byte) (offset int) {
	if x.Unit == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 35, x.GetUnit())
	return offset
}

func (x *BaseProduct) fastWriteField36(buf []byte) (offset int) {
	if x.Weight == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 36, x.GetWeight())
	return offset
}

func (x *BaseProduct) fastWriteField37(buf []byte) (offset int) {
	if x.Keywords == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 37, x.GetKeywords())
	return offset
}

func (x *BaseProduct) fastWriteField38(buf []byte) (offset int) {
	if x.Note == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 38, x.GetNote())
	return offset
}

func (x *BaseProduct) fastWriteField39(buf []byte) (offset int) {
	if x.AlbumPics == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 39, x.GetAlbumPics())
	return offset
}

func (x *BaseProduct) fastWriteField40(buf []byte) (offset int) {
	if x.DetailTitle == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 40, x.GetDetailTitle())
	return offset
}

func (x *BaseProduct) fastWriteField41(buf []byte) (offset int) {
	if x.DetailDesc == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 41, x.GetDetailDesc())
	return offset
}

func (x *BaseProduct) fastWriteField42(buf []byte) (offset int) {
	if x.DetailHtml == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 42, x.GetDetailHtml())
	return offset
}

func (x *BaseProduct) fastWriteField43(buf []byte) (offset int) {
	if x.DetailMobileHtml == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 43, x.GetDetailMobileHtml())
	return offset
}

func (x *MemberPriceList) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *MemberPriceList) fastWriteField1(buf []byte) (offset int) {
	if x.MemberLevelId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetMemberLevelId())
	return offset
}

func (x *MemberPriceList) fastWriteField2(buf []byte) (offset int) {
	if x.MemberPrice == 0 {
		return offset
	}
	offset += fastpb.WriteFloat(buf[offset:], 2, x.GetMemberPrice())
	return offset
}

func (x *MemberPriceList) fastWriteField3(buf []byte) (offset int) {
	if x.MemberLevelName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetMemberLevelName())
	return offset
}

func (x *ProductAttributeValueList) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ProductAttributeValueList) fastWriteField1(buf []byte) (offset int) {
	if x.ProductAttributeId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetProductAttributeId())
	return offset
}

func (x *ProductAttributeValueList) fastWriteField2(buf []byte) (offset int) {
	if x.AttributeValues == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetAttributeValues())
	return offset
}

func (x *ProductFullReductionList) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ProductFullReductionList) fastWriteField1(buf []byte) (offset int) {
	if x.FullPrice == 0 {
		return offset
	}
	offset += fastpb.WriteFloat(buf[offset:], 1, x.GetFullPrice())
	return offset
}

func (x *ProductFullReductionList) fastWriteField2(buf []byte) (offset int) {
	if x.ReducePrice == 0 {
		return offset
	}
	offset += fastpb.WriteFloat(buf[offset:], 2, x.GetReducePrice())
	return offset
}

func (x *ProductLadderList) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *ProductLadderList) fastWriteField2(buf []byte) (offset int) {
	if x.Count == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetCount())
	return offset
}

func (x *ProductLadderList) fastWriteField3(buf []byte) (offset int) {
	if x.Discount == 0 {
		return offset
	}
	offset += fastpb.WriteFloat(buf[offset:], 3, x.GetDiscount())
	return offset
}

func (x *ProductLadderList) fastWriteField4(buf []byte) (offset int) {
	if x.Price == 0 {
		return offset
	}
	offset += fastpb.WriteFloat(buf[offset:], 4, x.GetPrice())
	return offset
}

func (x *SkuStockList) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	return offset
}

func (x *SkuStockList) fastWriteField1(buf []byte) (offset int) {
	if x.SkuCode == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetSkuCode())
	return offset
}

func (x *SkuStockList) fastWriteField2(buf []byte) (offset int) {
	if x.Price == 0 {
		return offset
	}
	offset += fastpb.WriteFloat(buf[offset:], 2, x.GetPrice())
	return offset
}

func (x *SkuStockList) fastWriteField3(buf []byte) (offset int) {
	if x.Stock == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetStock())
	return offset
}

func (x *SkuStockList) fastWriteField4(buf []byte) (offset int) {
	if x.LowStock == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetLowStock())
	return offset
}

func (x *SkuStockList) fastWriteField5(buf []byte) (offset int) {
	if x.Pic == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetPic())
	return offset
}

func (x *SkuStockList) fastWriteField6(buf []byte) (offset int) {
	if x.Sale == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetSale())
	return offset
}

func (x *SkuStockList) fastWriteField7(buf []byte) (offset int) {
	if x.PromotionPrice == 0 {
		return offset
	}
	offset += fastpb.WriteFloat(buf[offset:], 7, x.GetPromotionPrice())
	return offset
}

func (x *SkuStockList) fastWriteField8(buf []byte) (offset int) {
	if x.LockStock == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetLockStock())
	return offset
}

func (x *SkuStockList) fastWriteField9(buf []byte) (offset int) {
	if x.SpData == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 9, x.GetSpData())
	return offset
}

func (x *ProductAddReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *ProductAddReq) fastWriteField1(buf []byte) (offset int) {
	if x.Product == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetProduct())
	return offset
}

func (x *ProductAddReq) fastWriteField2(buf []byte) (offset int) {
	if x.MemberPriceList == nil {
		return offset
	}
	for i := range x.GetMemberPriceList() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetMemberPriceList()[i])
	}
	return offset
}

func (x *ProductAddReq) fastWriteField3(buf []byte) (offset int) {
	if x.ProductAttributeValueList == nil {
		return offset
	}
	for i := range x.GetProductAttributeValueList() {
		offset += fastpb.WriteMessage(buf[offset:], 3, x.GetProductAttributeValueList()[i])
	}
	return offset
}

func (x *ProductAddReq) fastWriteField4(buf []byte) (offset int) {
	if x.ProductFullReductionList == nil {
		return offset
	}
	for i := range x.GetProductFullReductionList() {
		offset += fastpb.WriteMessage(buf[offset:], 4, x.GetProductFullReductionList()[i])
	}
	return offset
}

func (x *ProductAddReq) fastWriteField5(buf []byte) (offset int) {
	if x.ProductLadderList == nil {
		return offset
	}
	for i := range x.GetProductLadderList() {
		offset += fastpb.WriteMessage(buf[offset:], 5, x.GetProductLadderList()[i])
	}
	return offset
}

func (x *ProductAddReq) fastWriteField6(buf []byte) (offset int) {
	if x.SkuStockList == nil {
		return offset
	}
	for i := range x.GetSkuStockList() {
		offset += fastpb.WriteMessage(buf[offset:], 6, x.GetSkuStockList()[i])
	}
	return offset
}

func (x *ProductAddResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ProductAddResp) fastWriteField1(buf []byte) (offset int) {
	if x.ProductId == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetProductId())
	return offset
}

func (x *ProductListReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	return offset
}

func (x *ProductListReq) fastWriteField1(buf []byte) (offset int) {
	if x.Current == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCurrent())
	return offset
}

func (x *ProductListReq) fastWriteField2(buf []byte) (offset int) {
	if x.PageSize == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetPageSize())
	return offset
}

func (x *ProductListReq) fastWriteField3(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetName())
	return offset
}

func (x *ProductListReq) fastWriteField4(buf []byte) (offset int) {
	if x.VerifyStatus == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetVerifyStatus())
	return offset
}

func (x *ProductListReq) fastWriteField5(buf []byte) (offset int) {
	if x.ProductCategoryId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetProductCategoryId())
	return offset
}

func (x *ProductListReq) fastWriteField6(buf []byte) (offset int) {
	if x.PublishStatus == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetPublishStatus())
	return offset
}

func (x *ProductListReq) fastWriteField7(buf []byte) (offset int) {
	if x.DeleteStatus == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetDeleteStatus())
	return offset
}

func (x *ProductListReq) fastWriteField8(buf []byte) (offset int) {
	if x.BrandId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetBrandId())
	return offset
}

func (x *ProductByIdsReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ProductByIdsReq) fastWriteField1(buf []byte) (offset int) {
	if len(x.Ids) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 1, len(x.GetIds()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteUint64(buf[offset:], numTagOrKey, x.GetIds()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *ProductListResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ProductListResp) fastWriteField1(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetTotal())
	return offset
}

func (x *ProductListResp) fastWriteField2(buf []byte) (offset int) {
	if x.List == nil {
		return offset
	}
	for i := range x.GetList() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetList()[i])
	}
	return offset
}

func (x *ProductUpdateReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *ProductUpdateReq) fastWriteField1(buf []byte) (offset int) {
	if x.Product == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetProduct())
	return offset
}

func (x *ProductUpdateReq) fastWriteField2(buf []byte) (offset int) {
	if x.MemberPriceList == nil {
		return offset
	}
	for i := range x.GetMemberPriceList() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetMemberPriceList()[i])
	}
	return offset
}

func (x *ProductUpdateReq) fastWriteField3(buf []byte) (offset int) {
	if x.ProductAttributeValueList == nil {
		return offset
	}
	for i := range x.GetProductAttributeValueList() {
		offset += fastpb.WriteMessage(buf[offset:], 3, x.GetProductAttributeValueList()[i])
	}
	return offset
}

func (x *ProductUpdateReq) fastWriteField4(buf []byte) (offset int) {
	if x.ProductFullReductionList == nil {
		return offset
	}
	for i := range x.GetProductFullReductionList() {
		offset += fastpb.WriteMessage(buf[offset:], 4, x.GetProductFullReductionList()[i])
	}
	return offset
}

func (x *ProductUpdateReq) fastWriteField5(buf []byte) (offset int) {
	if x.ProductLadderList == nil {
		return offset
	}
	for i := range x.GetProductLadderList() {
		offset += fastpb.WriteMessage(buf[offset:], 5, x.GetProductLadderList()[i])
	}
	return offset
}

func (x *ProductUpdateReq) fastWriteField6(buf []byte) (offset int) {
	if x.SkuStockList == nil {
		return offset
	}
	for i := range x.GetSkuStockList() {
		offset += fastpb.WriteMessage(buf[offset:], 6, x.GetSkuStockList()[i])
	}
	return offset
}

func (x *ProductUpdateResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ProductUpdateResp) fastWriteField1(buf []byte) (offset int) {
	if x.Pong == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPong())
	return offset
}

func (x *ProductDeleteReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ProductDeleteReq) fastWriteField1(buf []byte) (offset int) {
	if len(x.Ids) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 1, len(x.GetIds()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, x.GetIds()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *ProductDeleteResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ProductDeleteResp) fastWriteField1(buf []byte) (offset int) {
	if x.Pong == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPong())
	return offset
}

func (x *ProductDetailByIdReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ProductDetailByIdReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *ProductDetailByIdResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	return offset
}

func (x *ProductDetailByIdResp) fastWriteField1(buf []byte) (offset int) {
	if x.Product == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetProduct())
	return offset
}

func (x *ProductDetailByIdResp) fastWriteField2(buf []byte) (offset int) {
	if x.Brand == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetBrand())
	return offset
}

func (x *ProductDetailByIdResp) fastWriteField3(buf []byte) (offset int) {
	if x.ProductAttributeList == nil {
		return offset
	}
	for i := range x.GetProductAttributeList() {
		offset += fastpb.WriteMessage(buf[offset:], 3, x.GetProductAttributeList()[i])
	}
	return offset
}

func (x *ProductDetailByIdResp) fastWriteField4(buf []byte) (offset int) {
	if x.ProductAttributeValueList == nil {
		return offset
	}
	for i := range x.GetProductAttributeValueList() {
		offset += fastpb.WriteMessage(buf[offset:], 4, x.GetProductAttributeValueList()[i])
	}
	return offset
}

func (x *ProductDetailByIdResp) fastWriteField5(buf []byte) (offset int) {
	if x.SkuStockList == nil {
		return offset
	}
	for i := range x.GetSkuStockList() {
		offset += fastpb.WriteMessage(buf[offset:], 5, x.GetSkuStockList()[i])
	}
	return offset
}

func (x *ProductDetailByIdResp) fastWriteField6(buf []byte) (offset int) {
	if x.ProductLadderList == nil {
		return offset
	}
	for i := range x.GetProductLadderList() {
		offset += fastpb.WriteMessage(buf[offset:], 6, x.GetProductLadderList()[i])
	}
	return offset
}

func (x *ProductDetailByIdResp) fastWriteField7(buf []byte) (offset int) {
	if x.ProductFullReductionList == nil {
		return offset
	}
	for i := range x.GetProductFullReductionList() {
		offset += fastpb.WriteMessage(buf[offset:], 7, x.GetProductFullReductionList()[i])
	}
	return offset
}

func (x *ProductDetailByIdResp) fastWriteField8(buf []byte) (offset int) {
	if x.MemberPriceList == nil {
		return offset
	}
	for i := range x.GetMemberPriceList() {
		offset += fastpb.WriteMessage(buf[offset:], 8, x.GetMemberPriceList()[i])
	}
	return offset
}

func (x *BaseProduct) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	n += x.sizeField14()
	n += x.sizeField15()
	n += x.sizeField16()
	n += x.sizeField17()
	n += x.sizeField18()
	n += x.sizeField19()
	n += x.sizeField20()
	n += x.sizeField21()
	n += x.sizeField22()
	n += x.sizeField23()
	n += x.sizeField24()
	n += x.sizeField25()
	n += x.sizeField26()
	n += x.sizeField27()
	n += x.sizeField28()
	n += x.sizeField29()
	n += x.sizeField30()
	n += x.sizeField31()
	n += x.sizeField32()
	n += x.sizeField33()
	n += x.sizeField34()
	n += x.sizeField35()
	n += x.sizeField36()
	n += x.sizeField37()
	n += x.sizeField38()
	n += x.sizeField39()
	n += x.sizeField40()
	n += x.sizeField41()
	n += x.sizeField42()
	n += x.sizeField43()
	return n
}

func (x *BaseProduct) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetId())
	return n
}

func (x *BaseProduct) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *BaseProduct) sizeField3() (n int) {
	if x.Pic == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetPic())
	return n
}

func (x *BaseProduct) sizeField4() (n int) {
	if x.ProductSn == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetProductSn())
	return n
}

func (x *BaseProduct) sizeField5() (n int) {
	if x.BrandId == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetBrandId())
	return n
}

func (x *BaseProduct) sizeField6() (n int) {
	if x.BrandName == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetBrandName())
	return n
}

func (x *BaseProduct) sizeField7() (n int) {
	if x.ProductCategoryId == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetProductCategoryId())
	return n
}

func (x *BaseProduct) sizeField8() (n int) {
	if x.ProductCategoryName == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetProductCategoryName())
	return n
}

func (x *BaseProduct) sizeField9() (n int) {
	if len(x.ProductCategoryIdArray) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(9, len(x.GetProductCategoryIdArray()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt64(numTagOrKey, x.GetProductCategoryIdArray()[numIdxOrVal])
			return n
		})
	return n
}

func (x *BaseProduct) sizeField10() (n int) {
	if x.FreightTemplateId == 0 {
		return n
	}
	n += fastpb.SizeInt64(10, x.GetFreightTemplateId())
	return n
}

func (x *BaseProduct) sizeField11() (n int) {
	if x.ProductAttributeCategoryId == 0 {
		return n
	}
	n += fastpb.SizeInt64(11, x.GetProductAttributeCategoryId())
	return n
}

func (x *BaseProduct) sizeField12() (n int) {
	if x.ServiceIDs == "" {
		return n
	}
	n += fastpb.SizeString(12, x.GetServiceIDs())
	return n
}

func (x *BaseProduct) sizeField13() (n int) {
	if x.DeleteStatus == 0 {
		return n
	}
	n += fastpb.SizeInt64(13, x.GetDeleteStatus())
	return n
}

func (x *BaseProduct) sizeField14() (n int) {
	if x.PublishStatus == 0 {
		return n
	}
	n += fastpb.SizeInt64(14, x.GetPublishStatus())
	return n
}

func (x *BaseProduct) sizeField15() (n int) {
	if x.NewStatus == 0 {
		return n
	}
	n += fastpb.SizeInt64(15, x.GetNewStatus())
	return n
}

func (x *BaseProduct) sizeField16() (n int) {
	if x.RecommendStatus == 0 {
		return n
	}
	n += fastpb.SizeInt64(16, x.GetRecommendStatus())
	return n
}

func (x *BaseProduct) sizeField17() (n int) {
	if x.VerifyStatus == 0 {
		return n
	}
	n += fastpb.SizeInt64(17, x.GetVerifyStatus())
	return n
}

func (x *BaseProduct) sizeField18() (n int) {
	if x.PreviewStatus == 0 {
		return n
	}
	n += fastpb.SizeInt64(18, x.GetPreviewStatus())
	return n
}

func (x *BaseProduct) sizeField19() (n int) {
	if x.Sort == 0 {
		return n
	}
	n += fastpb.SizeInt64(19, x.GetSort())
	return n
}

func (x *BaseProduct) sizeField20() (n int) {
	if x.Sale == 0 {
		return n
	}
	n += fastpb.SizeInt64(20, x.GetSale())
	return n
}

func (x *BaseProduct) sizeField21() (n int) {
	if x.Price == 0 {
		return n
	}
	n += fastpb.SizeDouble(21, x.GetPrice())
	return n
}

func (x *BaseProduct) sizeField22() (n int) {
	if x.PromotionPrice == 0 {
		return n
	}
	n += fastpb.SizeDouble(22, x.GetPromotionPrice())
	return n
}

func (x *BaseProduct) sizeField23() (n int) {
	if x.Stock == 0 {
		return n
	}
	n += fastpb.SizeInt64(23, x.GetStock())
	return n
}

func (x *BaseProduct) sizeField24() (n int) {
	if x.LowStock == 0 {
		return n
	}
	n += fastpb.SizeInt64(24, x.GetLowStock())
	return n
}

func (x *BaseProduct) sizeField25() (n int) {
	if x.GiftGrowth == 0 {
		return n
	}
	n += fastpb.SizeInt64(25, x.GetGiftGrowth())
	return n
}

func (x *BaseProduct) sizeField26() (n int) {
	if x.GiftPoint == 0 {
		return n
	}
	n += fastpb.SizeInt64(26, x.GetGiftPoint())
	return n
}

func (x *BaseProduct) sizeField27() (n int) {
	if x.UsePointLimit == 0 {
		return n
	}
	n += fastpb.SizeInt64(27, x.GetUsePointLimit())
	return n
}

func (x *BaseProduct) sizeField28() (n int) {
	if x.PromotionStartTime == "" {
		return n
	}
	n += fastpb.SizeString(28, x.GetPromotionStartTime())
	return n
}

func (x *BaseProduct) sizeField29() (n int) {
	if x.PromotionEndTime == "" {
		return n
	}
	n += fastpb.SizeString(29, x.GetPromotionEndTime())
	return n
}

func (x *BaseProduct) sizeField30() (n int) {
	if x.PromotionPerLimit == 0 {
		return n
	}
	n += fastpb.SizeInt64(30, x.GetPromotionPerLimit())
	return n
}

func (x *BaseProduct) sizeField31() (n int) {
	if x.PromotionType == 0 {
		return n
	}
	n += fastpb.SizeInt64(31, x.GetPromotionType())
	return n
}

func (x *BaseProduct) sizeField32() (n int) {
	if x.SubTitle == "" {
		return n
	}
	n += fastpb.SizeString(32, x.GetSubTitle())
	return n
}

func (x *BaseProduct) sizeField33() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(33, x.GetDescription())
	return n
}

func (x *BaseProduct) sizeField34() (n int) {
	if x.OriginalPrice == 0 {
		return n
	}
	n += fastpb.SizeDouble(34, x.GetOriginalPrice())
	return n
}

func (x *BaseProduct) sizeField35() (n int) {
	if x.Unit == "" {
		return n
	}
	n += fastpb.SizeString(35, x.GetUnit())
	return n
}

func (x *BaseProduct) sizeField36() (n int) {
	if x.Weight == 0 {
		return n
	}
	n += fastpb.SizeDouble(36, x.GetWeight())
	return n
}

func (x *BaseProduct) sizeField37() (n int) {
	if x.Keywords == "" {
		return n
	}
	n += fastpb.SizeString(37, x.GetKeywords())
	return n
}

func (x *BaseProduct) sizeField38() (n int) {
	if x.Note == "" {
		return n
	}
	n += fastpb.SizeString(38, x.GetNote())
	return n
}

func (x *BaseProduct) sizeField39() (n int) {
	if x.AlbumPics == "" {
		return n
	}
	n += fastpb.SizeString(39, x.GetAlbumPics())
	return n
}

func (x *BaseProduct) sizeField40() (n int) {
	if x.DetailTitle == "" {
		return n
	}
	n += fastpb.SizeString(40, x.GetDetailTitle())
	return n
}

func (x *BaseProduct) sizeField41() (n int) {
	if x.DetailDesc == "" {
		return n
	}
	n += fastpb.SizeString(41, x.GetDetailDesc())
	return n
}

func (x *BaseProduct) sizeField42() (n int) {
	if x.DetailHtml == "" {
		return n
	}
	n += fastpb.SizeString(42, x.GetDetailHtml())
	return n
}

func (x *BaseProduct) sizeField43() (n int) {
	if x.DetailMobileHtml == "" {
		return n
	}
	n += fastpb.SizeString(43, x.GetDetailMobileHtml())
	return n
}

func (x *MemberPriceList) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *MemberPriceList) sizeField1() (n int) {
	if x.MemberLevelId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetMemberLevelId())
	return n
}

func (x *MemberPriceList) sizeField2() (n int) {
	if x.MemberPrice == 0 {
		return n
	}
	n += fastpb.SizeFloat(2, x.GetMemberPrice())
	return n
}

func (x *MemberPriceList) sizeField3() (n int) {
	if x.MemberLevelName == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetMemberLevelName())
	return n
}

func (x *ProductAttributeValueList) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ProductAttributeValueList) sizeField1() (n int) {
	if x.ProductAttributeId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetProductAttributeId())
	return n
}

func (x *ProductAttributeValueList) sizeField2() (n int) {
	if x.AttributeValues == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetAttributeValues())
	return n
}

func (x *ProductFullReductionList) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ProductFullReductionList) sizeField1() (n int) {
	if x.FullPrice == 0 {
		return n
	}
	n += fastpb.SizeFloat(1, x.GetFullPrice())
	return n
}

func (x *ProductFullReductionList) sizeField2() (n int) {
	if x.ReducePrice == 0 {
		return n
	}
	n += fastpb.SizeFloat(2, x.GetReducePrice())
	return n
}

func (x *ProductLadderList) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *ProductLadderList) sizeField2() (n int) {
	if x.Count == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetCount())
	return n
}

func (x *ProductLadderList) sizeField3() (n int) {
	if x.Discount == 0 {
		return n
	}
	n += fastpb.SizeFloat(3, x.GetDiscount())
	return n
}

func (x *ProductLadderList) sizeField4() (n int) {
	if x.Price == 0 {
		return n
	}
	n += fastpb.SizeFloat(4, x.GetPrice())
	return n
}

func (x *SkuStockList) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	return n
}

func (x *SkuStockList) sizeField1() (n int) {
	if x.SkuCode == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetSkuCode())
	return n
}

func (x *SkuStockList) sizeField2() (n int) {
	if x.Price == 0 {
		return n
	}
	n += fastpb.SizeFloat(2, x.GetPrice())
	return n
}

func (x *SkuStockList) sizeField3() (n int) {
	if x.Stock == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetStock())
	return n
}

func (x *SkuStockList) sizeField4() (n int) {
	if x.LowStock == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetLowStock())
	return n
}

func (x *SkuStockList) sizeField5() (n int) {
	if x.Pic == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetPic())
	return n
}

func (x *SkuStockList) sizeField6() (n int) {
	if x.Sale == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetSale())
	return n
}

func (x *SkuStockList) sizeField7() (n int) {
	if x.PromotionPrice == 0 {
		return n
	}
	n += fastpb.SizeFloat(7, x.GetPromotionPrice())
	return n
}

func (x *SkuStockList) sizeField8() (n int) {
	if x.LockStock == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetLockStock())
	return n
}

func (x *SkuStockList) sizeField9() (n int) {
	if x.SpData == "" {
		return n
	}
	n += fastpb.SizeString(9, x.GetSpData())
	return n
}

func (x *ProductAddReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *ProductAddReq) sizeField1() (n int) {
	if x.Product == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetProduct())
	return n
}

func (x *ProductAddReq) sizeField2() (n int) {
	if x.MemberPriceList == nil {
		return n
	}
	for i := range x.GetMemberPriceList() {
		n += fastpb.SizeMessage(2, x.GetMemberPriceList()[i])
	}
	return n
}

func (x *ProductAddReq) sizeField3() (n int) {
	if x.ProductAttributeValueList == nil {
		return n
	}
	for i := range x.GetProductAttributeValueList() {
		n += fastpb.SizeMessage(3, x.GetProductAttributeValueList()[i])
	}
	return n
}

func (x *ProductAddReq) sizeField4() (n int) {
	if x.ProductFullReductionList == nil {
		return n
	}
	for i := range x.GetProductFullReductionList() {
		n += fastpb.SizeMessage(4, x.GetProductFullReductionList()[i])
	}
	return n
}

func (x *ProductAddReq) sizeField5() (n int) {
	if x.ProductLadderList == nil {
		return n
	}
	for i := range x.GetProductLadderList() {
		n += fastpb.SizeMessage(5, x.GetProductLadderList()[i])
	}
	return n
}

func (x *ProductAddReq) sizeField6() (n int) {
	if x.SkuStockList == nil {
		return n
	}
	for i := range x.GetSkuStockList() {
		n += fastpb.SizeMessage(6, x.GetSkuStockList()[i])
	}
	return n
}

func (x *ProductAddResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ProductAddResp) sizeField1() (n int) {
	if x.ProductId == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetProductId())
	return n
}

func (x *ProductListReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	return n
}

func (x *ProductListReq) sizeField1() (n int) {
	if x.Current == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCurrent())
	return n
}

func (x *ProductListReq) sizeField2() (n int) {
	if x.PageSize == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetPageSize())
	return n
}

func (x *ProductListReq) sizeField3() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetName())
	return n
}

func (x *ProductListReq) sizeField4() (n int) {
	if x.VerifyStatus == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetVerifyStatus())
	return n
}

func (x *ProductListReq) sizeField5() (n int) {
	if x.ProductCategoryId == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetProductCategoryId())
	return n
}

func (x *ProductListReq) sizeField6() (n int) {
	if x.PublishStatus == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetPublishStatus())
	return n
}

func (x *ProductListReq) sizeField7() (n int) {
	if x.DeleteStatus == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetDeleteStatus())
	return n
}

func (x *ProductListReq) sizeField8() (n int) {
	if x.BrandId == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetBrandId())
	return n
}

func (x *ProductByIdsReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ProductByIdsReq) sizeField1() (n int) {
	if len(x.Ids) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(1, len(x.GetIds()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeUint64(numTagOrKey, x.GetIds()[numIdxOrVal])
			return n
		})
	return n
}

func (x *ProductListResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ProductListResp) sizeField1() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetTotal())
	return n
}

func (x *ProductListResp) sizeField2() (n int) {
	if x.List == nil {
		return n
	}
	for i := range x.GetList() {
		n += fastpb.SizeMessage(2, x.GetList()[i])
	}
	return n
}

func (x *ProductUpdateReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *ProductUpdateReq) sizeField1() (n int) {
	if x.Product == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetProduct())
	return n
}

func (x *ProductUpdateReq) sizeField2() (n int) {
	if x.MemberPriceList == nil {
		return n
	}
	for i := range x.GetMemberPriceList() {
		n += fastpb.SizeMessage(2, x.GetMemberPriceList()[i])
	}
	return n
}

func (x *ProductUpdateReq) sizeField3() (n int) {
	if x.ProductAttributeValueList == nil {
		return n
	}
	for i := range x.GetProductAttributeValueList() {
		n += fastpb.SizeMessage(3, x.GetProductAttributeValueList()[i])
	}
	return n
}

func (x *ProductUpdateReq) sizeField4() (n int) {
	if x.ProductFullReductionList == nil {
		return n
	}
	for i := range x.GetProductFullReductionList() {
		n += fastpb.SizeMessage(4, x.GetProductFullReductionList()[i])
	}
	return n
}

func (x *ProductUpdateReq) sizeField5() (n int) {
	if x.ProductLadderList == nil {
		return n
	}
	for i := range x.GetProductLadderList() {
		n += fastpb.SizeMessage(5, x.GetProductLadderList()[i])
	}
	return n
}

func (x *ProductUpdateReq) sizeField6() (n int) {
	if x.SkuStockList == nil {
		return n
	}
	for i := range x.GetSkuStockList() {
		n += fastpb.SizeMessage(6, x.GetSkuStockList()[i])
	}
	return n
}

func (x *ProductUpdateResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ProductUpdateResp) sizeField1() (n int) {
	if x.Pong == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPong())
	return n
}

func (x *ProductDeleteReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ProductDeleteReq) sizeField1() (n int) {
	if len(x.Ids) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(1, len(x.GetIds()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt64(numTagOrKey, x.GetIds()[numIdxOrVal])
			return n
		})
	return n
}

func (x *ProductDeleteResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ProductDeleteResp) sizeField1() (n int) {
	if x.Pong == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPong())
	return n
}

func (x *ProductDetailByIdReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ProductDetailByIdReq) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetId())
	return n
}

func (x *ProductDetailByIdResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	return n
}

func (x *ProductDetailByIdResp) sizeField1() (n int) {
	if x.Product == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetProduct())
	return n
}

func (x *ProductDetailByIdResp) sizeField2() (n int) {
	if x.Brand == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetBrand())
	return n
}

func (x *ProductDetailByIdResp) sizeField3() (n int) {
	if x.ProductAttributeList == nil {
		return n
	}
	for i := range x.GetProductAttributeList() {
		n += fastpb.SizeMessage(3, x.GetProductAttributeList()[i])
	}
	return n
}

func (x *ProductDetailByIdResp) sizeField4() (n int) {
	if x.ProductAttributeValueList == nil {
		return n
	}
	for i := range x.GetProductAttributeValueList() {
		n += fastpb.SizeMessage(4, x.GetProductAttributeValueList()[i])
	}
	return n
}

func (x *ProductDetailByIdResp) sizeField5() (n int) {
	if x.SkuStockList == nil {
		return n
	}
	for i := range x.GetSkuStockList() {
		n += fastpb.SizeMessage(5, x.GetSkuStockList()[i])
	}
	return n
}

func (x *ProductDetailByIdResp) sizeField6() (n int) {
	if x.ProductLadderList == nil {
		return n
	}
	for i := range x.GetProductLadderList() {
		n += fastpb.SizeMessage(6, x.GetProductLadderList()[i])
	}
	return n
}

func (x *ProductDetailByIdResp) sizeField7() (n int) {
	if x.ProductFullReductionList == nil {
		return n
	}
	for i := range x.GetProductFullReductionList() {
		n += fastpb.SizeMessage(7, x.GetProductFullReductionList()[i])
	}
	return n
}

func (x *ProductDetailByIdResp) sizeField8() (n int) {
	if x.MemberPriceList == nil {
		return n
	}
	for i := range x.GetMemberPriceList() {
		n += fastpb.SizeMessage(8, x.GetMemberPriceList()[i])
	}
	return n
}

var fieldIDToName_BaseProduct = map[int32]string{
	1:  "Id",
	2:  "Name",
	3:  "Pic",
	4:  "ProductSn",
	5:  "BrandId",
	6:  "BrandName",
	7:  "ProductCategoryId",
	8:  "ProductCategoryName",
	9:  "ProductCategoryIdArray",
	10: "FreightTemplateId",
	11: "ProductAttributeCategoryId",
	12: "ServiceIDs",
	13: "DeleteStatus",
	14: "PublishStatus",
	15: "NewStatus",
	16: "RecommendStatus",
	17: "VerifyStatus",
	18: "PreviewStatus",
	19: "Sort",
	20: "Sale",
	21: "Price",
	22: "PromotionPrice",
	23: "Stock",
	24: "LowStock",
	25: "GiftGrowth",
	26: "GiftPoint",
	27: "UsePointLimit",
	28: "PromotionStartTime",
	29: "PromotionEndTime",
	30: "PromotionPerLimit",
	31: "PromotionType",
	32: "SubTitle",
	33: "Description",
	34: "OriginalPrice",
	35: "Unit",
	36: "Weight",
	37: "Keywords",
	38: "Note",
	39: "AlbumPics",
	40: "DetailTitle",
	41: "DetailDesc",
	42: "DetailHtml",
	43: "DetailMobileHtml",
}

var fieldIDToName_MemberPriceList = map[int32]string{
	1: "MemberLevelId",
	2: "MemberPrice",
	3: "MemberLevelName",
}

var fieldIDToName_ProductAttributeValueList = map[int32]string{
	1: "ProductAttributeId",
	2: "AttributeValues",
}

var fieldIDToName_ProductFullReductionList = map[int32]string{
	1: "FullPrice",
	2: "ReducePrice",
}

var fieldIDToName_ProductLadderList = map[int32]string{
	2: "Count",
	3: "Discount",
	4: "Price",
}

var fieldIDToName_SkuStockList = map[int32]string{
	1: "SkuCode",
	2: "Price",
	3: "Stock",
	4: "LowStock",
	5: "Pic",
	6: "Sale",
	7: "PromotionPrice",
	8: "LockStock",
	9: "SpData",
}

var fieldIDToName_ProductAddReq = map[int32]string{
	1: "Product",
	2: "MemberPriceList",
	3: "ProductAttributeValueList",
	4: "ProductFullReductionList",
	5: "ProductLadderList",
	6: "SkuStockList",
}

var fieldIDToName_ProductAddResp = map[int32]string{
	1: "ProductId",
}

var fieldIDToName_ProductListReq = map[int32]string{
	1: "Current",
	2: "PageSize",
	3: "Name",
	4: "VerifyStatus",
	5: "ProductCategoryId",
	6: "PublishStatus",
	7: "DeleteStatus",
	8: "BrandId",
}

var fieldIDToName_ProductByIdsReq = map[int32]string{
	1: "Ids",
}

var fieldIDToName_ProductListResp = map[int32]string{
	1: "Total",
	2: "List",
}

var fieldIDToName_ProductUpdateReq = map[int32]string{
	1: "Product",
	2: "MemberPriceList",
	3: "ProductAttributeValueList",
	4: "ProductFullReductionList",
	5: "ProductLadderList",
	6: "SkuStockList",
}

var fieldIDToName_ProductUpdateResp = map[int32]string{
	1: "Pong",
}

var fieldIDToName_ProductDeleteReq = map[int32]string{
	1: "Ids",
}

var fieldIDToName_ProductDeleteResp = map[int32]string{
	1: "Pong",
}

var fieldIDToName_ProductDetailByIdReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_ProductDetailByIdResp = map[int32]string{
	1: "Product",
	2: "Brand",
	3: "ProductAttributeList",
	4: "ProductAttributeValueList",
	5: "SkuStockList",
	6: "ProductLadderList",
	7: "ProductFullReductionList",
	8: "MemberPriceList",
}

var _ = brand.File_brand_proto
var _ = product_attribute.File_product_attribute_proto
var _ = product_attribute_value.File_product_attribute_value_proto
var _ = sku_stock.File_sku_stock_proto
var _ = product_ladder.File_product_ladder_proto
var _ = product_full_reduction.File_product_full_reduction_proto
var _ = member_price.File_member_price_proto
