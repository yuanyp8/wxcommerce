// Code generated by Kitex v0.9.0. DO NOT EDIT.

package productservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	product "github.com/yuanyp8/wxcommerce/shared/kitex_gen/pms/product"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	ProductAdd(ctx context.Context, Req *product.ProductAddReq, callOptions ...callopt.Option) (r *product.ProductAddResp, err error)
	ProductList(ctx context.Context, Req *product.ProductListReq, callOptions ...callopt.Option) (r *product.ProductListResp, err error)
	ProductListByIds(ctx context.Context, Req *product.ProductByIdsReq, callOptions ...callopt.Option) (r *product.ProductListResp, err error)
	ProductUpdate(ctx context.Context, Req *product.ProductUpdateReq, callOptions ...callopt.Option) (r *product.ProductUpdateResp, err error)
	ProductDelete(ctx context.Context, Req *product.ProductDeleteReq, callOptions ...callopt.Option) (r *product.ProductDeleteResp, err error)
	ProductDetailById(ctx context.Context, Req *product.ProductDetailByIdReq, callOptions ...callopt.Option) (r *product.ProductDetailByIdResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kProductServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kProductServiceClient struct {
	*kClient
}

func (p *kProductServiceClient) ProductAdd(ctx context.Context, Req *product.ProductAddReq, callOptions ...callopt.Option) (r *product.ProductAddResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ProductAdd(ctx, Req)
}

func (p *kProductServiceClient) ProductList(ctx context.Context, Req *product.ProductListReq, callOptions ...callopt.Option) (r *product.ProductListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ProductList(ctx, Req)
}

func (p *kProductServiceClient) ProductListByIds(ctx context.Context, Req *product.ProductByIdsReq, callOptions ...callopt.Option) (r *product.ProductListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ProductListByIds(ctx, Req)
}

func (p *kProductServiceClient) ProductUpdate(ctx context.Context, Req *product.ProductUpdateReq, callOptions ...callopt.Option) (r *product.ProductUpdateResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ProductUpdate(ctx, Req)
}

func (p *kProductServiceClient) ProductDelete(ctx context.Context, Req *product.ProductDeleteReq, callOptions ...callopt.Option) (r *product.ProductDeleteResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ProductDelete(ctx, Req)
}

func (p *kProductServiceClient) ProductDetailById(ctx context.Context, Req *product.ProductDetailByIdReq, callOptions ...callopt.Option) (r *product.ProductDetailByIdResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ProductDetailById(ctx, Req)
}
